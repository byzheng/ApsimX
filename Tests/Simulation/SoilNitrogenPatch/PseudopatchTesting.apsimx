<?xml version="1.0" encoding="utf-8"?>
<Simulations xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" Version="27">
  <Name>Simulations</Name>
  <Memo>
    <Name>READ ME</Name>
    <IncludeInDocumentation>true</IncludeInDocumentation>
    <MemoText><![CDATA[These are very much still a work in progress]]></MemoText>
  </Memo>
  <DataStore>
    <Name>DataStore</Name>
    <IncludeInDocumentation>true</IncludeInDocumentation>
  </DataStore>
  <Simulation>
    <Name>GriddedGrazedPaddock</Name>
    <Clock>
      <Name>Clock</Name>
      <IncludeInDocumentation>true</IncludeInDocumentation>
      <StartDate>1972-01-01T00:00:00</StartDate>
      <EndDate>1972-12-31T00:00:00</EndDate>
    </Clock>
    <Summary>
      <Name>SummaryFile</Name>
      <IncludeInDocumentation>true</IncludeInDocumentation>
    </Summary>
    <Weather>
      <Name>Weather</Name>
      <IncludeInDocumentation>true</IncludeInDocumentation>
      <FileName>%root%\Examples\WeatherFiles\lincoln.met</FileName>
      <ExcelWorkSheetName />
    </Weather>
    <SoilArbitrator>
      <Name>Soil Arbitrator</Name>
      <IncludeInDocumentation>true</IncludeInDocumentation>
    </SoilArbitrator>
    <Manager>
      <Name>PatchManager</Name>
      <IncludeInDocumentation>true</IncludeInDocumentation>
      <Script>
        <CuttingFrequency>0</CuttingFrequency>
        <CuttingResidual>1000</CuttingResidual>
        <NutrientReturnType>Constant</NutrientReturnType>
        <AmountFertNReturned>40</AmountFertNReturned>
        <AmountDungNReturned>0</AmountDungNReturned>
        <FertiliserDepth>200</FertiliserDepth>
        <FertiliserReturnPattern>RotatingInOrder</FertiliserReturnPattern>
        <ReportingFreq>OnGrazing</ReportingFreq>
        <PatchType>GP</PatchType>
        <NumGPPatches>5</NumGPPatches>
        <SystemID>C</SystemID>
      </Script>
      <Code><![CDATA[using System;
using Models.Core;
using Models.Soils;
using Models.PMF;
using Models.Zones;
using Models.AgPasture;
using System.Xml.Serialization;
using Models.Soils;
using Models.SurfaceOM;
using APSIM.Shared.Utilities;
using System.Collections.Generic;
using System.Diagnostics;
// used with Debugger.Break(); to debug manager scripts



namespace Models
{
    [Serializable]
    [System.Xml.Serialization.XmlInclude(typeof(Model))]
    public class Script : Model
    {
        [Link] Clock Clock;
        [Link] Soil soil;
        [Link] ISummary summary = null;
        [Link] Weather Weather;
        [Link] Sward sward;
        [Link] Zone myZone;

        public string SoilType;
        public string SimLocation;
        public string SetIrrigation;
        public string GeneralFertType;
        public double GeneralFertAmt;
        public string PastureType;

        public int PatchCount;
        public int DaysSinceCut = 0;
        public int PatchNumForFert = -1;



        private int NumPaddocks = 0;
        // NumPaddocks is the number of AgPastures and SoilWats etc
        private int NumPatchesForFertiliser = 1;
        private double[] MonthlyFertAmt;
        private double[] FertDepthPlacement;
        private int[] PseudoRandomSeq;
        double iniOrgC;
        double iniOrgN;
        private int GrazingNumber = -1;
        private bool CutNow = false;

        private bool ReportToday = false;
        private double AmountDungCReturned = 0.0;
        private int nPatchesAdded = 0;
        private double NewArea;
        private int[] PatchToAddTo;
        private string[] PatchNmToAddTo = new string[1];

        public event AddSoilCNPatchDelegate AddSoilCNPatch;
        public event BiomassRemovedDelegate BiomassRemoved;

        [XmlIgnore] public bool grazedToday { get; set; }
        [XmlIgnore] public double Harvested { get; set; }
        [XmlIgnore] public double HarvestedN { get; set; }
        [XmlIgnore] public double UreaReturned  { get; set; }
        [XmlIgnore] public int NumPatches { get; set; }


        [Description("Frequency of cutting (days) (0 will be interpreted as the end of each month)")]
        public int CuttingFrequency { get; set; }

        [Description("Residual pasture mass after cutting (kg DM /ha)")]
        public int CuttingResidual { get; set; }

        [Description("Type of nutrient return - calculated from the amount of herbage harvested or constant")]
        public NutrientReturnTypes NutrientReturnType { get; set; }

        [Description("Amount of fertiliser N to apply to simulation after each cutting (pretend urine) (kgN/ha) (ignored if nutrient return is FromHarvest)")]
        public double AmountFertNReturned { get; set; }

        [Description("Amount of dung N to apply to simulation after each cutting (kgN/ha) (ignored if nutrient return is FromHarvest)")]
        public double AmountDungNReturned { get; set; }

        [Description("Depth band (0 mm to X mm) for fertiliser placement (mm)")]
        public int FertiliserDepth { get; set; }
                        
        [Description("Pattern for fertiliser return")]
        public urineReturnTypes FertiliserReturnPattern { get; set; }

        [Description("Frequency of reporting")]
        public reportingFrequencyTypes ReportingFreq { get; set; }

        [Description("Patch type")]
        public patchTypes PatchType { get; set; }

        [Description("How many patches should there be in the grid? (used to create the grid for GP and the size of the patches for PP)")]
        public int NumGPPatches { get; set; }

        [Description("System identifier")]
        public systemTypes SystemID { get; set; }


        //
        public enum systemTypes
        {
            /// <summary>A</summary>
            A,
            /// <summary>B</summary>
            B,
            /// <summary>C</summary>
            C,
            /// <summary>D</summary>
            D,
            /// <summary>E</summary>
            E,
            /// <summary>F</summary>
            F
        }

        public enum patchTypes
        {
            /// <summary>EP</summary>
            EP,
            /// <summary>EP</summary>
            GP,
            /// <summary>EP</summary>
            PP,
            /// <summary>EP</summary>
            UP
        }

        public enum reportingFrequencyTypes
        {
            /// <summary>Daily</summary>
            Daily,
            /// <summary>Every 10 days</summary>
            TenDaily,
            /// <summary>Monthly</summary>
            Monthly,
            /// <summary>Annual</summary>
            Annual,
            /// <summary>On grazing</summary>
            OnGrazing
        }

        public enum urineReturnTypes
        {
            /// <summary>Uniform</summary>
            UniformAcrossAllPatches,
            /// <summary>Rotating in order</summary>
            RotatingInOrder,
            /// <summary>Random</summary>
            Random,
            /// <summary>Pseudo-random</summary>
            PseudoRandom
        }

        public enum NutrientReturnTypes
        {
            /// <summary>Constant</summary>
            Constant,
            /// <summary>FromHarvest</summary>
            FromHarvest,
            /// <summary>SetMonthly</summary>
            SetMonthly
        }


        private void SetSystemParams()
        {
            if (SystemID == systemTypes.A)
            {
                SoilType = "HE";
                SimLocation = "Rua";
                SetIrrigation = "no";
                GeneralFertType = "NoWinter";
                GeneralFertAmt = 0.0;
                PastureType = "RyeWhite";
            }
            else if (SystemID == systemTypes.B)
            {
                SoilType = "HE";
                SimLocation = "Rua";
                SetIrrigation = "no";
                GeneralFertType = "NoWinter";
                GeneralFertAmt = 150.0;
                PastureType = "RyeWhite";
            }
            else if (SystemID == systemTypes.C)
            {
                SoilType = "VL";
                SimLocation = "Lin";
                SetIrrigation = "yes";
                GeneralFertType = "NoWinter";
                GeneralFertAmt = 0.0;
                PastureType = "RyeWhite";
            }
            else if (SystemID == systemTypes.D)
            {
                SoilType = "VL";
                SimLocation = "Lin";
                SetIrrigation = "yes";
                GeneralFertType = "NoWinter";
                GeneralFertAmt = 250.0;
                PastureType = "RyeWhite";
            }
            else if (SystemID == systemTypes.E)
            {
                SoilType = "VL";
                SimLocation = "Lin";
                SetIrrigation = "yes";
                GeneralFertType = "NoWinter";
                GeneralFertAmt = 400.0;
                PastureType = "GrassOnly";
            }
            else if (SystemID == systemTypes.F)
            {
                SoilType = "VL";
                SimLocation = "Lin";
                SetIrrigation = "no";
                GeneralFertType = "NoWinter";
                GeneralFertAmt = 0.0;
                PastureType = "RyeWhite";
            }
        }

        [EventSubscribe("StartOfSimulation")]
        private void OnStartOfSimulation(object sender, EventArgs e)
        {
            if (PatchType == patchTypes.EP)
                NumPatches = NumPaddocks;
            else if (PatchType == patchTypes.GP)
                NumPatches = NumGPPatches;
            else if (PatchType == patchTypes.PP)
                NumPatches = NumGPPatches; // but will actually use this to set the size of the newly created patches
            else if (PatchType == patchTypes.UP)
                NumPatches = NumGPPatches;
            else
                throw new Exception("Patch type not catered for");

            if ((PatchType == patchTypes.GP) && (NumPaddocks > 1))
                throw new Exception("Patch type GP may only have one paddock/zone");
            if ((PatchType == patchTypes.PP) && (NumPaddocks > 1))
                throw new Exception("Patch type PP may only have one paddock/zone");

            NumPatchesForFertiliser = 1;  // in the future this might be > 1
            if (FertiliserReturnPattern == urineReturnTypes.PseudoRandom)  // generate a return pattern up front
            {
                int MaxNumGrazings = (Clock.EndDate.Year - Clock.StartDate.Year + 1) * 52; //allow for a maximum of 1 per week

                PseudoRandomSeq = new int[MaxNumGrazings * NumPatchesForFertiliser];
                Random rndConstSeed = new Random((int)666);
                string MyString = "";
                for (int i = 0; i < (MaxNumGrazings * NumPatchesForFertiliser); i++)
                {
                    PseudoRandomSeq[i] = rndConstSeed.Next(0, NumPatches);  // will never select NumPatches 
                    MyString += Convert.ToString(PseudoRandomSeq[i]) + " ";
                }

                summary.WriteMessage(this, "The order of patch return will be: " + MyString);
            }

            // Add patches
            if (PatchType == patchTypes.GP)
            {
                soil.SoilNitrogen.MaximumNitrogenAvailableToPlants = 3.0;
                soil.SoilNitrogen.NPartitionApproach = "BasedOnConcentrationAndDelta";
                soil.SoilNitrogen.AllowPatchAutoAmalgamation = "No";
                soil.SoilNitrogen.AutoAmalgamationApproach = "CompareAll";
                soil.SoilNitrogen.basePatchApproach = "IDBased";
                soil.SoilNitrogen.AllowPatchAmalgamationByAge = "No";
                soil.SoilNitrogen.PatchAgeForForcedMerge = 3.0;                                


                int[] PatchToAddTo = new int[1];  //need an array variable for this
                string[] PatchNmToAddTo = new string[1];  
                int nPatchesAdded = 0;
                double NewArea = 1.0 / NumPatches;

                while (nPatchesAdded < NumPatches - 1)
                {
                    AddSoilCNPatchType NewPatch = new AddSoilCNPatchType();
                    NewPatch.DepositionType = "ToNewPatch";
                    NewPatch.AreaFraction = NewArea;
                    PatchToAddTo[0] = 0;
                    PatchNmToAddTo[0] = "0";
                    NewPatch.AffectedPatches_id = PatchToAddTo;
                    NewPatch.AffectedPatches_nm = PatchNmToAddTo;
                    NewPatch.SuppressMessages = "no";

                    AddSoilCNPatch.Invoke(NewPatch);
                    nPatchesAdded += 1;
                }                

                summary.WriteMessage(this, "NumPatches at end of initialisation (GP):" + soil.SoilNitrogen.PatchCount.ToString());
            }
        }


        [EventSubscribe("Commencing")]
        private void OnSimulationCommencing(object sender, EventArgs e)
        {
            summary.WriteMessage(this, "Initialising the Manager for grazing, urine return and reporting");

            grazedToday = false;

            // count the paddocks in the simulation
            NumPaddocks = 0;   
            foreach (Zone zone in Apsim.FindAll(this.Parent, typeof(Zone)))
                NumPaddocks += 1;   
            summary.WriteMessage(this, "There are " + NumPaddocks + " in the simulation");

            MonthlyFertAmt = new double[] { 24, 19, 17, 12, 8, 5, 5, 10, 16, 19, 23, 25 };

            summary.WriteMessage(this, "Finished initialising the Manager for grazing, urine return and reporting");
        }

        [EventSubscribe("DoManagement")]
        private void OnDoManagement(object sender, EventArgs e)
        {    

            // if this is the start of the simulation then sort out the depth for the fertiliser (aka urine) placement
            // can't do this in initialisation because of the module order
            if (Clock.Today == Clock.StartDate)
            {
                FertPlacementDepth();
                int i = -1;  // to use as a patch counter

                iniOrgC = 0.0; 
                iniOrgN = 0.0;
                foreach (Zone zone in Apsim.FindAll(this.Parent, typeof(Zone)))
                {
                    Soil soil = Apsim.Find(zone, typeof(Soil)) as Soil;
                    i += 1;
                    PatchCount = soil.SoilNitrogen.PatchCount;

                    for (int ii = 0; ii <= (soil.Thickness.Length - 1); ii++)
                    {
                        iniOrgC += soil.SoilNitrogen.TotalC[ii] / NumPaddocks; 
                        iniOrgN += soil.SoilNitrogen.organic_n[ii] / NumPaddocks;
                    }
                }
            }

            DaysSinceCut += 1;
            Harvested = 0.0;
            HarvestedN = 0.0;
            UreaReturned = 0.0;

            bool isEndOfMonth = false;
            if (Clock.Today.AddDays(1).Day == 1)
                isEndOfMonth = true;

            bool isEndOfYear = false;
            if (Clock.Today.AddDays(1).DayOfYear == 1)
                isEndOfYear = true;



            CutNow = false;
            grazedToday = false;
            if ((CuttingFrequency == 0) && (isEndOfMonth))
                CutNow = true;
            else if ((DaysSinceCut >= CuttingFrequency) && (CuttingFrequency > 0))
                CutNow = true;

            // should reporting be done today?  Do this here as need to know if grazing will happen
            if (ReportingFreq == reportingFrequencyTypes.Daily)
                ReportToday = true;
            else if ((ReportingFreq == reportingFrequencyTypes.TenDaily) && ((Clock.Today.Day == 10) || (Clock.Today.Day == 20) || (isEndOfMonth)))
                ReportToday = true;
            else if ((ReportingFreq == reportingFrequencyTypes.Monthly) && (isEndOfMonth))
                ReportToday = true;
            else if ((ReportingFreq == reportingFrequencyTypes.Annual) && (isEndOfYear))
                ReportToday = true;
            else if ((ReportingFreq == reportingFrequencyTypes.OnGrazing) && (CutNow))
                ReportToday = true;
            else
                ReportToday = false;

            //if (Clock.Today == Clock.StartDate) CutNow = true;

            if (CutNow)
            {
                //if(Clock.Today.Month < 3) Debugger.Break();

                grazedToday = true;
                summary.WriteMessage(this, "Doing Cutting");
                DaysSinceCut = 0;
                GrazingNumber += 1;  //was initialsed as -1 - this is used to pick the pseudo-random patch return number
                // GetPatchForUrineReturn();  now called in the deposition routine

                // do the cutting=grazing - it doesn't matter if there one (GP) or many (EP) physical paddocks in the simulation at this point
                int i = -1;  // to use as a patch counter
                Harvested = 0.0;
                HarvestedN = 0.0;
                foreach (Zone zone in Apsim.FindAll(this.Parent, typeof(Zone)))
                {
                    i += 1;
                    foreach (AgPasture.Sward sward in Apsim.Children(zone, typeof(AgPasture.Sward)))
                    {        
                        sward.Graze(amount: CuttingResidual, type: "SetResidueAmount");
                        Harvested += sward.HarvestedWt / NumPaddocks;
                        HarvestedN += sward.HarvestedN / NumPaddocks;
                    }
                }

                if (NutrientReturnType == NutrientReturnTypes.FromHarvest)
                {
                    AmountFertNReturned = HarvestedN * 0.50;  // TODO yikes - probably should not have hard-coded this, if it is not FromHarvest then the value has been set in the manager parameters
                    AmountDungNReturned = HarvestedN * 0.35;  // 
                    AmountDungCReturned = AmountDungNReturned * 20;
                }
                else if (NutrientReturnType == NutrientReturnTypes.SetMonthly)
                {
                    AmountFertNReturned = MonthlyFertAmt[Clock.Today.Month - 1];
                    AmountDungNReturned = AmountFertNReturned * (0.35 / 0.50);  // 
                    AmountDungCReturned = AmountDungNReturned * 20;
                }
                else
                {
                    // urine and dung are set from the parameters
                    AmountDungCReturned = AmountDungNReturned * 20;
                }


                summary.WriteMessage(this, "The amount of urea fertiliser to be returned to the whole paddock is " + AmountFertNReturned);

                DoUrineReturn();

                //DoTramplingAndDungReturn();

                summary.WriteMessage(this, "Finished Cutting");

            } // this is the end of the CutNow section

            if ((GeneralFertAmt > 0.0) && (Clock.Today.AddDays(1).Day == 1))
            {
                //DoFertiliser();
            }



            summary.WriteMessage(this, "End of DoMgmt");
            printMinN();
        }

        [EventSubscribe("EndOfDay")]
        private void OnEndOfDay(object sender, EventArgs e)
        {
            summary.WriteMessage(this, "Start of EndOfDay");
            printMinN();
        }

        public void DoTramplingAndDungReturn()
        {
            int i = -1;  // patch or paddock counter
            foreach (Zone zone in Apsim.FindAll(this.Parent, typeof(Zone)))
            {
                i += 1;
                SoilNitrogen soilN = Apsim.Find(zone, typeof(SoilNitrogen)) as SoilNitrogen;
                SurfaceOrganicMatter surfaceOM = Apsim.Find(zone, typeof(SurfaceOrganicMatter)) as SurfaceOrganicMatter; 

                // do some trampling of litter
                // accelerate the movement of surface litter into the soil - do this before the dung is added
                double temp = surfaceOM.Wt * 0.1;

                TillageType trampling = new TillageType();
                surfaceOM.Incorporate(fraction: (double)0.1, depth: (double)100.0);

                summary.WriteMessage(this, "For patch " + i + " the amount of litter trampled was " + temp + " and the remaining litter is " + (surfaceOM.Wt));

                // move the dung to litter - assume dung is 40% of that harvested and a C:N ratio of 
                BiomassRemovedType dung = new BiomassRemovedType();
                dung.crop_type = "RuminantDung_PastureFed";
                dung.dm_type = new string[] { "RuminantDung_PastureFed" };
                dung.dlt_crop_dm = new float[] { Convert.ToSingle(AmountDungCReturned / 0.4) };  // 
                dung.dlt_dm_n = new float[] { Convert.ToSingle(AmountDungNReturned) };    // 
                dung.dlt_dm_p = new float[] { 0.0F };
                dung.fraction_to_residue = new float[] { 1.0F };
                BiomassRemoved.Invoke(dung);
                summary.WriteMessage(this, "For patch " + i + " the amount of dung DM added to the litter was " + (AmountDungCReturned / 0.4) + " and the amount of N added in the dung was " + (AmountDungNReturned));

            } 
        }
        // this is the end of the trampling and dung patch/paddock section


        public void printMinN()
        {
            List<IModel> zones = Apsim.FindAll(this, typeof(Zone));
            Soil soil = Apsim.Find(zones[0], typeof(Soil)) as Soil; // Only one zone allowed for GP so use the first zone

            for (int ii = 0; ii < (soil.SoilNitrogen.PatchCount); ii++)
            {
                double MinNPatch = soil.SoilNitrogen.PatchTotalUrea[ii] + soil.SoilNitrogen.PatchTotalNH4[ii] + soil.SoilNitrogen.PatchTotalNO3[ii];
                summary.WriteMessage(this, "Patch " + ii + ":" + MinNPatch);
            }

        }

        public void DoUrineReturn()
        {
            if (PatchType == patchTypes.EP)
            {                

                GetPatchForUrineReturn();  //sets the value for PatchNumForFert
                int i = -1; //to count the paddocks
                foreach (Zone zone in Apsim.FindAll(this.Parent, typeof(Zone)))
                {
                    i += 1;
                    if (i == PatchNumForFert)
                    {
                        Fertiliser thisFert = Apsim.Find(zone, typeof(Fertiliser)) as Fertiliser;
                        Soil soil = Apsim.Find(zone, typeof(Soil)) as Soil;

                        double tempDepth = 0.0;
                        for (int ii = 0; ii <= (soil.Depth.Length - 1); ii++)
                        {
                            tempDepth += soil.Thickness[ii];
                            thisFert.Apply(Amount: (double)(FertDepthPlacement[ii] * NumPatches * AmountFertNReturned), Type: Fertiliser.Types.UreaN, Depth: (tempDepth - soil.Thickness[ii] / 2));
                        }
                        UreaReturned += AmountFertNReturned;
                    }
                } 

            }
            else if (PatchType == patchTypes.GP)
            {
                GetPatchForUrineReturn();  //sets the value for PatchNumForFert
                int[] PatchToAddTo = new int[1];  //because need an array variable for this
                string[] PatchNmToAddTo = new string[0];  //need an array variable for this
                List<IModel> zones = Apsim.FindAll(this, typeof(Zone));
                Soil soil = Apsim.Find(zones[0], typeof(Soil)) as Soil; // Only one zone allowed for GP so use the first
                double[] UreaToAdd = new double[soil.Depth.Length];  

                for (int ii = 0; ii <= (soil.Depth.Length - 1); ii++)
                    UreaToAdd[ii] = FertDepthPlacement[ii] * NumPatches * AmountFertNReturned;

                UreaReturned += AmountFertNReturned;


                AddSoilCNPatchType CurrentPatch = new AddSoilCNPatchType();
                CurrentPatch.Sender = "manager";
                CurrentPatch.DepositionType = "ToSpecificPatch";
                PatchToAddTo[0] = PatchNumForFert;
                CurrentPatch.AffectedPatches_id = PatchToAddTo;
                CurrentPatch.AffectedPatches_nm = PatchNmToAddTo;
                CurrentPatch.Urea = UreaToAdd;


                summary.WriteMessage(this, "Patch MinN prior to urine return:");

                printMinN();
                AddSoilCNPatch.Invoke(CurrentPatch); 
                summary.WriteMessage(this, "Patch MinN after urine return:");
                printMinN();
            }
            else if (PatchType == patchTypes.PP)
            {
                // create a new patch from base of area 1/NumGPPatches
                // add the fertiliser to that patch
                // set amalgamation autmomatic
                List<IModel> zones = Apsim.FindAll(this, typeof(Zone));
                Soil soil = Apsim.Find(zones[0], typeof(Soil)) as Soil; // Only one zone allowed for GP so use the first

                double[] UreaToAdd = new double[soil.Depth.Length];  

                for (int ii = 0; ii <= (soil.Depth.Length - 1); ii++)
                    UreaToAdd[ii] = FertDepthPlacement[ii] * NumPatches * AmountFertNReturned;

                int[] PatchToAddTo = new int[1];
                string[] PatchNmToAddTo = new string[1];  //need an array variable for this

                UreaReturned += AmountFertNReturned;

                AddSoilCNPatchType NewPatch = new AddSoilCNPatchType();
                NewPatch.DepositionType = "ToNewPatch";
                NewPatch.AreaFraction = 1.0 / NumPatches;
                PatchToAddTo[0] = 0;
                NewPatch.AffectedPatches_id = PatchToAddTo;
                NewPatch.AffectedPatches_nm = PatchNmToAddTo;
                NewPatch.Urea = UreaToAdd;

                summary.WriteMessage(this, "UreaToAdd " + UreaToAdd[0] + " " + UreaToAdd[1] + " " + UreaToAdd[2] + " " + UreaToAdd[3] + " " + UreaToAdd[4]);


                AddSoilCNPatch.Invoke(NewPatch);

                //throw new Exception("Have not set up the PP for DoUrineReturn yet");
            }
            else if (PatchType == patchTypes.UP)
            {
                int i = -1;  // patch or paddock counter
                foreach (Zone zone in Apsim.FindAll(this.Parent, typeof(Zone)))
                {
                    i += 1;

                    Fertiliser thisFert = Apsim.Find(zone, typeof(Fertiliser)) as Fertiliser;
                    Soil soil = Apsim.Find(zone, typeof(Soil)) as Soil;

                    double tempDepth = 0.0;
                    for (int ii = 0; ii <= (soil.Depth.Length - 1); ii++)
                    {
                        tempDepth += soil.Thickness[ii];
                        thisFert.Apply(Amount: (double)(FertDepthPlacement[ii] * AmountFertNReturned), Type: Fertiliser.Types.UreaN, Depth: (tempDepth - soil.Thickness[ii] / 2));
                    } 
                    UreaReturned += AmountFertNReturned;
                }
            }
            else
                throw new Exception("Patch type not catered for");



        }
        // end of DoUrineReturn

        public void GetPatchForUrineReturn()
        {
            
            if (FertiliserReturnPattern == urineReturnTypes.UniformAcrossAllPatches)
                PatchNumForFert = 0;  // but will not be used
            else if (FertiliserReturnPattern == urineReturnTypes.RotatingInOrder)
            {
                PatchNumForFert += 1;  //increment the patch number
                if (PatchNumForFert >= NumPatches)
                    PatchNumForFert = 0;  // but reset back to the first patch if needed
                //summary.WriteMessage(this, "The patch for fertiliser return is " + PatchNumForFert);
            }
            else if (FertiliserReturnPattern == urineReturnTypes.Random)
            {
                Random rnd = new Random();
                PatchNumForFert = rnd.Next(0, NumPatches);
                //summary.WriteMessage(this, "The next random number patch for fertiliser return is " + PatchNumForFert);
            }
            else if (FertiliserReturnPattern == urineReturnTypes.PseudoRandom)
            {
                PatchNumForFert = PseudoRandomSeq[GrazingNumber];
                //summary.WriteMessage(this, "The next pseudo-random number patch for fertiliser return is " + PatchNumForFert);
            }
        }
        // this is the end of GetPatchForUrineReturn


        public void FertPlacementDepth()
        {
            // note that this only looks at the first paddock and assumes that all the paddocks are the same
            int iii = -1;  // to use as a patch counter
            foreach (Zone zone in Apsim.FindAll(this.Parent, typeof(Zone)))
            {
                iii += 1;
                if (iii == 0)
                {
                    Soil soil = Apsim.Find(zone, typeof(Soil)) as Soil;
                    double tempDepth = 0.0;
                    FertDepthPlacement = new double[soil.Thickness.Length];
                    for (int i = 0; i <= (soil.Thickness.Length - 1); i++)
                    {
                        tempDepth += soil.Thickness[i];
                        if (tempDepth <= FertiliserDepth)
                        {
                            FertDepthPlacement[i] = soil.Thickness[i] / FertiliserDepth;
                        }
                        else
                        {
                            FertDepthPlacement[i] = (FertiliserDepth - (tempDepth - soil.Thickness[i])) / (tempDepth - (tempDepth - soil.Thickness[i])) * soil.Thickness[i] / FertiliserDepth;
                            FertDepthPlacement[i] = Math.Max(0.0, Math.Min(1.0, FertDepthPlacement[i]));
                        }
                        //if (FertiliserReturnPattern == "UniformAcrossAllPatches")
                        //   summary.WriteMessage(this, "The proportion of fertiliser applied to the " + i + "th layer will be " + FertDepthPlacement[i]);
                        //else
                        summary.WriteMessage(this, "The proportion of fertiliser (* NumPatches) applied to the " + i + "th layer will be " + FertDepthPlacement[i]);
                    }
                }
            }

        }
        // this is the end of FertPlacementDepth


        public void DoFertiliser()
        {
            bool ApplyFert = true; // the test for first day of the month has already been done
            double NumMonths = 0;

            if (GeneralFertType == "Monthly")
                NumMonths = 12;
            else if (GeneralFertType == "NoWinter")
            {
                if ((Clock.Today.Month < 5) || (Clock.Today.Month > 7))
                {
                    ApplyFert = true;
                    NumMonths = 9;
                }
            }
            else
                throw new Exception("Wrong general fertiliser setting");

            if (ApplyFert)
            {
                foreach (Zone zone in Apsim.FindAll(this.Parent, typeof(Zone)))  // but actually there will only be a single paddock
                {
                    Fertiliser thisFert = Apsim.Find(zone, typeof(Fertiliser)) as Fertiliser;

                    //thisFert.Apply((float)(GeneralFertAmt / NumMonths), (float) (0.0), "urea_n");
                    thisFert.Apply(Amount: (double)(GeneralFertAmt / NumMonths), Type: Fertiliser.Types.UreaN, Depth: FertiliserDepth);
                    summary.WriteMessage(this, "Applying " + (GeneralFertAmt / NumMonths) + " kg of general fertiliser");
                }

            }
        }
    }
}
]]></Code>
    </Manager>
    <Manager>
      <Name>ReportingWithPatchesVariables</Name>
      <IncludeInDocumentation>true</IncludeInDocumentation>
      <Script>
        <verbose>False</verbose>
        <InputModule>PatchManager</InputModule>
        <OutputModule>ReportingWithPatches</OutputModule>
        <ReportingFreq>Daily</ReportingFreq>
      </Script>
      <Code><![CDATA[using System;
using Models.Core;
using Models.Soils;
using Models.PMF;
using Models.Zones;
using Models.AgPasture;
using System.Xml.Serialization;
using Models.Soils;
using Models.SurfaceOM;
using APSIM.Shared.Utilities;
using System.Collections.Generic;
using System.Diagnostics; // used with Debugger.Break(); to debug manager scripts
using System;


namespace Models
{
    [Serializable]
    [System.Xml.Serialization.XmlInclude(typeof(Model))]
    public class Script : Model
    {
        [Link] Clock Clock;
        [Link] Simulation Simulation;
        [Link] Soil soil;
        [Link] ISummary summary = null;
        [Link] Weather Weather;
        //[Link] Zone zone;
        [Link] Sward sward;

        private Zone[] Zones {get; set; }

        private Models.Report.Report ReportingWithPatches;

        [Description("Verbose reporting mode (True/False)")]
        public bool verbose { get; set; }

        [Description("Name of the patch manager for input")]
        public string InputModule { get; set; }

        [Description("Name of the report for output")]
        public string OutputModule { get; set; }

        [Description("Frequency of reporting")]
        public reportingFrequencyTypes ReportingFreq { get; set; }

        [XmlIgnore] public int DaysSinceReport { get; set; }
        [XmlIgnore] public double NHA { get; set; }
        [XmlIgnore] public double PGR { get; set; }
        [XmlIgnore] public double HerbageGrazed { get; set; }
        [XmlIgnore] public double HerbageGrazedN { get; set; }
        [XmlIgnore] public double AreaUrinePatchesToday { get; set; }
        [XmlIgnore] public double UreaReturned { get; set; }
        [XmlIgnore] public double Fixation { get; set; }
        [XmlIgnore] public double LeachN { get; set; }
        [XmlIgnore] public double Denit { get; set; }
        [XmlIgnore] public double DenitN2O { get; set; }
        [XmlIgnore] public double OrgC { get; set; }
        [XmlIgnore] public double OrgN { get; set; }
        [XmlIgnore] public double dltOrgC { get; set; }
        [XmlIgnore] public double dltOrgN { get; set; }
        [XmlIgnore] public double MinN { get; set; }
        [XmlIgnore] public double UreaN { get; set; }
        [XmlIgnore] public double NH4N { get; set; }
        [XmlIgnore] public double NO3N { get; set; }
        [XmlIgnore] public double UreaAddedInGrazing { get; set; }

        [XmlIgnore] public double[] MinNPatch { get; set; }


        public int PatchCount;
        public int PaddockCount;
        public double Grazed;
        public double GrazedN;
        public double UrineNReturned;

        private double iniOrgC;
        private double iniOrgN;

        private bool ReportToday = false;      

        public enum reportingFrequencyTypes
        {
            /// <summary>Daily</summary>
            Daily,
            /// <summary>Every 10 days</summary>
            TenDaily,
            /// <summary>Monthly</summary>
            Monthly,
            /// <summary>Annual</summary>
            Annual,
            /// <summary>On grazing</summary>
            OnGrazing
        }

    

        [EventSubscribe("StartOfSimulation")]
        private void OnStartOfSimulation(object sender, EventArgs e)
        {

               if (verbose)
                summary.WriteMessage(this, "Initialising the Manager for grazing, urine return and reporting");
            DaysSinceReport = 0;
            PatchCount = soil.SoilNitrogen.PatchCount;
            PaddockCount=0;



            // Get list of zones in the simulation
            List<Zone> zones = new List<Zone>();

            foreach (Zone zone in Apsim.FindAll(this.Parent, typeof(Zone)))
            {
                zones.Add(zone as Zone);
                ReportingWithPatches = (Models.Report.Report)zone.Get("[" + OutputModule+ "]");
                PaddockCount++;
            }
            Zones = zones.ToArray();


            double myVariable;
            //myVariable = (double)ManageGriddedPaddock.Get("Script.Var1");
            //double grazedN = ManageGriddedPaddock.Get("Script.grazedN");

            if (verbose)
                summary.WriteMessage(this, "Finished initialising the Manager for grazing, urine return and reporting");
        }


        [EventSubscribe("DoDailyInitialisation")]
        private void OnDoDailyInitialisation(object sender, EventArgs e)
        {    
                    
            if (verbose)
                summary.WriteMessage(this, "In Daily Initialisation for the Reporting Manager on " + Clock.Today);
            if(Clock.Today == Clock.StartDate) {

                iniOrgC = 0.0; 
                iniOrgN = 0.0;            

                foreach (Zone zone in Zones)
                {
                    SoilNitrogen soilN = Apsim.Find(zone, typeof(SoilNitrogen)) as SoilNitrogen;
                    for (int ii = 0; ii < soil.Thickness.Length; ii++)
                    {
                        iniOrgC += soilN.TotalC[ii]; // TODO RJM Check this is right!
                        iniOrgN += soilN.organic_n[ii];
                    }
                }
            }        
            summary.WriteMessage(this, "End of DoDailyInit");
            printMinN();
        }

            
        [EventSubscribe("DoManagement")]
        private void DoManagement(object sender, EventArgs e)
        {
               bool isEndOfMonth = false;
            if (Clock.Today.AddDays(1).Day == 1) 
                isEndOfMonth = true;
            

            bool isEndOfYear = false;
            if (Clock.Today.Day == 31 && Clock.Today.Month == 12)
                isEndOfYear = true;


            bool GrazedToday = (bool) Apsim.Get(Simulation, InputModule + ".Script.grazedToday"); 

            // should reporting be done today?  
            if (ReportingFreq == reportingFrequencyTypes.Daily)
                ReportToday = true;
            else if ((ReportingFreq == reportingFrequencyTypes.TenDaily) && ((Clock.Today.Day == 10) || (Clock.Today.Day == 20) || (isEndOfMonth)))
                ReportToday = true;
            else if ((ReportingFreq == reportingFrequencyTypes.Monthly) && (isEndOfMonth))
                ReportToday = true;
            else if ((ReportingFreq == reportingFrequencyTypes.Annual) && (isEndOfYear))
                ReportToday = true;
            else if ((ReportingFreq == reportingFrequencyTypes.OnGrazing) && (GrazedToday))
                ReportToday = true;
            else
                ReportToday = false;
            if (verbose)
                summary.WriteMessage(this, "Finished Prepare for the Reporting Manager on " + Clock.Today);


            summary.WriteMessage(this, "End of DoMgmt");
            printMinN();

        } 

        public void printMinN()
        {
            List<IModel> zones = Apsim.FindAll(this, typeof(Zone));
            Soil soil = Apsim.Find(zones[0], typeof(Soil)) as Soil; // Only one zone allowed for GP so use the first zone

            for (int ii = 0; ii < (soil.SoilNitrogen.PatchCount); ii++)
            {
                double MinNPatch = soil.SoilNitrogen.PatchTotalUrea[ii]+soil.SoilNitrogen.PatchTotalNH4[ii] + soil.SoilNitrogen.PatchTotalNO3[ii];
                summary.WriteMessage(this, "Patch " + ii + ":" + MinNPatch);
            }

        }


        [EventSubscribe("DoSoilWaterMovement")]
        private void OnDoSoilWaterMovement(object sender, EventArgs e)
        {
            summary.WriteMessage(this, "DoSoilWaterMovement");

            //if((Clock.Today.Day==31)&&(Clock.Today.Month==1)) 
            //    Debugger.Break();
            printMinN();

        }

         [EventSubscribe("DoSoilTemperature")]
        private void OnDoSoilTemperature(object sender, EventArgs e)
        {
            summary.WriteMessage(this, "DoSoilTemperature");

            //if((Clock.Today.Day==31)&&(Clock.Today.Month==1)) 
                //Debugger.Break();
            printMinN();

        }




        [EventSubscribe("EndOfDay")]
        private void OnEndOfDay(object sender, EventArgs e)
        {
               summary.WriteMessage(this, "Start of EndOfDay");
            printMinN();


            if (verbose)
                summary.WriteMessage(this, "In EndOfDay for the Reporting Manager on  " + Clock.Today);

            

            DaysSinceReport += 1;



            foreach (Zone zone in Zones)
            {

                Sward sward = Apsim.Find(zone, typeof(Sward)) as Sward;
                NHA += sward.HerbageGrowthWt/PaddockCount;
                PGR = NHA;  // divide this by the number of days just before reporting
                 Fixation += sward.FixedN/PaddockCount;

                Soil soil = Apsim.Find(zone, typeof(Soil)) as Soil;
                LeachN += soil.SoilWater.flow_no3[soil.SoilWater.flow_no3.Length-1]/PaddockCount;  // only take the deepest element

                for (int ii = 0; ii <= (soil.Thickness.Length - 1); ii++)
                {
                    Denit += soil.SoilNitrogen.Denitrification[ii]/PaddockCount;
                    DenitN2O += soil.SoilNitrogen.n2o_atm[ii]/PaddockCount;
                }


                Grazed = (double)zone.Get("[" + InputModule + "].Script.Harvested")/PaddockCount;
                GrazedN = (double)zone.Get("[" + InputModule + "].Script.HarvestedN")/PaddockCount;
                UrineNReturned = (double)zone.Get("[" + InputModule + "].Script.UreaReturned")/PaddockCount;
                //AreaUrinePatchesToday = (double)zone.Get("[" + InputModule + "].Script.areaUrinePatchesToday");
            } 

            HerbageGrazed += Grazed;
            HerbageGrazedN += GrazedN;
            UreaReturned += UrineNReturned;



            if(ReportToday) {

                OrgC = 0.0;
                OrgN = 0.0;
                UreaN = 0.0;
                NH4N = 0.0;
                NO3N = 0.0;
                MinN = 0.0;


                Soil soil1 = Apsim.Find(Zones[0], typeof(Soil)) as Soil;

                if(PaddockCount>1)
                    MinNPatch = new double[PaddockCount];
                else 
                    MinNPatch = new double[soil1.SoilNitrogen.PatchCount];


                int currentZoneNum = 0;
                foreach (Zone zone in Zones)
                {
                    Soil soil = Apsim.Find(zone, typeof(Soil)) as Soil;
                    Sward sward = Apsim.Find(zone, typeof(Sward)) as Sward;

                    double minNPatch = 0;

                    for (int ii = 0; ii <= (soil.Thickness.Length - 1); ii++)
                    {
                        OrgC += soil.SoilNitrogen.TotalC[ii]/PaddockCount;  
                        OrgN += soil.SoilNitrogen.organic_n[ii]/PaddockCount;
                        UreaN += soil.SoilNitrogen.urea[ii]/PaddockCount;
                        NH4N += soil.SoilNitrogen.NH4[ii]/PaddockCount;
                        NO3N += soil.SoilNitrogen.NO3[ii]/PaddockCount;
                        MinN = UreaN + NH4N + NO3N;                    
                        minNPatch += soil.SoilNitrogen.urea[ii] + soil.SoilNitrogen.NH4[ii] + soil.SoilNitrogen.NO3[ii];
                    }

                    if(PaddockCount>1) MinNPatch[currentZoneNum] = minNPatch;

                    dltOrgC = OrgC - iniOrgC; 
                    dltOrgN = OrgN - iniOrgN;
                    iniOrgC = OrgC; // ready for the next calculation of change in pools
                    iniOrgN = OrgN;
                    currentZoneNum++;
                }

                if(soil1.SoilNitrogen.PatchCount>1) {  // TODO will break if there is more than one paddock/zone AND more than one patch                    

                    for (int ii = 0; ii < (soil1.SoilNitrogen.PatchCount); ii++)
                    {
                        MinNPatch[ii] = soil1.SoilNitrogen.PatchTotalUrea[ii]+soil1.SoilNitrogen.PatchTotalNH4[ii] + soil1.SoilNitrogen.PatchTotalNO3[ii];
                    }
                }

                PGR = NHA / DaysSinceReport; 

                ReportingWithPatches.DoOutput();

                // now zero the reported variables
                DaysSinceReport = 0;
                HerbageGrazed = 0.0;
                HerbageGrazedN = 0.0;
                DaysSinceReport = 0;
                NHA = 0;
                PGR = 0;
                UreaReturned = 0;
                Fixation = 0;
                LeachN = 0;
                Denit = 0;
                DenitN2O = 0;
                OrgC = 0;
                OrgN = 0;
                MinN = 0;
                UreaN = 0;
                NH4N = 0;
                NO3N = 0;
            }


        }
    }
}
]]></Code>
    </Manager>
    <Report>
      <Name>ReportingWithPatches</Name>
      <IncludeInDocumentation>true</IncludeInDocumentation>
      <ExperimentFactorNames />
      <ExperimentFactorValues />
      <VariableNames>
        <string>Parent.Name as Zone</string>
        <string>[Clock].Today as Date</string>
        <string>[Clock].Today.Month as Month</string>
        <string>[Clock].Today.Year as Year</string>
        <string>[ReportingWithPatchesVariables]Script.UreaReturned as UrineNReturned</string>
        <string>[ReportingWithPatchesVariables]Script.NHA as NHA</string>
        <string>[PatchManager]Script.NumPatches as NumPatches</string>
        <string>[PatchManager]Script.ListOfPatches as ListOfPatches</string>
        <string>[ReportingWithPatchesVariables]Script.AreaUrinePatchesToday as AreaUrinePatchesToday</string>
        <string>[ReportingWithPatchesVariables]Script.HerbageGrazed as HerbageGrazed</string>
        <string>[ReportingWithPatchesVariables]Script.HerbageGrazedN as HerbageGrazedN</string>
        <string>[ReportingWithPatchesVariables]Script.LeachN as LeachN</string>
        <string>[ReportingWithPatchesVariables]Script.Denit as Denit</string>
        <string>[ReportingWithPatchesVariables]Script.Fixation as Fixation</string>
        <string>[ReportingWithPatchesVariables]Script.MinN as MinN</string>
        <string>[ReportingWithPatchesVariables]Script.UreaN as UreaN</string>
        <string>[ReportingWithPatchesVariables]Script.NH4N as NH4N</string>
        <string>[ReportingWithPatchesVariables]Script.NO3N as NO3N</string>
        <string>[ReportingWithPatchesVariables]Script.dltOrgC as dltOrgC</string>
        <string>[ReportingWithPatchesVariables]Script.dltOrgN as dltOrgN</string>
        <string>[ReportingWithPatchesVariables]Script.MinNPatch</string>
      </VariableNames>
      <EventNames>
        <string />
      </EventNames>
    </Report>
    <Zone>
      <Name>Paddock</Name>
      <Manager>
        <Name>CentrePivot</Name>
        <IncludeInDocumentation>true</IncludeInDocumentation>
        <Script>
          <allowIrrigation>yes</allowIrrigation>
          <IrrigStart>1-sep</IrrigStart>
          <IrrigEnd>30-apr</IrrigEnd>
          <SoilDepth>500</SoilDepth>
          <CritPAWForShallow>60</CritPAWForShallow>
          <CritRainToPause>30</CritRainToPause>
          <DaysToPauseOnCritRain>3</DaysToPauseOnCritRain>
          <IrrigReturnShallow>2</IrrigReturnShallow>
          <IrrigAmtShallow>10</IrrigAmtShallow>
          <PercPAWIrrigDeficitShallow>30</PercPAWIrrigDeficitShallow>
          <IrrigEffShallow>100</IrrigEffShallow>
          <IrrigReturnDeep>4</IrrigReturnDeep>
          <IrrigAmtDeep>20</IrrigAmtDeep>
          <PercPAWIrrigDeficitDeep>25</PercPAWIrrigDeficitDeep>
          <IrrigEffDeep>100</IrrigEffDeep>
          <TodayDeficit>123.894</TodayDeficit>
          <TodayDeficit_nve>-123.894</TodayDeficit_nve>
          <IrrigDay>3</IrrigDay>
          <SoilPAW>63.65</SoilPAW>
          <IrrigDeficit>25</IrrigDeficit>
          <IrrigReturn>4</IrrigReturn>
          <IrrigAmt>20</IrrigAmt>
          <IrrigEff>100</IrrigEff>
          <Rain3>0</Rain3>
          <Days2Pause>-80</Days2Pause>
        </Script>
        <Code><![CDATA[using System;
using Models.Core;
using Models.PMF;
using Models.Soils;
using System.Xml.Serialization;
using Models.PMF;
using APSIM.Shared.Utilities;
using System.Diagnostics; // used with Debugger.Break(); to debug manager scripts
        
namespace Models
{
    [Serializable] 
    [System.Xml.Serialization.XmlInclude(typeof(Model))]
    public class Script : Model
    {
        //Communication to other modules
        [Link] ISummary summary = null;
        [Link] Irrigation irrigation;
        [Link] Clock Clock;
        [Link] Soil soil;
        [Link] Weather Met; 
        [Link(IsOptional = true)] ICrop existingCrop;
       
        //User inputs from properties tab
        [Description("Turn irrigation on?")]
        public answerTypes allowIrrigation { get; set; }
        [Description("Start of irrigation season (dd-MMM)")]
        public string IrrigStart { get; set; }
        [Description("End of irrigation season (dd-MMM)")]
        public string IrrigEnd { get; set; }
        [Description("Enter the depth to which water deficit is computed (mm)")]
        public double SoilDepth { get; set; }
        [Description("PAW below which soil is considered 'shallow' (mm)")]
        public double CritPAWForShallow { get; set; }
        [Description("Amount of rainfall over the last 3 days to cause pause to irrigator (mm)")]
        public double CritRainToPause { get; set; }
        [Description("Number of days to pause irrigator after critical rainfall (days)")]
        public double DaysToPauseOnCritRain { get; set; }

        [Description("Shallow Soils: Irrigation return period (days)")]
        public double IrrigReturnShallow { get; set; }
        [Description("Shallow Soils: Effective irrigation amount (mm)")]
        public double IrrigAmtShallow { get; set; }
        [Description("Shallow Soils: Percentage of PAW at which to irrigate (%)")]
        public double PercPAWIrrigDeficitShallow { get; set; }
        [Description("Shallow Soils: Irrigation efficiency (%)")]
        public double IrrigEffShallow { get; set; }

        [Description("Deep Soils: Irrigation return period (days)")]
        public double IrrigReturnDeep { get; set; }
        [Description("Deep Soils: Effective irrigation amount (mm)")]
        public double IrrigAmtDeep { get; set; }
        [Description("Deep Soils: Percentage of PAW at which to irrigate (%)")]
        public double PercPAWIrrigDeficitDeep { get; set; }
        [Description("Deep Soils: Irrigation efficiency (%)")]
        public double IrrigEffDeep { get; set; }

        // Outputs
        public double TodayDeficit { get; set; }
        public double TodayDeficit_nve { get; set; }
        public double IrrigDay { get; set; }
        public double SoilPAW { get; set; }
        public double IrrigDeficit { get; set; }
        public double IrrigReturn { get; set; }
        public double IrrigAmt { get; set; }
        public double IrrigEff { get; set; }
        public double Rain3 { get; set; }

        public double Days2Pause { get; set; }

        // internal use
        private DateTime StartDate;               //The date when irrigation start (in date format)
        private DateTime EndDate;                 //The date when irrigation finish (in date format)
        private double RainToday=0;
        public double[] Rain_3;

        public enum answerTypes
        {
            /// <summary>a positive answer</summary>
            yes,
            /// <summary>a negative answer</summary>
            no
        }


        [EventSubscribe("StartOfSimulation")]
        private void OnStartOfSimulation(object sender, EventArgs e)
        {
            summary.WriteMessage(this, "==================================================");
            summary.WriteMessage(this, "                CentrePivot initialising          ");
            summary.WriteMessage(this, "");

            IrrigDay = 5000;  //so will reset to 1 on first day
              StartDate = DateTime.Parse(IrrigStart);
              EndDate = DateTime.Parse(IrrigEnd);

            Rain3 = 0;
            Rain_3 = new double[4];
            Rain_3[0] = 0;
            Rain_3[1] = 0;
            Rain_3[2] = 0;

              SoilPAW = 0.0;

              double[] sw_dul = soil.DULmm;
              double[] sw_15 = soil.LL15mm;  
              double MySoilDepth = 0;
              for(int z=0;z<soil.Thickness.Length;z++) {
                  MySoilDepth+=soil.Thickness[z];
                  if (MySoilDepth<= SoilDepth) 
                      SoilPAW+=sw_dul[z] - sw_15[z];    
              }

              if(SoilPAW <= CritPAWForShallow) {      
                IrrigDeficit = PercPAWIrrigDeficitShallow / 100 * SoilPAW;
                IrrigReturn = IrrigReturnShallow;
                IrrigAmt = IrrigAmtShallow;
                IrrigEff = IrrigEffShallow ;           
                summary.WriteMessage(this, "  Soil is considered to be shallow " + CritPAWForShallow + " " + SoilPAW);
            } 
            else 
            {
                IrrigDeficit = PercPAWIrrigDeficitDeep;
                IrrigReturn = IrrigReturnDeep;
                IrrigAmt = IrrigAmtDeep;
                IrrigEff = IrrigEffDeep;
                summary.WriteMessage(this, "  Soil is considered to be deep");
            }

            summary.WriteMessage(this, "  Irrigation critical deficit (mm): " + IrrigDeficit);
            summary.WriteMessage(this, "          Irrigation return (days): " + IrrigReturn);
            summary.WriteMessage(this, "     Irrigation pumped amount (mm): " + IrrigAmt);
            summary.WriteMessage(this, "         Irrigation efficiency (%): " + IrrigEff);
            summary.WriteMessage(this, "");
            summary.WriteMessage(this, "                CentrePivot initialised");
            summary.WriteMessage(this, "==================================================");
            
        }

        [EventSubscribe("Commencing")]
        private void OnSimulationCommencing(object sender, EventArgs e)
        {
        }

       [EventSubscribe("PreparingNewWeatherData")]
        private void OnPreparingNewWeatherData(object sender, EventArgs e)
        {
            RainToday = Met.Rain; //takes note of how much rain was due to fall today        
        }

        //[EventSubscribe("DoDailyInitialisation")]
        //private void OnDoDailyInitialisation(object sender, EventArgs e) 
        //{
        //}

        [EventSubscribe("StartOfDay")]
        private void OnStartOfDay(object sender, EventArgs e)
        {
            int rain=0;

            Rain_3[2] = Rain_3[1];
            Rain_3[1] = Rain_3[0];
            Rain_3[0] = RainToday;
            Rain3 = Rain_3[0] + Rain_3[1] + Rain_3[2]; //sums the rain in the last 3 days
            if(Rain3 >= CritRainToPause)
                Days2Pause = DaysToPauseOnCritRain;
            else
                Days2Pause = Days2Pause - 1;

            double[] sw_dul = soil.DULmm;
            double[] sw_sw = soil.SWAtWaterThickness;  // ??? was MySwim.sw_dep
              double[] sw_15 = soil.LL15mm;  
              double MySoilDepth = 0;

            TodayDeficit = 0.0;
            SoilPAW = 0.0;

              for(int z=0;z<soil.Thickness.Length;z++) {
                  MySoilDepth+=soil.Thickness[z];
                  if (MySoilDepth<= SoilDepth) {
                      SoilPAW+=sw_dul[z] - sw_15[z];    
                      TodayDeficit += sw_dul[z] - Math.Min(sw_dul[z], sw_sw[z]);
                  }
              }
            TodayDeficit_nve = -1 * TodayDeficit;

            if (isBetween(Clock.Today, StartDate, EndDate)) {
                 if(SoilPAW <= CritPAWForShallow) {      
                    IrrigDeficit = PercPAWIrrigDeficitShallow / 100 * SoilPAW;
                    IrrigReturn = IrrigReturnShallow;
                    IrrigAmt = IrrigAmtShallow;
                    IrrigEff = IrrigEffShallow ;           
                } 
                else 
                {
                    IrrigDeficit = PercPAWIrrigDeficitDeep;
                    IrrigReturn = IrrigReturnDeep;
                    IrrigAmt = IrrigAmtDeep;
                    IrrigEff = IrrigEffDeep;
                }

                if(Days2Pause < 0.5) {
                    IrrigDay = IrrigDay + 1;
                    if(IrrigDay > IrrigReturn)
                        IrrigDay = 1;  // and day = 1 is when the irrigation happens                    

                    if ((TodayDeficit >= IrrigDeficit) && (allowIrrigation == answerTypes.yes)) {
                        if(IrrigDay == 1){
                            double AmountToApply = (IrrigAmt / (IrrigEff / 100.0));
                            //summary.WriteMessage(this, "Rain today was " + RainToday + ". Applying " + AmountToApply+ " mm of irrigation");
                            irrigation.Apply(AmountToApply);

                        }
                    }
                }
            }
        }

        ///Checks whether theDate is between iniDate and endDate (non-year specific)
        private bool isBetween(DateTime theDay, DateTime iniDate, DateTime endDate)
        {
            bool result = false;
            if (iniDate.DayOfYear < endDate.DayOfYear)
            {
                // period is within one year, ex: summer in the northern hemisphere
                if ((theDay.DayOfYear >= iniDate.DayOfYear) && (theDay.DayOfYear <= endDate.DayOfYear))
                    result = true;
            }
            else
            {
                // period goes over the end of the year, ex: summer in the southern hemisphere
                if ((theDay.DayOfYear >= iniDate.DayOfYear) || (theDay.DayOfYear <= endDate.DayOfYear))
                    result = true;
            }
            
            return result;
        }

    }
}
]]></Code>
      </Manager>
      <SurfaceOrganicMatter>
        <Name>SurfaceOrganicMatter</Name>
        <IncludeInDocumentation>true</IncludeInDocumentation>
        <PondActive>no</PondActive>
        <ReportAdditions>no</ReportAdditions>
        <ReportRemovals>no</ReportRemovals>
        <ResidueTypes>
          <Name>ResidueTypes</Name>
          <IncludeInDocumentation>true</IncludeInDocumentation>
          <LoadFromResource>ResidueTypes</LoadFromResource>
        </ResidueTypes>
        <TillageTypes>
          <Name>TillageTypesList</Name>
          <IncludeInDocumentation>true</IncludeInDocumentation>
          <TillageType />
        </TillageTypes>
        <Pools>
          <Pool>
            <PoolName>grass</PoolName>
            <ResidueType>grass</ResidueType>
            <Mass>500</Mass>
            <CNRatio>15</CNRatio>
            <CPRatio>NaN</CPRatio>
            <StandingFraction>0</StandingFraction>
          </Pool>
        </Pools>
        <PoolName>grass</PoolName>
        <type>grass</type>
        <mass>500</mass>
        <standing_fraction>0</standing_fraction>
        <cpr />
        <cnr>15</cnr>
        <CriticalResidueWeight>2000</CriticalResidueWeight>
        <OptimumDecompTemp>20</OptimumDecompTemp>
        <MaxCumulativeEOS>20</MaxCumulativeEOS>
        <CNRatioDecompCoeff>0.277</CNRatioDecompCoeff>
        <CNRatioDecompThreshold>25</CNRatioDecompThreshold>
        <TotalLeachRain>25</TotalLeachRain>
        <MinRainToLeach>10</MinRainToLeach>
        <CriticalMinimumOrganicC>0.004</CriticalMinimumOrganicC>
        <DefaultCPRatio>0</DefaultCPRatio>
        <DefaultStandingFraction>0</DefaultStandingFraction>
        <StandingExtinctCoeff>0.5</StandingExtinctCoeff>
        <FractionFaecesAdded>0.5</FractionFaecesAdded>
      </SurfaceOrganicMatter>
      <MicroClimate>
        <Name>MicroClimate</Name>
        <IncludeInDocumentation>true</IncludeInDocumentation>
        <a_interception>0</a_interception>
        <b_interception>1</b_interception>
        <c_interception>0</c_interception>
        <d_interception>0</d_interception>
        <soil_albedo>0.23</soil_albedo>
        <sun_angle>15</sun_angle>
        <soil_heat_flux_fraction>0.4</soil_heat_flux_fraction>
        <night_interception_fraction>0.5</night_interception_fraction>
        <refheight>2</refheight>
        <albedo>0.15</albedo>
        <emissivity>0.95999999999999974</emissivity>
        <RadIntTotal>-4.3854844207218751</RadIntTotal>
      </MicroClimate>
      <Irrigation>
        <Name>Irrigation</Name>
        <IncludeInDocumentation>true</IncludeInDocumentation>
      </Irrigation>
      <Fertiliser>
        <Name>Fertiliser</Name>
        <IncludeInDocumentation>true</IncludeInDocumentation>
      </Fertiliser>
      <SoluteManager>
        <Name>SoluteManager</Name>
        <IncludeInDocumentation>true</IncludeInDocumentation>
      </SoluteManager>
      <Sward>
        <Name>Sward</Name>
        <PastureSpecies>
          <Name>Ryegrass</Name>
          <IncludeInDocumentation>true</IncludeInDocumentation>
          <MaximumNUptake>10</MaximumNUptake>
          <Albedo>0.26</Albedo>
          <Gsmax>0.011</Gsmax>
          <R50>200</R50>
          <SpeciesFamily>Grass</SpeciesFamily>
          <PhotosyntheticPathway>C3</PhotosyntheticPathway>
          <InitialShootDM>750</InitialShootDM>
          <InitialRootDM>450</InitialRootDM>
          <InitialRootDepth>750</InitialRootDepth>
          <ReferencePhotosyntheticRate>1</ReferencePhotosyntheticRate>
          <LightExtinctionCoefficient>0.5</LightExtinctionCoefficient>
          <GrowthTminimum>1</GrowthTminimum>
          <GrowthToptimum>20</GrowthToptimum>
          <GrowthTEffectExponent>1.7</GrowthTEffectExponent>
          <UseHeatStressFactor>yes</UseHeatStressFactor>
          <HeatOnsetTemperature>28</HeatOnsetTemperature>
          <HeatFullTemperature>35</HeatFullTemperature>
          <HeatRecoverySumDD>30</HeatRecoverySumDD>
          <HeatRecoveryTReference>25</HeatRecoveryTReference>
          <UseColdStressFactor>yes</UseColdStressFactor>
          <ColdOnsetTemperature>1</ColdOnsetTemperature>
          <ColdFullTemperature>-5</ColdFullTemperature>
          <ColdRecoverySumDD>25</ColdRecoverySumDD>
          <ColdRecoveryTReference>0</ColdRecoveryTReference>
          <MaintenanceRespirationCoefficient>0.03</MaintenanceRespirationCoefficient>
          <GrowthRespirationCoefficient>0.25</GrowthRespirationCoefficient>
          <RespirationTReference>20</RespirationTReference>
          <RespirationExponent>1.5</RespirationExponent>
          <NThresholdsForLeaves>
            <double>0.04</double>
            <double>0.012</double>
            <double>0.05</double>
          </NThresholdsForLeaves>
          <NThresholdsForStems>
            <double>0.02</double>
            <double>0.006</double>
            <double>0.025</double>
          </NThresholdsForStems>
          <NThresholdsForStolons>
            <double>0</double>
            <double>0</double>
            <double>0</double>
          </NThresholdsForStolons>
          <NThresholdsForRoots>
            <double>0.02</double>
            <double>0.006</double>
            <double>0.025</double>
          </NThresholdsForRoots>
          <DegreesDayForGermination>125</DegreesDayForGermination>
          <TargetShootRootRatio>4</TargetShootRootRatio>
          <MaxRootAllocation>0.25</MaxRootAllocation>
          <ShootRootGlfFactor>0.5</ShootRootGlfFactor>
          <UseReproSeasonFactor>yes</UseReproSeasonFactor>
          <ReproSeasonReferenceLatitude>41</ReproSeasonReferenceLatitude>
          <ReproSeasonTimingCoeff>0.14</ReproSeasonTimingCoeff>
          <ReproSeasonMaxAllocationIncrease>0.5</ReproSeasonMaxAllocationIncrease>
          <ReproSeasonAllocationCoeff>0.1</ReproSeasonAllocationCoeff>
          <FractionLeafMaximum>0.7</FractionLeafMaximum>
          <FractionLeafMinimum>0.7</FractionLeafMinimum>
          <FractionLeafDMThreshold>500</FractionLeafDMThreshold>
          <FractionLeafDMFactor>2000</FractionLeafDMFactor>
          <FractionLeafExponent>3</FractionLeafExponent>
          <FractionToStolon>0</FractionToStolon>
          <SpecificLeafArea>25</SpecificLeafArea>
          <SpecificRootLength>100</SpecificRootLength>
          <StolonEffectOnLAI>0</StolonEffectOnLAI>
          <ShootMaxEffectOnLAI>1000</ShootMaxEffectOnLAI>
          <MaxStemEffectOnLAI>1</MaxStemEffectOnLAI>
          <LiveLeavesPerTiller>3</LiveLeavesPerTiller>
          <TissueTurnoverRateShoot>0.05</TissueTurnoverRateShoot>
          <TissueTurnoverRateRoot>0.02</TissueTurnoverRateRoot>
          <DetachmentRateShoot>0.08</DetachmentRateShoot>
          <TurnoverTemperatureMin>2</TurnoverTemperatureMin>
          <TurnoverTemperatureRef>20</TurnoverTemperatureRef>
          <TurnoverTemperatureExponent>1</TurnoverTemperatureExponent>
          <TurnoverDroughtEffectMax>1</TurnoverDroughtEffectMax>
          <TurnoverDroughtThreshold>0.5</TurnoverDroughtThreshold>
          <TurnoverDefoliationCoefficient>0.5</TurnoverDefoliationCoefficient>
          <TurnoverDefoliationRootEffect>0.1</TurnoverDefoliationRootEffect>
          <FractionNLuxuryRemobilisable>
            <double>0.1</double>
            <double>0.1</double>
            <double>0.1</double>
          </FractionNLuxuryRemobilisable>
          <MinimumNFixation>0</MinimumNFixation>
          <MaximumNFixation>0</MaximumNFixation>
          <SoilSaturationEffectMax>0.1</SoilSaturationEffectMax>
          <MinimumWaterFreePorosity>-1</MinimumWaterFreePorosity>
          <SoilSaturationRecoveryFactor>0.25</SoilSaturationRecoveryFactor>
          <NDillutionCoefficient>0.25</NDillutionCoefficient>
          <GlfGeneric>1</GlfGeneric>
          <GlfSoilFertility>1</GlfSoilFertility>
          <PlantHeightMinimum>25</PlantHeightMinimum>
          <PlantHeightMaximum>600</PlantHeightMaximum>
          <PlantHeightMassForMax>10000</PlantHeightMassForMax>
          <PlantHeightExponent>2.8</PlantHeightExponent>
          <RootDepthMinimum>50</RootDepthMinimum>
          <RootDepthMaximum>750</RootDepthMaximum>
          <RootElongationRate>25</RootElongationRate>
          <RootDistributionDepthParam>90</RootDistributionDepthParam>
          <RootDistributionExponent>3.2</RootDistributionExponent>
          <DigestibilitiesCellWall>
            <double>0.6</double>
            <double>0.6</double>
            <double>0.6</double>
            <double>0.2</double>
          </DigestibilitiesCellWall>
          <MinimumGreenWt>100</MinimumGreenWt>
          <FractionStolonStanding>0</FractionStolonStanding>
          <PreferenceForGreenOverDead>1</PreferenceForGreenOverDead>
          <PreferenceForLeafOverStems>1</PreferenceForLeafOverStems>
          <WaterAvailableMethod>DefaultAPSIM</WaterAvailableMethod>
          <NitrogenAvailableMethod>BasicAgPasture</NitrogenAvailableMethod>
        </PastureSpecies>
        <PastureSpecies>
          <Name>WhiteClover</Name>
          <IncludeInDocumentation>true</IncludeInDocumentation>
          <MaximumNUptake>10</MaximumNUptake>
          <Albedo>0.26</Albedo>
          <Gsmax>0.011</Gsmax>
          <R50>200</R50>
          <SpeciesFamily>Legume</SpeciesFamily>
          <PhotosyntheticPathway>C3</PhotosyntheticPathway>
          <InitialShootDM>250</InitialShootDM>
          <InitialRootDM>150</InitialRootDM>
          <InitialRootDepth>350</InitialRootDepth>
          <ReferencePhotosyntheticRate>1</ReferencePhotosyntheticRate>
          <LightExtinctionCoefficient>0.8</LightExtinctionCoefficient>
          <GrowthTminimum>2</GrowthTminimum>
          <GrowthToptimum>22</GrowthToptimum>
          <GrowthTEffectExponent>1.7</GrowthTEffectExponent>
          <UseHeatStressFactor>yes</UseHeatStressFactor>
          <HeatOnsetTemperature>30</HeatOnsetTemperature>
          <HeatFullTemperature>36</HeatFullTemperature>
          <HeatRecoverySumDD>20</HeatRecoverySumDD>
          <HeatRecoveryTReference>25</HeatRecoveryTReference>
          <UseColdStressFactor>yes</UseColdStressFactor>
          <ColdOnsetTemperature>2</ColdOnsetTemperature>
          <ColdFullTemperature>-5</ColdFullTemperature>
          <ColdRecoverySumDD>30</ColdRecoverySumDD>
          <ColdRecoveryTReference>0</ColdRecoveryTReference>
          <MaintenanceRespirationCoefficient>0.04</MaintenanceRespirationCoefficient>
          <GrowthRespirationCoefficient>0.25</GrowthRespirationCoefficient>
          <RespirationTReference>20</RespirationTReference>
          <RespirationExponent>1.5</RespirationExponent>
          <NThresholdsForLeaves>
            <double>0.045</double>
            <double>0.02</double>
            <double>0.055</double>
          </NThresholdsForLeaves>
          <NThresholdsForStems>
            <double>0.0225</double>
            <double>0.01</double>
            <double>0.0275</double>
          </NThresholdsForStems>
          <NThresholdsForStolons>
            <double>0.0225</double>
            <double>0.01</double>
            <double>0.0275</double>
          </NThresholdsForStolons>
          <NThresholdsForRoots>
            <double>0.0225</double>
            <double>0.01</double>
            <double>0.0275</double>
          </NThresholdsForRoots>
          <DegreesDayForGermination>125</DegreesDayForGermination>
          <TargetShootRootRatio>4</TargetShootRootRatio>
          <MaxRootAllocation>0.25</MaxRootAllocation>
          <ShootRootGlfFactor>0.5</ShootRootGlfFactor>
          <UseReproSeasonFactor>yes</UseReproSeasonFactor>
          <ReproSeasonReferenceLatitude>41</ReproSeasonReferenceLatitude>
          <ReproSeasonTimingCoeff>0.14</ReproSeasonTimingCoeff>
          <ReproSeasonMaxAllocationIncrease>0.5</ReproSeasonMaxAllocationIncrease>
          <ReproSeasonAllocationCoeff>0.1</ReproSeasonAllocationCoeff>
          <FractionLeafMaximum>0.56</FractionLeafMaximum>
          <FractionLeafMinimum>0.28</FractionLeafMinimum>
          <FractionLeafDMThreshold>500</FractionLeafDMThreshold>
          <FractionLeafDMFactor>2000</FractionLeafDMFactor>
          <FractionLeafExponent>3</FractionLeafExponent>
          <FractionToStolon>0.2</FractionToStolon>
          <SpecificLeafArea>30</SpecificLeafArea>
          <SpecificRootLength>45</SpecificRootLength>
          <StolonEffectOnLAI>0.3</StolonEffectOnLAI>
          <ShootMaxEffectOnLAI>500</ShootMaxEffectOnLAI>
          <MaxStemEffectOnLAI>0.5</MaxStemEffectOnLAI>
          <LiveLeavesPerTiller>3</LiveLeavesPerTiller>
          <TissueTurnoverRateShoot>0.05</TissueTurnoverRateShoot>
          <TissueTurnoverRateRoot>0.02</TissueTurnoverRateRoot>
          <DetachmentRateShoot>0.11</DetachmentRateShoot>
          <TurnoverTemperatureMin>2</TurnoverTemperatureMin>
          <TurnoverTemperatureRef>20</TurnoverTemperatureRef>
          <TurnoverTemperatureExponent>1</TurnoverTemperatureExponent>
          <TurnoverDroughtEffectMax>1</TurnoverDroughtEffectMax>
          <TurnoverDroughtThreshold>0.5</TurnoverDroughtThreshold>
          <TurnoverDefoliationCoefficient>0.5</TurnoverDefoliationCoefficient>
          <TurnoverDefoliationRootEffect>0.1</TurnoverDefoliationRootEffect>
          <FractionNLuxuryRemobilisable>
            <double>0.1</double>
            <double>0.1</double>
            <double>0.1</double>
          </FractionNLuxuryRemobilisable>
          <MinimumNFixation>0.2</MinimumNFixation>
          <MaximumNFixation>0.6</MaximumNFixation>
          <SoilSaturationEffectMax>0.1</SoilSaturationEffectMax>
          <MinimumWaterFreePorosity>-1</MinimumWaterFreePorosity>
          <SoilSaturationRecoveryFactor>0.25</SoilSaturationRecoveryFactor>
          <NDillutionCoefficient>1</NDillutionCoefficient>
          <GlfGeneric>1</GlfGeneric>
          <GlfSoilFertility>1</GlfSoilFertility>
          <PlantHeightMinimum>25</PlantHeightMinimum>
          <PlantHeightMaximum>350</PlantHeightMaximum>
          <PlantHeightMassForMax>7500</PlantHeightMassForMax>
          <PlantHeightExponent>2.5</PlantHeightExponent>
          <RootDepthMinimum>30</RootDepthMinimum>
          <RootDepthMaximum>350</RootDepthMaximum>
          <RootElongationRate>25</RootElongationRate>
          <RootDistributionDepthParam>70</RootDistributionDepthParam>
          <RootDistributionExponent>2.5</RootDistributionExponent>
          <DigestibilitiesCellWall>
            <double>0.6</double>
            <double>0.6</double>
            <double>0.6</double>
            <double>0.2</double>
          </DigestibilitiesCellWall>
          <MinimumGreenWt>50</MinimumGreenWt>
          <FractionStolonStanding>0</FractionStolonStanding>
          <PreferenceForGreenOverDead>1</PreferenceForGreenOverDead>
          <PreferenceForLeafOverStems>1</PreferenceForLeafOverStems>
          <WaterAvailableMethod>DefaultAPSIM</WaterAvailableMethod>
          <NitrogenAvailableMethod>BasicAgPasture</NitrogenAvailableMethod>
        </PastureSpecies>
        <IncludeInDocumentation>true</IncludeInDocumentation>
        <ControlledBySward>yes</ControlledBySward>
        <WaterUptakeSource>species</WaterUptakeSource>
        <NUptakeSource>species</NUptakeSource>
      </Sward>
      <Soil>
        <Name>Soil</Name>
        <InitialWater>
          <Name>Initial water</Name>
          <IncludeInDocumentation>true</IncludeInDocumentation>
          <PercentMethod>FilledFromTop</PercentMethod>
          <FractionFull>0.987012987012987</FractionFull>
          <DepthWetSoil>NaN</DepthWetSoil>
        </InitialWater>
        <Water>
          <Name>Water</Name>
          <SoilCrop>
            <Name>SwardSoil</Name>
            <IncludeInDocumentation>true</IncludeInDocumentation>
            <LL>
              <double>0.15</double>
              <double>0.14</double>
              <double>0.06</double>
              <double>0.02</double>
              <double>0.01</double>
              <double>0.01</double>
              <double>0.01</double>
            </LL>
            <KL>
              <double>0.1</double>
              <double>0.1</double>
              <double>0.08</double>
              <double>0.04</double>
              <double>0.01</double>
              <double>0</double>
              <double>0</double>
            </KL>
            <XF>
              <double>1</double>
              <double>1</double>
              <double>1</double>
              <double>1</double>
              <double>1</double>
              <double>0</double>
              <double>0</double>
            </XF>
          </SoilCrop>
          <SoilCrop>
            <Name>RyegrassSoil</Name>
            <IncludeInDocumentation>true</IncludeInDocumentation>
            <LL>
              <double>0.14</double>
              <double>0.14</double>
              <double>0.03</double>
              <double>0.03</double>
              <double>0.03</double>
              <double>0.03</double>
              <double>0.03</double>
            </LL>
            <KL>
              <double>0.1</double>
              <double>0.1</double>
              <double>0.1</double>
              <double>0.02</double>
              <double>0</double>
              <double>0</double>
              <double>0</double>
            </KL>
            <XF>
              <double>1</double>
              <double>1</double>
              <double>1</double>
              <double>1</double>
              <double>0</double>
              <double>0</double>
              <double>0</double>
            </XF>
          </SoilCrop>
          <SoilCrop>
            <Name>WhiteCloverSoil</Name>
            <IncludeInDocumentation>true</IncludeInDocumentation>
            <LL>
              <double>0.14</double>
              <double>0.14</double>
              <double>0.03</double>
              <double>0.03</double>
              <double>0.03</double>
              <double>0.03</double>
              <double>0.03</double>
            </LL>
            <KL>
              <double>0.1</double>
              <double>0.1</double>
              <double>0.1</double>
              <double>0.02</double>
              <double>0</double>
              <double>0</double>
              <double>0</double>
            </KL>
            <XF>
              <double>1</double>
              <double>1</double>
              <double>1</double>
              <double>1</double>
              <double>0</double>
              <double>0</double>
              <double>0</double>
            </XF>
          </SoilCrop>
          <IncludeInDocumentation>true</IncludeInDocumentation>
          <Thickness>
            <double>150</double>
            <double>150</double>
            <double>200</double>
            <double>150</double>
            <double>250</double>
            <double>300</double>
            <double>300</double>
          </Thickness>
          <BD>
            <double>1.3</double>
            <double>1.35</double>
            <double>1</double>
            <double>0.53</double>
            <double>0.31</double>
            <double>0.3</double>
            <double>0.3</double>
          </BD>
          <AirDry>
            <double>0.05</double>
            <double>0.12</double>
            <double>0.055</double>
            <double>0.015</double>
            <double>0.01</double>
            <double>0.01</double>
            <double>0.01</double>
          </AirDry>
          <LL15>
            <double>0.15</double>
            <double>0.14</double>
            <double>0.055</double>
            <double>0.015</double>
            <double>0.01</double>
            <double>0.01</double>
            <double>0.01</double>
          </LL15>
          <DUL>
            <double>0.36</double>
            <double>0.34</double>
            <double>0.19</double>
            <double>0.065</double>
            <double>0.04</double>
            <double>0.03</double>
            <double>0.03</double>
          </DUL>
          <SAT>
            <double>0.45</double>
            <double>0.43</double>
            <double>0.25</double>
            <double>0.15</double>
            <double>0.11</double>
            <double>0.11</double>
            <double>0.11</double>
          </SAT>
          <KS>
            <double>5000</double>
            <double>2500</double>
            <double>3000</double>
            <double>10000</double>
            <double>17500</double>
            <double>20000</double>
            <double>20000</double>
          </KS>
        </Water>
        <SoilWater>
          <Name>SoilWater</Name>
          <IncludeInDocumentation>true</IncludeInDocumentation>
          <SummerDate>1-Nov</SummerDate>
          <SummerU>6</SummerU>
          <SummerCona>3.5</SummerCona>
          <WinterDate>1-apr</WinterDate>
          <WinterU>2</WinterU>
          <WinterCona>2</WinterCona>
          <DiffusConst>88</DiffusConst>
          <DiffusSlope>35</DiffusSlope>
          <Salb>0.13</Salb>
          <CN2Bare>73</CN2Bare>
          <CNRed>20</CNRed>
          <CNCov>0.8</CNCov>
          <slope>0</slope>
          <discharge_width>0</discharge_width>
          <catchment_area>0</catchment_area>
          <max_pond>0</max_pond>
          <Thickness>
            <double>100</double>
            <double>200</double>
            <double>300</double>
            <double>300</double>
            <double>300</double>
            <double>300</double>
            <double>300</double>
          </Thickness>
          <SWCON>
            <double>0.4</double>
            <double>0.5</double>
            <double>0.6</double>
            <double>0.6</double>
            <double>0.8</double>
            <double>0.8</double>
            <double>0.8</double>
          </SWCON>
          <KLAT>
            <double>0</double>
            <double>0</double>
            <double>0</double>
            <double>0</double>
            <double>0</double>
            <double>0</double>
            <double>0</double>
          </KLAT>
          <residueinterception>0</residueinterception>
        </SoilWater>
        <SoilOrganicMatter>
          <Name>SoilOrganicMatter</Name>
          <IncludeInDocumentation>true</IncludeInDocumentation>
          <RootCN>40</RootCN>
          <RootWt>1000</RootWt>
          <SoilCN>12</SoilCN>
          <EnrACoeff>7.4</EnrACoeff>
          <EnrBCoeff>0.2</EnrBCoeff>
          <Thickness>
            <double>150</double>
            <double>150</double>
            <double>200</double>
            <double>150</double>
            <double>250</double>
            <double>300</double>
            <double>300</double>
          </Thickness>
          <Depth>
            <string>0-15</string>
            <string>15-30</string>
            <string>30-50</string>
            <string>50-65</string>
            <string>65-90</string>
            <string>90-120</string>
            <string>120-150</string>
          </Depth>
          <OC>
            <double>3</double>
            <double>1</double>
            <double>0.6</double>
            <double>0.4</double>
            <double>0.25</double>
            <double>0.15</double>
            <double>0.1</double>
          </OC>
          <FBiom>
            <double>0.04</double>
            <double>0.02</double>
            <double>0.02</double>
            <double>0.01</double>
            <double>0.01</double>
            <double>0</double>
            <double>0</double>
          </FBiom>
          <FInert>
            <double>0.5</double>
            <double>0.7</double>
            <double>0.83</double>
            <double>0.9</double>
            <double>0.95</double>
            <double>0.99</double>
            <double>0.99</double>
          </FInert>
          <OCUnits>Total</OCUnits>
        </SoilOrganicMatter>
        <Analysis>
          <Name>Analysis</Name>
          <IncludeInDocumentation>true</IncludeInDocumentation>
          <Thickness>
            <double>100</double>
            <double>200</double>
            <double>300</double>
            <double>300</double>
            <double>300</double>
            <double>300</double>
            <double>300</double>
          </Thickness>
          <Rocks>
            <double>0</double>
            <double>0</double>
            <double>10</double>
            <double>40</double>
            <double>60</double>
            <double>70</double>
            <double>70</double>
          </Rocks>
          <Texture />
          <MunsellColour />
          <PH>
            <double>5.9</double>
            <double>5.9</double>
            <double>5.9</double>
            <double>5.9</double>
            <double>5.9</double>
            <double>5.9</double>
            <double>5.9</double>
          </PH>
          <CEC>
            <double>12.5</double>
            <double>10</double>
            <double>9</double>
            <double>5</double>
            <double>4</double>
            <double>4</double>
            <double>4</double>
          </CEC>
          <ParticleSizeSand>
            <double>15</double>
            <double>20</double>
            <double>25</double>
            <double>35</double>
            <double>40</double>
            <double>40</double>
            <double>40</double>
          </ParticleSizeSand>
          <ParticleSizeSilt>
            <double>65</double>
            <double>65</double>
            <double>63</double>
            <double>57</double>
            <double>54</double>
            <double>55</double>
            <double>55</double>
          </ParticleSizeSilt>
          <ParticleSizeClay>
            <double>20</double>
            <double>15</double>
            <double>12</double>
            <double>8</double>
            <double>6</double>
            <double>5</double>
            <double>5</double>
          </ParticleSizeClay>
          <PHUnits>Water</PHUnits>
          <BoronUnits>HotWater</BoronUnits>
        </Analysis>
        <Sample>
          <Name>Initial nitrogen</Name>
          <IncludeInDocumentation>true</IncludeInDocumentation>
          <Thickness>
            <double>100</double>
            <double>200</double>
            <double>300</double>
            <double>300</double>
            <double>300</double>
            <double>300</double>
            <double>300</double>
          </Thickness>
          <NO3>
            <double>7.619</double>
            <double>7.27</double>
            <double>3.871</double>
            <double>3.84</double>
            <double>3.81</double>
            <double>3.779</double>
            <double>3.691</double>
          </NO3>
          <NH4>
            <double>0.132</double>
            <double>0.132</double>
            <double>0.132</double>
            <double>0.132</double>
            <double>0.132</double>
            <double>0.132</double>
            <double>0.132</double>
          </NH4>
          <NO3Units>ppm</NO3Units>
          <NH4Units>ppm</NH4Units>
          <SWUnits>Volumetric</SWUnits>
          <OCUnits>Total</OCUnits>
          <PHUnits>Water</PHUnits>
        </Sample>
        <SoilNitrogen>
          <Name>SoilNitrogen</Name>
          <IncludeInDocumentation>true</IncludeInDocumentation>
          <fom_type>
            <string>default</string>
            <string>manure</string>
            <string>mucuna</string>
            <string>lablab</string>
            <string>shemp</string>
            <string>stable</string>
          </fom_type>
          <fract_carb>
            <double>0.2</double>
            <double>0.3</double>
            <double>0.54</double>
            <double>0.57</double>
            <double>0.45</double>
            <double>0</double>
          </fract_carb>
          <fract_cell>
            <double>0.7</double>
            <double>0.3</double>
            <double>0.37</double>
            <double>0.37</double>
            <double>0.47</double>
            <double>0.1</double>
          </fract_cell>
          <fract_lign>
            <double>0.1</double>
            <double>0.4</double>
            <double>0.09</double>
            <double>0.06</double>
            <double>0.08</double>
            <double>0.9</double>
          </fract_lign>
        </SoilNitrogen>
        <CERESSoilTemperature>
          <Name>CERESSoilTemperature</Name>
          <IncludeInDocumentation>true</IncludeInDocumentation>
        </CERESSoilTemperature>
        <IncludeInDocumentation>true</IncludeInDocumentation>
        <RecordNumber>0</RecordNumber>
        <SoilType>NZ_Sedimentary</SoilType>
        <LocalName>Lismore</LocalName>
        <Site>Winchmore</Site>
        <NearestTown>Ashburton</NearestTown>
        <Region>Canterbury</Region>
        <Country>New Zealand</Country>
        <NaturalVegetation />
        <Latitude>-48.48</Latitude>
        <Longitude>0</Longitude>
      </Soil>
      <Report>
        <Name>Report</Name>
        <IncludeInDocumentation>true</IncludeInDocumentation>
        <ExperimentFactorNames />
        <ExperimentFactorValues />
        <VariableNames>
          <string>[Clock].Today as Date</string>
          <string>[Sward].HerbageGrowthWt</string>
          <string>[Soil].SoilNitrogen.PatchCount as PatchCount</string>
          <string>[Soil].SoilNitrogen.PatchTotalUrea + [Soil].SoilNitrogen.PatchTotalNH4 + [Soil].SoilNitrogen.PatchTotalNO3 as MinN</string>
          <string>[Soil].SoilNitrogen.MaximumNitrogenAvailableToPlants</string>
        </VariableNames>
        <EventNames>
          <string>[Clock].EndOfDay</string>
        </EventNames>
      </Report>
      <IncludeInDocumentation>true</IncludeInDocumentation>
      <Area>1</Area>
      <Slope>0</Slope>
    </Zone>
    <Graph>
      <Name>MinNPaddock</Name>
      <Series>
        <Name>P1</Name>
        <IncludeInDocumentation>true</IncludeInDocumentation>
        <Type>Scatter</Type>
        <XAxis>Bottom</XAxis>
        <YAxis>Left</YAxis>
        <ColourArgb>-16777216</ColourArgb>
        <FactorIndexToVaryColours>-1</FactorIndexToVaryColours>
        <FactorIndexToVaryMarkers>-1</FactorIndexToVaryMarkers>
        <FactorIndexToVaryLines>-1</FactorIndexToVaryLines>
        <Marker>FilledCircle</Marker>
        <MarkerSize>Normal</MarkerSize>
        <Line>Solid</Line>
        <LineThickness>Normal</LineThickness>
        <Checkpoint>Current</Checkpoint>
        <TableName>Report</TableName>
        <XFieldName>Date</XFieldName>
        <YFieldName>MinN(1)</YFieldName>
        <ShowInLegend>true</ShowInLegend>
        <IncludeSeriesNameInLegend>true</IncludeSeriesNameInLegend>
        <Cumulative>false</Cumulative>
        <CumulativeX>false</CumulativeX>
      </Series>
      <Series>
        <Name>P2</Name>
        <IncludeInDocumentation>true</IncludeInDocumentation>
        <Type>Scatter</Type>
        <XAxis>Bottom</XAxis>
        <YAxis>Left</YAxis>
        <ColourArgb>-1663232</ColourArgb>
        <FactorIndexToVaryColours>-1</FactorIndexToVaryColours>
        <FactorIndexToVaryMarkers>-1</FactorIndexToVaryMarkers>
        <FactorIndexToVaryLines>-1</FactorIndexToVaryLines>
        <Marker>FilledCircle</Marker>
        <MarkerSize>Normal</MarkerSize>
        <Line>Solid</Line>
        <LineThickness>Normal</LineThickness>
        <Checkpoint>Current</Checkpoint>
        <TableName>Report</TableName>
        <XFieldName>Date</XFieldName>
        <YFieldName>MinN(2)</YFieldName>
        <ShowInLegend>true</ShowInLegend>
        <IncludeSeriesNameInLegend>true</IncludeSeriesNameInLegend>
        <Cumulative>false</Cumulative>
        <CumulativeX>false</CumulativeX>
      </Series>
      <Series>
        <Name>P3</Name>
        <IncludeInDocumentation>true</IncludeInDocumentation>
        <Type>Scatter</Type>
        <XAxis>Bottom</XAxis>
        <YAxis>Left</YAxis>
        <ColourArgb>-11094807</ColourArgb>
        <FactorIndexToVaryColours>-1</FactorIndexToVaryColours>
        <FactorIndexToVaryMarkers>-1</FactorIndexToVaryMarkers>
        <FactorIndexToVaryLines>-1</FactorIndexToVaryLines>
        <Marker>FilledCircle</Marker>
        <MarkerSize>Normal</MarkerSize>
        <Line>Solid</Line>
        <LineThickness>Normal</LineThickness>
        <Checkpoint>Current</Checkpoint>
        <TableName>Report</TableName>
        <XFieldName>Date</XFieldName>
        <YFieldName>MinN(3)</YFieldName>
        <ShowInLegend>true</ShowInLegend>
        <IncludeSeriesNameInLegend>true</IncludeSeriesNameInLegend>
        <Cumulative>false</Cumulative>
        <CumulativeX>false</CumulativeX>
      </Series>
      <Series>
        <Name>P4</Name>
        <IncludeInDocumentation>true</IncludeInDocumentation>
        <Type>Scatter</Type>
        <XAxis>Bottom</XAxis>
        <YAxis>Left</YAxis>
        <ColourArgb>-16736653</ColourArgb>
        <FactorIndexToVaryColours>-1</FactorIndexToVaryColours>
        <FactorIndexToVaryMarkers>-1</FactorIndexToVaryMarkers>
        <FactorIndexToVaryLines>-1</FactorIndexToVaryLines>
        <Marker>FilledCircle</Marker>
        <MarkerSize>Normal</MarkerSize>
        <Line>Solid</Line>
        <LineThickness>Normal</LineThickness>
        <Checkpoint>Current</Checkpoint>
        <TableName>Report</TableName>
        <XFieldName>Date</XFieldName>
        <YFieldName>MinN(4)</YFieldName>
        <ShowInLegend>true</ShowInLegend>
        <IncludeSeriesNameInLegend>true</IncludeSeriesNameInLegend>
        <Cumulative>false</Cumulative>
        <CumulativeX>false</CumulativeX>
      </Series>
      <Series>
        <Name>P5</Name>
        <IncludeInDocumentation>true</IncludeInDocumentation>
        <Type>Scatter</Type>
        <XAxis>Bottom</XAxis>
        <YAxis>Left</YAxis>
        <ColourArgb>-16747854</ColourArgb>
        <FactorIndexToVaryColours>-1</FactorIndexToVaryColours>
        <FactorIndexToVaryMarkers>-1</FactorIndexToVaryMarkers>
        <FactorIndexToVaryLines>-1</FactorIndexToVaryLines>
        <Marker>FilledCircle</Marker>
        <MarkerSize>Normal</MarkerSize>
        <Line>Solid</Line>
        <LineThickness>Normal</LineThickness>
        <Checkpoint>Current</Checkpoint>
        <TableName>Report</TableName>
        <XFieldName>Date</XFieldName>
        <YFieldName>MinN(5)</YFieldName>
        <ShowInLegend>true</ShowInLegend>
        <IncludeSeriesNameInLegend>true</IncludeSeriesNameInLegend>
        <Cumulative>false</Cumulative>
        <CumulativeX>false</CumulativeX>
      </Series>
      <IncludeInDocumentation>true</IncludeInDocumentation>
      <Axis>
        <Type>Bottom</Type>
        <Inverted>false</Inverted>
        <Minimum>NaN</Minimum>
        <Maximum>NaN</Maximum>
        <Interval>NaN</Interval>
      </Axis>
      <Axis>
        <Type>Left</Type>
        <Inverted>false</Inverted>
        <Minimum>NaN</Minimum>
        <Maximum>NaN</Maximum>
        <Interval>NaN</Interval>
      </Axis>
      <LegendPosition>TopLeft</LegendPosition>
      <DisabledSeries />
    </Graph>
    <Graph>
      <Name>MinNGod</Name>
      <Series>
        <Name>P1</Name>
        <IncludeInDocumentation>true</IncludeInDocumentation>
        <Type>Scatter</Type>
        <XAxis>Bottom</XAxis>
        <YAxis>Left</YAxis>
        <ColourArgb>-16777216</ColourArgb>
        <FactorIndexToVaryColours>-1</FactorIndexToVaryColours>
        <FactorIndexToVaryMarkers>-1</FactorIndexToVaryMarkers>
        <FactorIndexToVaryLines>-1</FactorIndexToVaryLines>
        <Marker>FilledCircle</Marker>
        <MarkerSize>Normal</MarkerSize>
        <Line>Solid</Line>
        <LineThickness>Normal</LineThickness>
        <Checkpoint>Current</Checkpoint>
        <TableName>ReportingWithPatches</TableName>
        <XFieldName>Date</XFieldName>
        <YFieldName>ReportingWithPatchesVariablesScript.MinNPatch(1)</YFieldName>
        <ShowInLegend>true</ShowInLegend>
        <IncludeSeriesNameInLegend>true</IncludeSeriesNameInLegend>
        <Cumulative>false</Cumulative>
        <CumulativeX>false</CumulativeX>
      </Series>
      <Series>
        <Name>P2</Name>
        <IncludeInDocumentation>true</IncludeInDocumentation>
        <Type>Scatter</Type>
        <XAxis>Bottom</XAxis>
        <YAxis>Left</YAxis>
        <ColourArgb>-1663232</ColourArgb>
        <FactorIndexToVaryColours>-1</FactorIndexToVaryColours>
        <FactorIndexToVaryMarkers>-1</FactorIndexToVaryMarkers>
        <FactorIndexToVaryLines>-1</FactorIndexToVaryLines>
        <Marker>FilledCircle</Marker>
        <MarkerSize>Normal</MarkerSize>
        <Line>Solid</Line>
        <LineThickness>Normal</LineThickness>
        <Checkpoint>Current</Checkpoint>
        <TableName>ReportingWithPatches</TableName>
        <XFieldName>Date</XFieldName>
        <YFieldName>ReportingWithPatchesVariablesScript.MinNPatch(2)</YFieldName>
        <ShowInLegend>true</ShowInLegend>
        <IncludeSeriesNameInLegend>true</IncludeSeriesNameInLegend>
        <Cumulative>false</Cumulative>
        <CumulativeX>false</CumulativeX>
      </Series>
      <Series>
        <Name>P3</Name>
        <IncludeInDocumentation>true</IncludeInDocumentation>
        <Type>Scatter</Type>
        <XAxis>Bottom</XAxis>
        <YAxis>Left</YAxis>
        <ColourArgb>-11094807</ColourArgb>
        <FactorIndexToVaryColours>-1</FactorIndexToVaryColours>
        <FactorIndexToVaryMarkers>-1</FactorIndexToVaryMarkers>
        <FactorIndexToVaryLines>-1</FactorIndexToVaryLines>
        <Marker>FilledCircle</Marker>
        <MarkerSize>Normal</MarkerSize>
        <Line>Solid</Line>
        <LineThickness>Normal</LineThickness>
        <Checkpoint>Current</Checkpoint>
        <TableName>ReportingWithPatches</TableName>
        <XFieldName>Date</XFieldName>
        <YFieldName>ReportingWithPatchesVariablesScript.MinNPatch(3)</YFieldName>
        <ShowInLegend>true</ShowInLegend>
        <IncludeSeriesNameInLegend>true</IncludeSeriesNameInLegend>
        <Cumulative>false</Cumulative>
        <CumulativeX>false</CumulativeX>
      </Series>
      <Series>
        <Name>P4</Name>
        <IncludeInDocumentation>true</IncludeInDocumentation>
        <Type>Scatter</Type>
        <XAxis>Bottom</XAxis>
        <YAxis>Left</YAxis>
        <ColourArgb>-16736653</ColourArgb>
        <FactorIndexToVaryColours>-1</FactorIndexToVaryColours>
        <FactorIndexToVaryMarkers>-1</FactorIndexToVaryMarkers>
        <FactorIndexToVaryLines>-1</FactorIndexToVaryLines>
        <Marker>FilledCircle</Marker>
        <MarkerSize>Normal</MarkerSize>
        <Line>Solid</Line>
        <LineThickness>Normal</LineThickness>
        <Checkpoint>Current</Checkpoint>
        <TableName>ReportingWithPatches</TableName>
        <XFieldName>Date</XFieldName>
        <YFieldName>ReportingWithPatchesVariablesScript.MinNPatch(4)</YFieldName>
        <ShowInLegend>true</ShowInLegend>
        <IncludeSeriesNameInLegend>true</IncludeSeriesNameInLegend>
        <Cumulative>false</Cumulative>
        <CumulativeX>false</CumulativeX>
      </Series>
      <Series>
        <Name>P5</Name>
        <IncludeInDocumentation>true</IncludeInDocumentation>
        <Type>Scatter</Type>
        <XAxis>Bottom</XAxis>
        <YAxis>Left</YAxis>
        <ColourArgb>-16747854</ColourArgb>
        <FactorIndexToVaryColours>-1</FactorIndexToVaryColours>
        <FactorIndexToVaryMarkers>-1</FactorIndexToVaryMarkers>
        <FactorIndexToVaryLines>-1</FactorIndexToVaryLines>
        <Marker>FilledCircle</Marker>
        <MarkerSize>Normal</MarkerSize>
        <Line>Solid</Line>
        <LineThickness>Normal</LineThickness>
        <Checkpoint>Current</Checkpoint>
        <TableName>ReportingWithPatches</TableName>
        <XFieldName>Date</XFieldName>
        <YFieldName>ReportingWithPatchesVariablesScript.MinNPatch(5)</YFieldName>
        <ShowInLegend>true</ShowInLegend>
        <IncludeSeriesNameInLegend>true</IncludeSeriesNameInLegend>
        <Cumulative>false</Cumulative>
        <CumulativeX>false</CumulativeX>
      </Series>
      <IncludeInDocumentation>true</IncludeInDocumentation>
      <Axis>
        <Type>Bottom</Type>
        <Inverted>false</Inverted>
        <Minimum>NaN</Minimum>
        <Maximum>NaN</Maximum>
        <Interval>NaN</Interval>
      </Axis>
      <Axis>
        <Type>Left</Type>
        <Inverted>false</Inverted>
        <Minimum>NaN</Minimum>
        <Maximum>NaN</Maximum>
        <Interval>NaN</Interval>
      </Axis>
      <LegendPosition>TopLeft</LegendPosition>
      <DisabledSeries />
    </Graph>
    <IncludeInDocumentation>true</IncludeInDocumentation>
  </Simulation>
  <Simulation>
    <Name>ExplicitGrazedPaddock</Name>
    <Clock>
      <Name>Clock</Name>
      <IncludeInDocumentation>true</IncludeInDocumentation>
      <StartDate>1972-01-01T00:00:00</StartDate>
      <EndDate>1972-12-31T00:00:00</EndDate>
    </Clock>
    <Summary>
      <Name>SummaryFile</Name>
      <IncludeInDocumentation>true</IncludeInDocumentation>
    </Summary>
    <Manager>
      <Name>PatchManager</Name>
      <IncludeInDocumentation>true</IncludeInDocumentation>
      <Script>
        <CuttingFrequency>0</CuttingFrequency>
        <CuttingResidual>1000</CuttingResidual>
        <NutrientReturnType>Constant</NutrientReturnType>
        <AmountFertNReturned>40</AmountFertNReturned>
        <AmountDungNReturned>0</AmountDungNReturned>
        <FertiliserDepth>200</FertiliserDepth>
        <FertiliserReturnPattern>RotatingInOrder</FertiliserReturnPattern>
        <ReportingFreq>OnGrazing</ReportingFreq>
        <PatchType>EP</PatchType>
        <NumGPPatches>50</NumGPPatches>
        <SystemID>C</SystemID>
      </Script>
      <Code><![CDATA[using System;
using Models.Core;
using Models.Soils;
using Models.PMF;
using Models.Zones;
using Models.AgPasture;
using System.Xml.Serialization;
using Models.Soils;
using Models.SurfaceOM;
using APSIM.Shared.Utilities;
using System.Collections.Generic;
using System.Diagnostics; // used with Debugger.Break(); to debug manager scripts



namespace Models
{
    [Serializable]
    [System.Xml.Serialization.XmlInclude(typeof(Model))]
    public class Script : Model
    {
        [Link] Clock Clock;
        [Link] Soil soil;
        [Link] ISummary summary = null;
        [Link] Weather Weather;
        [Link] Sward sward;
        [Link] Zone myZone;

        public string SoilType;
        public string SimLocation;
        public string SetIrrigation;
        public string GeneralFertType;
        public double GeneralFertAmt;
        public string PastureType;

        public int PatchCount;
        public int DaysSinceCut = 0;
        public int PatchNumForFert = -1;



        private int NumPaddocks = 0;  // NumPaddocks is the number of AgPastures and SoilWats etc 
        private int NumPatchesForFertiliser = 1;
        private double[] MonthlyFertAmt;
        private double[] FertDepthPlacement;
        private int[] PseudoRandomSeq;
        double iniOrgC;
        double iniOrgN;
        private int GrazingNumber = -1;
        private bool CutNow = false;

        private bool ReportToday = false;
        private double AmountDungCReturned = 0.0;
        private int nPatchesAdded = 0;
        private double NewArea;
        private int[] PatchToAddTo;
        private string[] PatchNmToAddTo = new string[1];  

        public event AddSoilCNPatchDelegate AddSoilCNPatch;
        public event BiomassRemovedDelegate BiomassRemoved;

        [XmlIgnore] public bool grazedToday { get; set; }
        [XmlIgnore] public double Harvested { get; set; }
        [XmlIgnore] public double HarvestedN { get; set; }
        [XmlIgnore] public double UreaReturned  { get; set; }
        [XmlIgnore] public int NumPatches { get; set; }


        [Description("Frequency of cutting (days) (0 will be interpreted as the end of each month)")]
        public int CuttingFrequency { get; set; }

        [Description("Residual pasture mass after cutting (kg DM /ha)")]
        public int CuttingResidual { get; set; }

        [Description("Type of nutrient return - calculated from the amount of herbage harvested or constant")]
        public NutrientReturnTypes NutrientReturnType { get; set; }

        [Description("Amount of fertiliser N to apply to simulation after each cutting (pretend urine) (kgN/ha) (ignored if nutrient return is FromHarvest)")]
        public double AmountFertNReturned { get; set; }

        [Description("Amount of dung N to apply to simulation after each cutting (kgN/ha) (ignored if nutrient return is FromHarvest)")]
        public double AmountDungNReturned { get; set; }

        [Description("Depth band (0 mm to X mm) for fertiliser placement (mm)")]
        public int FertiliserDepth { get; set; }
                        
        [Description("Pattern for fertiliser return")]
        public urineReturnTypes FertiliserReturnPattern { get; set; }

        [Description("Frequency of reporting")]
        public reportingFrequencyTypes ReportingFreq { get; set; }

        [Description("Patch type")]
        public patchTypes PatchType { get; set; }

        [Description("How many patches should there be in the grid? (used to create the grid for GP and the size of the patches for PP)")]
        public int NumGPPatches { get; set; }

        [Description("System identifier")]
        public systemTypes SystemID { get; set; }


//
        public enum systemTypes
        {
            /// <summary>A</summary>
            A,
            /// <summary>B</summary>
            B,
            /// <summary>C</summary>
            C,
            /// <summary>D</summary>
            D,
            /// <summary>E</summary>
            E,
            /// <summary>F</summary>
            F
        }

        public enum patchTypes
        {
            /// <summary>EP</summary>
            EP,
            /// <summary>EP</summary>
            GP,
            /// <summary>EP</summary>
            PP,
            /// <summary>EP</summary>
            UP
        }

        public enum reportingFrequencyTypes
        {
            /// <summary>Daily</summary>
            Daily,
            /// <summary>Every 10 days</summary>
            TenDaily,
            /// <summary>Monthly</summary>
            Monthly,
            /// <summary>Annual</summary>
            Annual,
            /// <summary>On grazing</summary>
            OnGrazing
        }

        public enum urineReturnTypes
        {
            /// <summary>Uniform</summary>
            UniformAcrossAllPatches,
            /// <summary>Rotating in order</summary>
            RotatingInOrder,
            /// <summary>Random</summary>
            Random,
            /// <summary>Pseudo-random</summary>
            PseudoRandom
        }

        public enum NutrientReturnTypes
        {
            /// <summary>Constant</summary>
            Constant,
            /// <summary>FromHarvest</summary>
            FromHarvest,
            /// <summary>SetMonthly</summary>
            SetMonthly
        }


        private void SetSystemParams()
        {
            if (SystemID == systemTypes.A)
            {
                SoilType = "HE";
                SimLocation = "Rua";
                SetIrrigation = "no";
                GeneralFertType = "NoWinter";
                GeneralFertAmt = 0.0;
                PastureType = "RyeWhite";
            }
            else if (SystemID == systemTypes.B)
            {
                SoilType = "HE";
                SimLocation = "Rua";
                SetIrrigation = "no";
                GeneralFertType = "NoWinter";
                GeneralFertAmt = 150.0;
                PastureType = "RyeWhite";
            }
            else if (SystemID == systemTypes.C)
            {
                SoilType = "VL";
                SimLocation = "Lin";
                SetIrrigation = "yes";
                GeneralFertType = "NoWinter";
                GeneralFertAmt = 0.0;
                PastureType = "RyeWhite";
            }
            else if (SystemID == systemTypes.D)
            {
                SoilType = "VL";
                SimLocation = "Lin";
                SetIrrigation = "yes";
                GeneralFertType = "NoWinter";
                GeneralFertAmt = 250.0;
                PastureType = "RyeWhite";
            }
            else if (SystemID == systemTypes.E)
            {
                SoilType = "VL";
                SimLocation = "Lin";
                SetIrrigation = "yes";
                GeneralFertType = "NoWinter";
                GeneralFertAmt = 400.0;
                PastureType = "GrassOnly";
            }
            else if (SystemID == systemTypes.F)
            {
                SoilType = "VL";
                SimLocation = "Lin";
                SetIrrigation = "no";
                GeneralFertType = "NoWinter";
                GeneralFertAmt = 0.0;
                PastureType = "RyeWhite";
            }
        }

        [EventSubscribe("StartOfSimulation")]
        private void OnStartOfSimulation(object sender, EventArgs e)
        {
            if (PatchType == patchTypes.EP)
                NumPatches = NumPaddocks;
            else if (PatchType == patchTypes.GP)
                NumPatches = NumGPPatches;
            else if (PatchType == patchTypes.PP)
                NumPatches = NumGPPatches; // but will actually use this to set the size of the newly created patches
            else if (PatchType == patchTypes.UP)
                NumPatches = NumGPPatches;
            else
                throw new Exception("Patch type not catered for");

            if ((PatchType == patchTypes.GP)&&(NumPaddocks>1)) throw new Exception("Patch type GP may only have one paddock/zone");
            if ((PatchType == patchTypes.PP)&&(NumPaddocks>1)) throw new Exception("Patch type PP may only have one paddock/zone");

            NumPatchesForFertiliser = 1;  // in the future this might be > 1
            if (FertiliserReturnPattern == urineReturnTypes.PseudoRandom)  // generate a return pattern up front
            {
                int MaxNumGrazings = (Clock.EndDate.Year - Clock.StartDate.Year + 1) * 52; //allow for a maximum of 1 per week

                PseudoRandomSeq = new int[MaxNumGrazings * NumPatchesForFertiliser];
                Random rndConstSeed = new Random((int) 666);
                string MyString = "";
                for (int i = 0; i < (MaxNumGrazings * NumPatchesForFertiliser); i++)
                {
                    PseudoRandomSeq[i] = rndConstSeed.Next(0, NumPatches);  // will never select NumPatches 
                    MyString += Convert.ToString(PseudoRandomSeq[i]) + " ";
                }
                Console.WriteLine("The order of patch return will be: " + MyString);
            }

            // Add patches
            if (PatchType == patchTypes.GP)
            {
                soil.SoilNitrogen.MaximumNitrogenAvailableToPlants = 3.0;
                soil.SoilNitrogen.NPartitionApproach = "BasedOnConcentrationAndDelta";
                soil.SoilNitrogen.AllowPatchAutoAmalgamation = "No";
                soil.SoilNitrogen.AutoAmalgamationApproach = "CompareAll";
                soil.SoilNitrogen.basePatchApproach = "IDBased";
                soil.SoilNitrogen.AllowPatchAmalgamationByAge = "No";
                soil.SoilNitrogen.PatchAgeForForcedMerge = 3.0;                                


                int[] PatchToAddTo = new int[1];  //need an array variable for this
                string[] PatchNmToAddTo = new string[1];  
                int nPatchesAdded = 0;
                double NewArea = 1.0 / NumPatches;

                while (nPatchesAdded < NumPatches - 1)
                {
                    AddSoilCNPatchType NewPatch = new AddSoilCNPatchType();
                    NewPatch.DepositionType = "ToNewPatch";
                    NewPatch.AreaFraction = NewArea;
                    PatchToAddTo[0] = 0;
                    PatchNmToAddTo[0] = "0";
                    NewPatch.AffectedPatches_id = PatchToAddTo;
                    NewPatch.AffectedPatches_nm = PatchNmToAddTo;
                    NewPatch.SuppressMessages = "no";

                    AddSoilCNPatch.Invoke(NewPatch);
                    nPatchesAdded += 1;
                }                

                summary.WriteMessage(this, "NumPatches at end of initialisation (GP):" + soil.SoilNitrogen.PatchCount.ToString());
            }
        }


        [EventSubscribe("Commencing")]
        private void OnSimulationCommencing(object sender, EventArgs e)
        {
            Console.WriteLine("Initialising the Manager for grazing, urine return and reporting");

            grazedToday = false;

            // count the paddocks in the simulation
            NumPaddocks = 0;   
            foreach (Zone zone in Apsim.FindAll(this.Parent, typeof(Zone)))
                NumPaddocks += 1;   
            Console.WriteLine("There are " + NumPaddocks + " in the simulation");

            MonthlyFertAmt = new double[] { 24,19,17,12,8,5,5,10,16,19,23,25};

            Console.WriteLine("Finished initialising the Manager for grazing, urine return and reporting");
        }

        [EventSubscribe("DoManagement")]
        private void OnDoManagement(object sender, EventArgs e)        
        {    

            // if this is the start of the simulation then sort out the depth for the fertiliser (aka urine) placement
            // can't do this in initialisation because of the module order
            if (Clock.Today == Clock.StartDate)
            {
                FertPlacementDepth();
                int i = -1;  // to use as a patch counter

                iniOrgC = 0.0; 
                iniOrgN = 0.0;
                foreach (Zone zone in Apsim.FindAll(this.Parent, typeof(Zone)))
                {
                    Soil soil = Apsim.Find(zone, typeof(Soil)) as Soil;
                    i += 1;
                    PatchCount = soil.SoilNitrogen.PatchCount;

                    for (int ii = 0; ii <= (soil.Thickness.Length - 1); ii++)
                    {
                        iniOrgC += soil.SoilNitrogen.TotalC[ii] / NumPaddocks; 
                        iniOrgN += soil.SoilNitrogen.organic_n[ii] / NumPaddocks;
                    }
                }
            }

            DaysSinceCut += 1;
            Harvested = 0.0;
            HarvestedN = 0.0;
            UreaReturned = 0.0;

            bool isEndOfMonth = false;
            if(Clock.Today.AddDays(1).Day == 1) isEndOfMonth=true;

            bool isEndOfYear = false;
            if(Clock.Today.AddDays(1).DayOfYear == 1) isEndOfYear=true;



            CutNow = false;
            grazedToday = false;
            if ((CuttingFrequency == 0) && (isEndOfMonth))
                CutNow = true;
            else if ((DaysSinceCut >= CuttingFrequency) && (CuttingFrequency > 0))
                CutNow = true;

            // should reporting be done today?  Do this here as need to know if grazing will happen
            if (ReportingFreq == reportingFrequencyTypes.Daily)
                ReportToday = true;
            else if ((ReportingFreq == reportingFrequencyTypes.TenDaily) && ((Clock.Today.Day== 10) || (Clock.Today.Day == 20) || (isEndOfMonth)))
                ReportToday = true;
            else if ((ReportingFreq == reportingFrequencyTypes.Monthly) && (isEndOfMonth))
                ReportToday = true;
            else if ((ReportingFreq == reportingFrequencyTypes.Annual) && (isEndOfYear))
                ReportToday = true;
            else if ((ReportingFreq == reportingFrequencyTypes.OnGrazing) && (CutNow))
                ReportToday = true;
            else
                ReportToday = false;

            //if (Clock.Today == Clock.StartDate) CutNow = true;

            if (CutNow)
            {
                //if(Clock.Today.Month < 3) Debugger.Break();

                grazedToday = true;
                Console.WriteLine("Doing Cutting");
                DaysSinceCut = 0;
                GrazingNumber += 1;  //was initialsed as -1 - this is used to pick the pseudo-random patch return number
                // GetPatchForUrineReturn();  now called in the deposition routine

                // do the cutting=grazing - it doesn't matter if there one (GP) or many (EP) physical paddocks in the simulation at this point
                int i = -1;  // to use as a patch counter
                Harvested = 0.0;
                HarvestedN = 0.0;
                foreach (Zone zone in Apsim.FindAll(this.Parent, typeof(Zone)))
                {
                    i += 1;
                    foreach (AgPasture.Sward sward in Apsim.Children(zone, typeof(AgPasture.Sward)))
                    {        
                        sward.Graze(amount: CuttingResidual, type: "SetResidueAmount");
                        Harvested += sward.HarvestedWt / NumPaddocks;
                        HarvestedN += sward.HarvestedN / NumPaddocks;
                    }
                }

                if (NutrientReturnType == NutrientReturnTypes.FromHarvest)
                {
                    AmountFertNReturned = HarvestedN * 0.50;  // TODO yikes - probably should not have hard-coded this, if it is not FromHarvest then the value has been set in the manager parameters
                    AmountDungNReturned = HarvestedN * 0.35;  // 
                    AmountDungCReturned = AmountDungNReturned * 20;
                }
                else if (NutrientReturnType == NutrientReturnTypes.SetMonthly)
                {
                    AmountFertNReturned = MonthlyFertAmt[Clock.Today.Month - 1];
                    AmountDungNReturned = AmountFertNReturned * (0.35 / 0.50);  // 
                    AmountDungCReturned = AmountDungNReturned * 20;
                }
                else
                {
                    // urine and dung are set from the parameters
                    AmountDungCReturned = AmountDungNReturned * 20;
                }


                Console.WriteLine("The amount of urea fertiliser to be returned to the whole paddock is " + AmountFertNReturned);

                DoUrineReturn();

                DoTramplingAndDungReturn();

                Console.WriteLine("Finished Cutting");

            } // this is the end of the CutNow section

            if ((GeneralFertAmt > 0.0) && (Clock.Today.AddDays(1).Day == 1))
            {
                DoFertiliser();
            }
        }


        public void DoTramplingAndDungReturn()
        {
            int i = -1;  // patch or paddock counter
            foreach (Zone zone in Apsim.FindAll(this.Parent, typeof(Zone)))
            {
                i += 1;
                SoilNitrogen soilN = Apsim.Find(zone, typeof(SoilNitrogen)) as SoilNitrogen;
                SurfaceOrganicMatter surfaceOM = Apsim.Find(zone, typeof(SurfaceOrganicMatter)) as SurfaceOrganicMatter; 

                // do some trampling of litter
                // accelerate the movement of surface litter into the soil - do this before the dung is added
                double temp = surfaceOM.Wt * 0.1;

                TillageType trampling = new TillageType();
                surfaceOM.Incorporate(fraction: (double) 0.1, depth: (double) 100.0);

                Console.WriteLine("For patch " + i + " the amount of litter trampled was " + temp + " and the remaining litter is " + (surfaceOM.Wt));

                // move the dung to litter - assume dung is 40% of that harvested and a C:N ratio of 
                BiomassRemovedType dung = new BiomassRemovedType();
                dung.crop_type = "RuminantDung_PastureFed";
                dung.dm_type = new string[] { "RuminantDung_PastureFed" };
                dung.dlt_crop_dm = new float[] { Convert.ToSingle(AmountDungCReturned / 0.4) };  // 
                dung.dlt_dm_n = new float[] { Convert.ToSingle(AmountDungNReturned) };    // 
                dung.dlt_dm_p = new float[] { 0.0F };
                dung.fraction_to_residue = new float[] { 1.0F };
                BiomassRemoved.Invoke(dung);
                Console.WriteLine("For patch " + i + " the amount of dung DM added to the litter was " + (AmountDungCReturned / 0.4) + " and the amount of N added in the dung was " + (AmountDungNReturned));

            } 
        } // this is the end of the trampling and dung patch/paddock section


        public void DoUrineReturn()
        {
            if (PatchType == patchTypes.EP)
            {                

                GetPatchForUrineReturn();  //sets the value for PatchNumForFert
                int i = -1; //to count the paddocks
                foreach (Zone zone in Apsim.FindAll(this.Parent, typeof(Zone)))
                {
                    i += 1;
                    if (i == PatchNumForFert)
                    {
                        Fertiliser thisFert = Apsim.Find(zone, typeof(Fertiliser)) as Fertiliser;
                        Soil soil = Apsim.Find(zone, typeof(Soil)) as Soil;

                        double tempDepth = 0.0;
                        for (int ii = 0; ii <= (soil.Depth.Length - 1); ii++)
                        {
                            tempDepth += soil.Thickness[ii];
                            thisFert.Apply(Amount: (double)(FertDepthPlacement[ii] * NumPatches * AmountFertNReturned), Type: Fertiliser.Types.UreaN, Depth: (tempDepth - soil.Thickness[ii] / 2));
                        }
                        UreaReturned += AmountFertNReturned;
                    }
                } 

            }
            else if (PatchType == patchTypes.GP)
            {
                GetPatchForUrineReturn();  //sets the value for PatchNumForFert
                int[] PatchToAddTo = new int[1];  //because need an array variable for this
                string[] PatchNmToAddTo = new string[0];  //need an array variable for this
                List<IModel> zones = Apsim.FindAll(this, typeof(Zone));
                Soil soil = Apsim.Find(zones[0], typeof(Soil)) as Soil; // Only one zone allowed for GP so use the first
                double[] UreaToAdd = new double[soil.Depth.Length];  

                for (int ii = 0; ii <= (soil.Depth.Length - 1); ii++)
                    UreaToAdd[ii] = FertDepthPlacement[ii] * NumPatches * AmountFertNReturned;

                UreaReturned += AmountFertNReturned;


                AddSoilCNPatchType CurrentPatch = new AddSoilCNPatchType();
                CurrentPatch.Sender = "manager";
                CurrentPatch.DepositionType = "ToSpecificPatch";
                PatchToAddTo[0] = PatchNumForFert;
                CurrentPatch.AffectedPatches_id = PatchToAddTo;
                CurrentPatch.AffectedPatches_nm = PatchNmToAddTo;
                CurrentPatch.Urea = UreaToAdd;

                AddSoilCNPatch.Invoke(CurrentPatch); 
            }
            else if (PatchType == patchTypes.PP)
            {
                // create a new patch from base of area 1/NumGPPatches
                // add the fertiliser to that patch
                // set amalgamation autmomatic
                List<IModel> zones = Apsim.FindAll(this, typeof(Zone));
                Soil soil = Apsim.Find(zones[0], typeof(Soil)) as Soil; // Only one zone allowed for GP so use the first

                double[] UreaToAdd = new double[soil.Depth.Length];  

                for (int ii = 0; ii <= (soil.Depth.Length - 1); ii++)
                UreaToAdd[ii] = FertDepthPlacement[ii] * NumPatches * AmountFertNReturned;

                int[] PatchToAddTo = new int[1];
                string[] PatchNmToAddTo = new string[0];  //need an array variable for this

                UreaReturned += AmountFertNReturned;

                AddSoilCNPatchType NewPatch = new AddSoilCNPatchType();
                NewPatch.DepositionType = "ToNewPatch";
                NewPatch.AreaFraction = 1.0 / NumPatches;
                PatchToAddTo[0] = 0;
                NewPatch.AffectedPatches_id = PatchToAddTo;
                NewPatch.AffectedPatches_nm = PatchNmToAddTo;
                NewPatch.Urea = UreaToAdd;

                Console.WriteLine("UreaToAdd " + UreaToAdd[0] + " " + UreaToAdd[1] + " " + UreaToAdd[2] + " " + UreaToAdd[3] + " " + UreaToAdd[4]);


                AddSoilCNPatch.Invoke(NewPatch);

                //throw new Exception("Have not set up the PP for DoUrineReturn yet");
            } 
            else if (PatchType == patchTypes.UP)
            {
                int i = -1;  // patch or paddock counter
                foreach (Zone zone in Apsim.FindAll(this.Parent, typeof(Zone)))
                {
                    i += 1;

                    Fertiliser thisFert = Apsim.Find(zone, typeof(Fertiliser)) as Fertiliser;
                    Soil soil = Apsim.Find(zone, typeof(Soil)) as Soil;

                    double tempDepth = 0.0;
                    for (int ii = 0; ii <= (soil.Depth.Length - 1); ii++)
                    {
                        tempDepth += soil.Thickness[ii];
                        thisFert.Apply(Amount: (double)(FertDepthPlacement[ii] * AmountFertNReturned), Type: Fertiliser.Types.UreaN, Depth: (tempDepth - soil.Thickness[ii] / 2));
                    } 
                    UreaReturned += AmountFertNReturned;
                }
            }
            else
                throw new Exception("Patch type not catered for");



        } // end of DoUrineReturn

        public void GetPatchForUrineReturn()
        {
            if (FertiliserReturnPattern == urineReturnTypes.UniformAcrossAllPatches)
                PatchNumForFert = 0;  // but will not be used
            else if (FertiliserReturnPattern == urineReturnTypes.RotatingInOrder)
            {
                PatchNumForFert += 1;  //increment the patch number
                if (PatchNumForFert >= NumPatches)
                    PatchNumForFert = 0;  // but reset back to the first patch if needed
                //Console.WriteLine("The patch for fertiliser return is " + PatchNumForFert);
            }
            else if (FertiliserReturnPattern == urineReturnTypes.Random)
                {
                Random rnd = new Random();
                PatchNumForFert = rnd.Next(0, NumPatches);
                //Console.WriteLine("The next random number patch for fertiliser return is " + PatchNumForFert);
            }
            else if (FertiliserReturnPattern == urineReturnTypes.PseudoRandom)
            {
                PatchNumForFert = PseudoRandomSeq[GrazingNumber];
                //Console.WriteLine("The next pseudo-random number patch for fertiliser return is " + PatchNumForFert);
            }
        } // this is the end of GetPatchForUrineReturn


        public void FertPlacementDepth()
        {
            // note that this only looks at the first paddock and assumes that all the paddocks are the same
            int iii = -1;  // to use as a patch counter
            foreach (Zone zone in Apsim.FindAll(this.Parent, typeof(Zone)))
            {
                iii += 1;
                if (iii == 0)
                {
                    Soil soil = Apsim.Find(zone, typeof(Soil)) as Soil;
                    double tempDepth = 0.0;
                    FertDepthPlacement = new double[soil.Thickness.Length];
                    for (int i = 0; i <= (soil.Thickness.Length - 1); i++)
                    {
                        tempDepth += soil.Thickness[i];
                        if (tempDepth <= FertiliserDepth)
                        {
                            FertDepthPlacement[i] = soil.Thickness[i] / FertiliserDepth;
                        }
                        else
                        {
                            FertDepthPlacement[i] = (FertiliserDepth - (tempDepth - soil.Thickness[i])) / (tempDepth - (tempDepth - soil.Thickness[i])) * soil.Thickness[i] / FertiliserDepth;
                            FertDepthPlacement[i] = Math.Max(0.0, Math.Min(1.0, FertDepthPlacement[i]));
                        }
                        //if (FertiliserReturnPattern == "UniformAcrossAllPatches")
                        //   Console.WriteLine("The proportion of fertiliser applied to the " + i + "th layer will be " + FertDepthPlacement[i]);
                        //else
                        Console.WriteLine("The proportion of fertiliser (* NumPatches) applied to the " + i + "th layer will be " + FertDepthPlacement[i]);
                    }
                }
            }

        } // this is the end of FertPlacementDepth


        public void DoFertiliser()
        {
            bool ApplyFert = true; // the test for first day of the month has already been done
            double NumMonths = 0;

            if (GeneralFertType == "Monthly")  
                NumMonths = 12;
            else if (GeneralFertType == "NoWinter")  
            {
                if ((Clock.Today.Month < 5) || (Clock.Today.Month > 7))
                {
                    ApplyFert = true;
                    NumMonths = 9;
                }
            }
            else
                throw new Exception("Wrong general fertiliser setting");

            if (ApplyFert)
            {
                foreach (Zone zone in Apsim.FindAll(this.Parent, typeof(Zone)))  // but actually there will only be a single paddock
                {
                    Fertiliser thisFert = Apsim.Find(zone, typeof(Fertiliser)) as Fertiliser;

                    //thisFert.Apply((float)(GeneralFertAmt / NumMonths), (float) (0.0), "urea_n");
                    thisFert.Apply(Amount: (double)(GeneralFertAmt / NumMonths), Type: Fertiliser.Types.UreaN, Depth: FertiliserDepth);
                    Console.WriteLine("Applying " + (GeneralFertAmt / NumMonths) + " kg of general fertiliser");
                }

            }
        }
    }
}
]]></Code>
    </Manager>
    <Manager>
      <Name>ReportingWithPatchesVariables</Name>
      <IncludeInDocumentation>true</IncludeInDocumentation>
      <Script>
        <verbose>False</verbose>
        <InputModule>PatchManager</InputModule>
        <OutputModule>ReportingWithPatches</OutputModule>
        <ReportingFreq>Daily</ReportingFreq>
      </Script>
      <Code><![CDATA[using System;
using Models.Core;
using Models.Soils;
using Models.PMF;
using Models.Zones;
using Models.AgPasture;
using System.Xml.Serialization;
using Models.Soils;
using Models.SurfaceOM;
using APSIM.Shared.Utilities;
using System.Collections.Generic;
using System.Diagnostics; // used with Debugger.Break(); to debug manager scripts
using System;


namespace Models
{
    [Serializable]
    [System.Xml.Serialization.XmlInclude(typeof(Model))]
    public class Script : Model
    {
        [Link] Clock Clock;
        [Link] Simulation Simulation;
        [Link] Soil soil;
        [Link] ISummary summary = null;
        [Link] Weather Weather;
        //[Link] Zone zone;
        [Link] Sward sward;

        private Zone[] Zones {get; set; }

        private Models.Report.Report ReportingWithPatches;

        [Description("Verbose reporting mode (True/False)")]
        public bool verbose { get; set; }

        [Description("Name of the patch manager for input")]
        public string InputModule { get; set; }

        [Description("Name of the report for output")]
        public string OutputModule { get; set; }

        [Description("Frequency of reporting")]
        public reportingFrequencyTypes ReportingFreq { get; set; }

        [XmlIgnore] public int DaysSinceReport { get; set; }
        [XmlIgnore] public double NHA { get; set; }
        [XmlIgnore] public double PGR { get; set; }
        [XmlIgnore] public double HerbageGrazed { get; set; }
        [XmlIgnore] public double HerbageGrazedN { get; set; }
        [XmlIgnore] public double AreaUrinePatchesToday { get; set; }
        [XmlIgnore] public double UreaReturned { get; set; }
        [XmlIgnore] public double Fixation { get; set; }
        [XmlIgnore] public double LeachN { get; set; }
        [XmlIgnore] public double Denit { get; set; }
        [XmlIgnore] public double DenitN2O { get; set; }
        [XmlIgnore] public double OrgC { get; set; }
        [XmlIgnore] public double OrgN { get; set; }
        [XmlIgnore] public double dltOrgC { get; set; }
        [XmlIgnore] public double dltOrgN { get; set; }
        [XmlIgnore] public double MinN { get; set; }
        [XmlIgnore] public double UreaN { get; set; }
        [XmlIgnore] public double NH4N { get; set; }
        [XmlIgnore] public double NO3N { get; set; }
        [XmlIgnore] public double UreaAddedInGrazing { get; set; }

        [XmlIgnore] public double[] MinNPatch { get; set; }


        public int PatchCount;
        public int PaddockCount;
        public double Grazed;
        public double GrazedN;
        public double UrineNReturned;

        private double iniOrgC;
        private double iniOrgN;

        private bool ReportToday = false;      

        public enum reportingFrequencyTypes
        {
            /// <summary>Daily</summary>
            Daily,
            /// <summary>Every 10 days</summary>
            TenDaily,
            /// <summary>Monthly</summary>
            Monthly,
            /// <summary>Annual</summary>
            Annual,
            /// <summary>On grazing</summary>
            OnGrazing
        }

    

        [EventSubscribe("StartOfSimulation")]
        private void OnStartOfSimulation(object sender, EventArgs e)
        {

               if (verbose)
                summary.WriteMessage(this, "Initialising the Manager for grazing, urine return and reporting");
            DaysSinceReport = 0;
            PatchCount = soil.SoilNitrogen.PatchCount;
            PaddockCount=0;



            // Get list of zones in the simulation
            List<Zone> zones = new List<Zone>();

            foreach (Zone zone in Apsim.FindAll(this.Parent, typeof(Zone)))
            {
                zones.Add(zone as Zone);
                ReportingWithPatches = (Models.Report.Report)zone.Get("[" + OutputModule+ "]");
                PaddockCount++;
            }
            Zones = zones.ToArray();


            double myVariable;
            //myVariable = (double)ManageGriddedPaddock.Get("Script.Var1");
            //double grazedN = ManageGriddedPaddock.Get("Script.grazedN");

            if (verbose)
                summary.WriteMessage(this, "Finished initialising the Manager for grazing, urine return and reporting");
        }


        [EventSubscribe("DoDailyInitialisation")]
        private void OnDoDailyInitialisation(object sender, EventArgs e)
        {    
                    
            if (verbose)
                summary.WriteMessage(this, "In Daily Initialisation for the Reporting Manager on " + Clock.Today);
            if(Clock.Today == Clock.StartDate) {

                iniOrgC = 0.0; 
                iniOrgN = 0.0;            

                foreach (Zone zone in Zones)
                {
                    SoilNitrogen soilN = Apsim.Find(zone, typeof(SoilNitrogen)) as SoilNitrogen;
                    for (int ii = 0; ii < soil.Thickness.Length; ii++)
                    {
                        iniOrgC += soilN.TotalC[ii]; // TODO RJM Check this is right!
                        iniOrgN += soilN.organic_n[ii];
                    }
                }
            }        


        }

            
        [EventSubscribe("DoManagement")]
        private void DoManagement(object sender, EventArgs e)
        {
               bool isEndOfMonth = false;
            if (Clock.Today.AddDays(1).Day == 1) 
                isEndOfMonth = true;
            

            bool isEndOfYear = false;
            if (Clock.Today.Day == 31 && Clock.Today.Month == 12)
                isEndOfYear = true;


            bool GrazedToday = (bool) Apsim.Get(Simulation, InputModule + ".Script.grazedToday"); 

            // should reporting be done today?  
            if (ReportingFreq == reportingFrequencyTypes.Daily)
                ReportToday = true;
            else if ((ReportingFreq == reportingFrequencyTypes.TenDaily) && ((Clock.Today.Day == 10) || (Clock.Today.Day == 20) || (isEndOfMonth)))
                ReportToday = true;
            else if ((ReportingFreq == reportingFrequencyTypes.Monthly) && (isEndOfMonth))
                ReportToday = true;
            else if ((ReportingFreq == reportingFrequencyTypes.Annual) && (isEndOfYear))
                ReportToday = true;
            else if ((ReportingFreq == reportingFrequencyTypes.OnGrazing) && (GrazedToday))
                ReportToday = true;
            else
                ReportToday = false;
            if (verbose)
                summary.WriteMessage(this, "Finished Prepare for the Reporting Manager on " + Clock.Today);
        } 

        [EventSubscribe("EndOfDay")]
        private void OnEndOfDay(object sender, EventArgs e)
        {
            if (verbose)
                summary.WriteMessage(this, "In EndOfDay for the Reporting Manager on  " + Clock.Today);

            DaysSinceReport += 1;



            foreach (Zone zone in Zones)
            {

                Sward sward = Apsim.Find(zone, typeof(Sward)) as Sward;
                NHA += sward.HerbageGrowthWt/PaddockCount;
                PGR = NHA;  // divide this by the number of days just before reporting
                 Fixation += sward.FixedN/PaddockCount;

                Soil soil = Apsim.Find(zone, typeof(Soil)) as Soil;
                LeachN += soil.SoilWater.flow_no3[soil.SoilWater.flow_no3.Length-1]/PaddockCount;  // only take the deepest element

                for (int ii = 0; ii <= (soil.Thickness.Length - 1); ii++)
                {
                    Denit += soil.SoilNitrogen.Denitrification[ii]/PaddockCount;
                    DenitN2O += soil.SoilNitrogen.n2o_atm[ii]/PaddockCount;
                }


                Grazed = (double)zone.Get("[" + InputModule + "].Script.Harvested")/PaddockCount;
                GrazedN = (double)zone.Get("[" + InputModule + "].Script.HarvestedN")/PaddockCount;
                UrineNReturned = (double)zone.Get("[" + InputModule + "].Script.UreaReturned")/PaddockCount;
                //AreaUrinePatchesToday = (double)zone.Get("[" + InputModule + "].Script.areaUrinePatchesToday");
            } 

            HerbageGrazed += Grazed;
            HerbageGrazedN += GrazedN;
            UreaReturned += UrineNReturned;

            if(ReportToday) {

                OrgC = 0.0;
                OrgN = 0.0;
                UreaN = 0.0;
                NH4N = 0.0;
                NO3N = 0.0;
                MinN = 0.0;


                Soil soil1 = Apsim.Find(Zones[0], typeof(Soil)) as Soil;

                if(PaddockCount>1)
                    MinNPatch = new double[PaddockCount];
                else 
                    MinNPatch = new double[soil1.SoilNitrogen.PatchCount];


                int currentZoneNum = 0;
                foreach (Zone zone in Zones)
                {
                    Soil soil = Apsim.Find(zone, typeof(Soil)) as Soil;
                    Sward sward = Apsim.Find(zone, typeof(Sward)) as Sward;

                    double minNPatch = 0;

                    for (int ii = 0; ii <= (soil.Thickness.Length - 1); ii++)
                    {
                        OrgC += soil.SoilNitrogen.TotalC[ii]/PaddockCount;  
                        OrgN += soil.SoilNitrogen.organic_n[ii]/PaddockCount;
                        UreaN += soil.SoilNitrogen.urea[ii]/PaddockCount;
                        NH4N += soil.SoilNitrogen.NH4[ii]/PaddockCount;
                        NO3N += soil.SoilNitrogen.NO3[ii]/PaddockCount;
                        MinN = UreaN + NH4N + NO3N;                    
                        minNPatch += soil.SoilNitrogen.urea[ii] + soil.SoilNitrogen.NH4[ii] + soil.SoilNitrogen.NO3[ii];
                    }


                    //MinN = (UreaN*PaddockCount + NH4N*PaddockCount + NO3N*PaddockCount);
                    if(PaddockCount>1) MinNPatch[currentZoneNum] = minNPatch;

                    dltOrgC = OrgC - iniOrgC; 
                    dltOrgN = OrgN - iniOrgN;
                    iniOrgC = OrgC; // ready for the next calculation of change in pools
                    iniOrgN = OrgN;
                    currentZoneNum++;
                }

                if(soil1.SoilNitrogen.PatchCount>1) {  // TODO will break if there is more than one paddock/zone AND more than one patch                    

                    for (int ii = 0; ii < (soil1.SoilNitrogen.PatchCount); ii++)
                    {
                        MinNPatch[ii] = soil1.SoilNitrogen.PatchTotalUrea[ii]+soil1.SoilNitrogen.PatchTotalNH4[ii] + soil1.SoilNitrogen.PatchTotalNO3[ii];
                    }
                }

                PGR = NHA / DaysSinceReport; 

                ReportingWithPatches.DoOutput();

                // now zero the reported variables
                DaysSinceReport = 0;
                HerbageGrazed = 0.0;
                HerbageGrazedN = 0.0;
                DaysSinceReport = 0;
                NHA = 0;
                PGR = 0;
                UreaReturned = 0;
                Fixation = 0;
                LeachN = 0;
                Denit = 0;
                DenitN2O = 0;
                OrgC = 0;
                OrgN = 0;
                MinN = 0;
                UreaN = 0;
                NH4N = 0;
                NO3N = 0;
            }
        }
    }
}
]]></Code>
    </Manager>
    <Report>
      <Name>ReportingWithPatches</Name>
      <IncludeInDocumentation>true</IncludeInDocumentation>
      <ExperimentFactorNames />
      <ExperimentFactorValues />
      <VariableNames>
        <string>Parent.Name as Zone</string>
        <string>[Clock].Today as Date</string>
        <string>[Clock].Today.Month as Month</string>
        <string>[Clock].Today.Year as Year</string>
        <string>[ReportingWithPatchesVariables]Script.UreaReturned as UrineNReturned</string>
        <string>[ReportingWithPatchesVariables]Script.NHA as NHA</string>
        <string>[PatchManager]Script.NumPatches as NumPatches</string>
        <string>[PatchManager]Script.ListOfPatches as ListOfPatches</string>
        <string>[ReportingWithPatchesVariables]Script.AreaUrinePatchesToday as AreaUrinePatchesToday</string>
        <string>[ReportingWithPatchesVariables]Script.HerbageGrazed as HerbageGrazed</string>
        <string>[ReportingWithPatchesVariables]Script.HerbageGrazedN as HerbageGrazedN</string>
        <string>[ReportingWithPatchesVariables]Script.LeachN as LeachN</string>
        <string>[ReportingWithPatchesVariables]Script.Denit as Denit</string>
        <string>[ReportingWithPatchesVariables]Script.Fixation as Fixation</string>
        <string>[ReportingWithPatchesVariables]Script.MinN as MinN</string>
        <string>[ReportingWithPatchesVariables]Script.UreaN as UreaN</string>
        <string>[ReportingWithPatchesVariables]Script.NH4N as NH4N</string>
        <string>[ReportingWithPatchesVariables]Script.NO3N as NO3N</string>
        <string>[ReportingWithPatchesVariables]Script.dltOrgC as dltOrgC</string>
        <string>[ReportingWithPatchesVariables]Script.dltOrgN as dltOrgN</string>
        <string>[ReportingWithPatchesVariables]Script.MinNPatch</string>
      </VariableNames>
      <EventNames>
        <string />
      </EventNames>
    </Report>
    <Weather>
      <Name>Weather</Name>
      <IncludeInDocumentation>true</IncludeInDocumentation>
      <FileName>%root%\Examples\WeatherFiles\lincoln.met</FileName>
      <ExcelWorkSheetName />
    </Weather>
    <SoilArbitrator>
      <Name>Soil Arbitrator</Name>
      <IncludeInDocumentation>true</IncludeInDocumentation>
    </SoilArbitrator>
    <Folder>
      <Name>Paddocks</Name>
      <Zone>
        <Name>P1</Name>
        <Manager>
          <Name>CentrePivot</Name>
          <IncludeInDocumentation>true</IncludeInDocumentation>
          <Script>
            <allowIrrigation>yes</allowIrrigation>
            <IrrigStart>1-sep</IrrigStart>
            <IrrigEnd>30-apr</IrrigEnd>
            <SoilDepth>500</SoilDepth>
            <CritPAWForShallow>60</CritPAWForShallow>
            <CritRainToPause>30</CritRainToPause>
            <DaysToPauseOnCritRain>3</DaysToPauseOnCritRain>
            <IrrigReturnShallow>2</IrrigReturnShallow>
            <IrrigAmtShallow>10</IrrigAmtShallow>
            <PercPAWIrrigDeficitShallow>30</PercPAWIrrigDeficitShallow>
            <IrrigEffShallow>100</IrrigEffShallow>
            <IrrigReturnDeep>4</IrrigReturnDeep>
            <IrrigAmtDeep>20</IrrigAmtDeep>
            <PercPAWIrrigDeficitDeep>25</PercPAWIrrigDeficitDeep>
            <IrrigEffDeep>100</IrrigEffDeep>
            <TodayDeficit>123.894</TodayDeficit>
            <TodayDeficit_nve>-123.894</TodayDeficit_nve>
            <IrrigDay>3</IrrigDay>
            <SoilPAW>63.65</SoilPAW>
            <IrrigDeficit>25</IrrigDeficit>
            <IrrigReturn>4</IrrigReturn>
            <IrrigAmt>20</IrrigAmt>
            <IrrigEff>100</IrrigEff>
            <Rain3>0</Rain3>
            <Days2Pause>-80</Days2Pause>
          </Script>
          <Code><![CDATA[using System;
using Models.Core;
using Models.PMF;
using Models.Soils;
using System.Xml.Serialization;
using Models.PMF;
using APSIM.Shared.Utilities;
using System.Diagnostics; // used with Debugger.Break(); to debug manager scripts
        
namespace Models
{
    [Serializable] 
    [System.Xml.Serialization.XmlInclude(typeof(Model))]
    public class Script : Model
    {
        //Communication to other modules
        [Link] ISummary summary = null;
        [Link] Irrigation irrigation;
        [Link] Clock Clock;
        [Link] Soil soil;
        [Link] Weather Met; 
        [Link(IsOptional = true)] ICrop existingCrop;
       
        //User inputs from properties tab
        [Description("Turn irrigation on?")]
        public answerTypes allowIrrigation { get; set; }
        [Description("Start of irrigation season (dd-MMM)")]
        public string IrrigStart { get; set; }
        [Description("End of irrigation season (dd-MMM)")]
        public string IrrigEnd { get; set; }
        [Description("Enter the depth to which water deficit is computed (mm)")]
        public double SoilDepth { get; set; }
        [Description("PAW below which soil is considered 'shallow' (mm)")]
        public double CritPAWForShallow { get; set; }
        [Description("Amount of rainfall over the last 3 days to cause pause to irrigator (mm)")]
        public double CritRainToPause { get; set; }
        [Description("Number of days to pause irrigator after critical rainfall (days)")]
        public double DaysToPauseOnCritRain { get; set; }

        [Description("Shallow Soils: Irrigation return period (days)")]
        public double IrrigReturnShallow { get; set; }
        [Description("Shallow Soils: Effective irrigation amount (mm)")]
        public double IrrigAmtShallow { get; set; }
        [Description("Shallow Soils: Percentage of PAW at which to irrigate (%)")]
        public double PercPAWIrrigDeficitShallow { get; set; }
        [Description("Shallow Soils: Irrigation efficiency (%)")]
        public double IrrigEffShallow { get; set; }

        [Description("Deep Soils: Irrigation return period (days)")]
        public double IrrigReturnDeep { get; set; }
        [Description("Deep Soils: Effective irrigation amount (mm)")]
        public double IrrigAmtDeep { get; set; }
        [Description("Deep Soils: Percentage of PAW at which to irrigate (%)")]
        public double PercPAWIrrigDeficitDeep { get; set; }
        [Description("Deep Soils: Irrigation efficiency (%)")]
        public double IrrigEffDeep { get; set; }

        // Outputs
        public double TodayDeficit { get; set; }
        public double TodayDeficit_nve { get; set; }
        public double IrrigDay { get; set; }
        public double SoilPAW { get; set; }
        public double IrrigDeficit { get; set; }
        public double IrrigReturn { get; set; }
        public double IrrigAmt { get; set; }
        public double IrrigEff { get; set; }
        public double Rain3 { get; set; }

        public double Days2Pause { get; set; }

        // internal use
        private DateTime StartDate;               //The date when irrigation start (in date format)
        private DateTime EndDate;                 //The date when irrigation finish (in date format)
        private double RainToday=0;
        public double[] Rain_3;

        public enum answerTypes
        {
            /// <summary>a positive answer</summary>
            yes,
            /// <summary>a negative answer</summary>
            no
        }


        [EventSubscribe("StartOfSimulation")]
        private void OnStartOfSimulation(object sender, EventArgs e)
        {
            summary.WriteMessage(this, "==================================================");
            summary.WriteMessage(this, "                CentrePivot initialising          ");
            summary.WriteMessage(this, "");

            IrrigDay = 5000;  //so will reset to 1 on first day
              StartDate = DateTime.Parse(IrrigStart);
              EndDate = DateTime.Parse(IrrigEnd);

            Rain3 = 0;
            Rain_3 = new double[4];
            Rain_3[0] = 0;
            Rain_3[1] = 0;
            Rain_3[2] = 0;

              SoilPAW = 0.0;

              double[] sw_dul = soil.DULmm;
              double[] sw_15 = soil.LL15mm;  
              double MySoilDepth = 0;
              for(int z=0;z<soil.Thickness.Length;z++) {
                  MySoilDepth+=soil.Thickness[z];
                  if (MySoilDepth<= SoilDepth) 
                      SoilPAW+=sw_dul[z] - sw_15[z];    
              }

              if(SoilPAW <= CritPAWForShallow) {      
                IrrigDeficit = PercPAWIrrigDeficitShallow / 100 * SoilPAW;
                IrrigReturn = IrrigReturnShallow;
                IrrigAmt = IrrigAmtShallow;
                IrrigEff = IrrigEffShallow ;           
                summary.WriteMessage(this, "  Soil is considered to be shallow " + CritPAWForShallow + " " + SoilPAW);
            } 
            else 
            {
                IrrigDeficit = PercPAWIrrigDeficitDeep;
                IrrigReturn = IrrigReturnDeep;
                IrrigAmt = IrrigAmtDeep;
                IrrigEff = IrrigEffDeep;
                summary.WriteMessage(this, "  Soil is considered to be deep");
            }

            summary.WriteMessage(this, "  Irrigation critical deficit (mm): " + IrrigDeficit);
            summary.WriteMessage(this, "          Irrigation return (days): " + IrrigReturn);
            summary.WriteMessage(this, "     Irrigation pumped amount (mm): " + IrrigAmt);
            summary.WriteMessage(this, "         Irrigation efficiency (%): " + IrrigEff);
            summary.WriteMessage(this, "");
            summary.WriteMessage(this, "                CentrePivot initialised");
            summary.WriteMessage(this, "==================================================");
            
        }

        [EventSubscribe("Commencing")]
        private void OnSimulationCommencing(object sender, EventArgs e)
        {
        }

       [EventSubscribe("PreparingNewWeatherData")]
        private void OnPreparingNewWeatherData(object sender, EventArgs e)
        {
            RainToday = Met.Rain; //takes note of how much rain was due to fall today        
        }

        //[EventSubscribe("DoDailyInitialisation")]
        //private void OnDoDailyInitialisation(object sender, EventArgs e) 
        //{
        //}

        [EventSubscribe("StartOfDay")]
        private void OnStartOfDay(object sender, EventArgs e)
        {
            int rain=0;

            Rain_3[2] = Rain_3[1];
            Rain_3[1] = Rain_3[0];
            Rain_3[0] = RainToday;
            Rain3 = Rain_3[0] + Rain_3[1] + Rain_3[2]; //sums the rain in the last 3 days
            if(Rain3 >= CritRainToPause)
                Days2Pause = DaysToPauseOnCritRain;
            else
                Days2Pause = Days2Pause - 1;

            double[] sw_dul = soil.DULmm;
            double[] sw_sw = soil.SWAtWaterThickness;  // ??? was MySwim.sw_dep
              double[] sw_15 = soil.LL15mm;  
              double MySoilDepth = 0;

            TodayDeficit = 0.0;
            SoilPAW = 0.0;

              for(int z=0;z<soil.Thickness.Length;z++) {
                  MySoilDepth+=soil.Thickness[z];
                  if (MySoilDepth<= SoilDepth) {
                      SoilPAW+=sw_dul[z] - sw_15[z];    
                      TodayDeficit += sw_dul[z] - Math.Min(sw_dul[z], sw_sw[z]);
                  }
              }
            TodayDeficit_nve = -1 * TodayDeficit;

            if (isBetween(Clock.Today, StartDate, EndDate)) {
                 if(SoilPAW <= CritPAWForShallow) {      
                    IrrigDeficit = PercPAWIrrigDeficitShallow / 100 * SoilPAW;
                    IrrigReturn = IrrigReturnShallow;
                    IrrigAmt = IrrigAmtShallow;
                    IrrigEff = IrrigEffShallow ;           
                } 
                else 
                {
                    IrrigDeficit = PercPAWIrrigDeficitDeep;
                    IrrigReturn = IrrigReturnDeep;
                    IrrigAmt = IrrigAmtDeep;
                    IrrigEff = IrrigEffDeep;
                }

                if(Days2Pause < 0.5) {
                    IrrigDay = IrrigDay + 1;
                    if(IrrigDay > IrrigReturn)
                        IrrigDay = 1;  // and day = 1 is when the irrigation happens                    

                    if ((TodayDeficit >= IrrigDeficit) && (allowIrrigation == answerTypes.yes)) {
                        if(IrrigDay == 1){
                            double AmountToApply = (IrrigAmt / (IrrigEff / 100.0));
                            //summary.WriteMessage(this, "Rain today was " + RainToday + ". Applying " + AmountToApply+ " mm of irrigation");
                            irrigation.Apply(AmountToApply);

                        }
                    }
                }
            }
        }

        ///Checks whether theDate is between iniDate and endDate (non-year specific)
        private bool isBetween(DateTime theDay, DateTime iniDate, DateTime endDate)
        {
            bool result = false;
            if (iniDate.DayOfYear < endDate.DayOfYear)
            {
                // period is within one year, ex: summer in the northern hemisphere
                if ((theDay.DayOfYear >= iniDate.DayOfYear) && (theDay.DayOfYear <= endDate.DayOfYear))
                    result = true;
            }
            else
            {
                // period goes over the end of the year, ex: summer in the southern hemisphere
                if ((theDay.DayOfYear >= iniDate.DayOfYear) || (theDay.DayOfYear <= endDate.DayOfYear))
                    result = true;
            }
            
            return result;
        }

    }
}
]]></Code>
        </Manager>
        <SurfaceOrganicMatter>
          <Name>SurfaceOrganicMatter</Name>
          <IncludeInDocumentation>true</IncludeInDocumentation>
          <PondActive>no</PondActive>
          <ReportAdditions>no</ReportAdditions>
          <ReportRemovals>no</ReportRemovals>
          <ResidueTypes>
            <Name>ResidueTypes</Name>
            <IncludeInDocumentation>true</IncludeInDocumentation>
            <LoadFromResource>ResidueTypes</LoadFromResource>
          </ResidueTypes>
          <TillageTypes>
            <Name>TillageTypesList</Name>
            <IncludeInDocumentation>true</IncludeInDocumentation>
            <TillageType />
          </TillageTypes>
          <Pools>
            <Pool>
              <PoolName>grass</PoolName>
              <ResidueType>grass</ResidueType>
              <Mass>500</Mass>
              <CNRatio>15</CNRatio>
              <CPRatio>NaN</CPRatio>
              <StandingFraction>0</StandingFraction>
            </Pool>
          </Pools>
          <PoolName>grass</PoolName>
          <type>grass</type>
          <mass>500</mass>
          <standing_fraction>0</standing_fraction>
          <cpr />
          <cnr>15</cnr>
          <CriticalResidueWeight>2000</CriticalResidueWeight>
          <OptimumDecompTemp>20</OptimumDecompTemp>
          <MaxCumulativeEOS>20</MaxCumulativeEOS>
          <CNRatioDecompCoeff>0.277</CNRatioDecompCoeff>
          <CNRatioDecompThreshold>25</CNRatioDecompThreshold>
          <TotalLeachRain>25</TotalLeachRain>
          <MinRainToLeach>10</MinRainToLeach>
          <CriticalMinimumOrganicC>0.004</CriticalMinimumOrganicC>
          <DefaultCPRatio>0</DefaultCPRatio>
          <DefaultStandingFraction>0</DefaultStandingFraction>
          <StandingExtinctCoeff>0.5</StandingExtinctCoeff>
          <FractionFaecesAdded>0.5</FractionFaecesAdded>
        </SurfaceOrganicMatter>
        <MicroClimate>
          <Name>MicroClimate</Name>
          <IncludeInDocumentation>true</IncludeInDocumentation>
          <a_interception>0</a_interception>
          <b_interception>1</b_interception>
          <c_interception>0</c_interception>
          <d_interception>0</d_interception>
          <soil_albedo>0.23</soil_albedo>
          <sun_angle>15</sun_angle>
          <soil_heat_flux_fraction>0.4</soil_heat_flux_fraction>
          <night_interception_fraction>0.5</night_interception_fraction>
          <refheight>2</refheight>
          <albedo>0.15</albedo>
          <emissivity>0.95999999999999974</emissivity>
          <RadIntTotal>-4.3854844207218751</RadIntTotal>
        </MicroClimate>
        <Irrigation>
          <Name>Irrigation</Name>
          <IncludeInDocumentation>true</IncludeInDocumentation>
        </Irrigation>
        <Fertiliser>
          <Name>Fertiliser</Name>
          <IncludeInDocumentation>true</IncludeInDocumentation>
        </Fertiliser>
        <SoluteManager>
          <Name>SoluteManager</Name>
          <IncludeInDocumentation>true</IncludeInDocumentation>
        </SoluteManager>
        <Report>
          <Name>Report</Name>
          <IncludeInDocumentation>true</IncludeInDocumentation>
          <ExperimentFactorNames />
          <ExperimentFactorValues />
          <VariableNames>
            <string>[Clock].Today as Date</string>
            <string>(sum([Soil].SoilNitrogen.urea) + sum([Soil].SoilNitrogen.NH4) + sum([Soil].SoilNitrogen.NO3)) as minNPaddock</string>
            <string>[Sward].HerbageGrowthWt</string>
          </VariableNames>
          <EventNames>
            <string>[Clock].EndOfDay</string>
          </EventNames>
        </Report>
        <Sward>
          <Name>Sward</Name>
          <PastureSpecies>
            <Name>Ryegrass</Name>
            <IncludeInDocumentation>true</IncludeInDocumentation>
            <MaximumNUptake>10</MaximumNUptake>
            <Albedo>0.26</Albedo>
            <Gsmax>0.011</Gsmax>
            <R50>200</R50>
            <SpeciesFamily>Grass</SpeciesFamily>
            <PhotosyntheticPathway>C3</PhotosyntheticPathway>
            <InitialShootDM>750</InitialShootDM>
            <InitialRootDM>450</InitialRootDM>
            <InitialRootDepth>750</InitialRootDepth>
            <ReferencePhotosyntheticRate>1</ReferencePhotosyntheticRate>
            <LightExtinctionCoefficient>0.5</LightExtinctionCoefficient>
            <GrowthTminimum>1</GrowthTminimum>
            <GrowthToptimum>20</GrowthToptimum>
            <GrowthTEffectExponent>1.7</GrowthTEffectExponent>
            <UseHeatStressFactor>yes</UseHeatStressFactor>
            <HeatOnsetTemperature>28</HeatOnsetTemperature>
            <HeatFullTemperature>35</HeatFullTemperature>
            <HeatRecoverySumDD>30</HeatRecoverySumDD>
            <HeatRecoveryTReference>25</HeatRecoveryTReference>
            <UseColdStressFactor>yes</UseColdStressFactor>
            <ColdOnsetTemperature>1</ColdOnsetTemperature>
            <ColdFullTemperature>-5</ColdFullTemperature>
            <ColdRecoverySumDD>25</ColdRecoverySumDD>
            <ColdRecoveryTReference>0</ColdRecoveryTReference>
            <MaintenanceRespirationCoefficient>0.03</MaintenanceRespirationCoefficient>
            <GrowthRespirationCoefficient>0.25</GrowthRespirationCoefficient>
            <RespirationTReference>20</RespirationTReference>
            <RespirationExponent>1.5</RespirationExponent>
            <NThresholdsForLeaves>
              <double>0.04</double>
              <double>0.012</double>
              <double>0.05</double>
            </NThresholdsForLeaves>
            <NThresholdsForStems>
              <double>0.02</double>
              <double>0.006</double>
              <double>0.025</double>
            </NThresholdsForStems>
            <NThresholdsForStolons>
              <double>0</double>
              <double>0</double>
              <double>0</double>
            </NThresholdsForStolons>
            <NThresholdsForRoots>
              <double>0.02</double>
              <double>0.006</double>
              <double>0.025</double>
            </NThresholdsForRoots>
            <DegreesDayForGermination>125</DegreesDayForGermination>
            <TargetShootRootRatio>4</TargetShootRootRatio>
            <MaxRootAllocation>0.25</MaxRootAllocation>
            <ShootRootGlfFactor>0.5</ShootRootGlfFactor>
            <UseReproSeasonFactor>yes</UseReproSeasonFactor>
            <ReproSeasonReferenceLatitude>41</ReproSeasonReferenceLatitude>
            <ReproSeasonTimingCoeff>0.14</ReproSeasonTimingCoeff>
            <ReproSeasonMaxAllocationIncrease>0.5</ReproSeasonMaxAllocationIncrease>
            <ReproSeasonAllocationCoeff>0.1</ReproSeasonAllocationCoeff>
            <FractionLeafMaximum>0.7</FractionLeafMaximum>
            <FractionLeafMinimum>0.7</FractionLeafMinimum>
            <FractionLeafDMThreshold>500</FractionLeafDMThreshold>
            <FractionLeafDMFactor>2000</FractionLeafDMFactor>
            <FractionLeafExponent>3</FractionLeafExponent>
            <FractionToStolon>0</FractionToStolon>
            <SpecificLeafArea>25</SpecificLeafArea>
            <SpecificRootLength>100</SpecificRootLength>
            <StolonEffectOnLAI>0</StolonEffectOnLAI>
            <ShootMaxEffectOnLAI>1000</ShootMaxEffectOnLAI>
            <MaxStemEffectOnLAI>1</MaxStemEffectOnLAI>
            <LiveLeavesPerTiller>3</LiveLeavesPerTiller>
            <TissueTurnoverRateShoot>0.05</TissueTurnoverRateShoot>
            <TissueTurnoverRateRoot>0.02</TissueTurnoverRateRoot>
            <DetachmentRateShoot>0.08</DetachmentRateShoot>
            <TurnoverTemperatureMin>2</TurnoverTemperatureMin>
            <TurnoverTemperatureRef>20</TurnoverTemperatureRef>
            <TurnoverTemperatureExponent>1</TurnoverTemperatureExponent>
            <TurnoverDroughtEffectMax>1</TurnoverDroughtEffectMax>
            <TurnoverDroughtThreshold>0.5</TurnoverDroughtThreshold>
            <TurnoverDefoliationCoefficient>0.5</TurnoverDefoliationCoefficient>
            <TurnoverDefoliationRootEffect>0.1</TurnoverDefoliationRootEffect>
            <FractionNLuxuryRemobilisable>
              <double>0.1</double>
              <double>0.1</double>
              <double>0.1</double>
            </FractionNLuxuryRemobilisable>
            <MinimumNFixation>0</MinimumNFixation>
            <MaximumNFixation>0</MaximumNFixation>
            <SoilSaturationEffectMax>0.1</SoilSaturationEffectMax>
            <MinimumWaterFreePorosity>-1</MinimumWaterFreePorosity>
            <SoilSaturationRecoveryFactor>0.25</SoilSaturationRecoveryFactor>
            <NDillutionCoefficient>0.25</NDillutionCoefficient>
            <GlfGeneric>1</GlfGeneric>
            <GlfSoilFertility>1</GlfSoilFertility>
            <PlantHeightMinimum>25</PlantHeightMinimum>
            <PlantHeightMaximum>600</PlantHeightMaximum>
            <PlantHeightMassForMax>10000</PlantHeightMassForMax>
            <PlantHeightExponent>2.8</PlantHeightExponent>
            <RootDepthMinimum>50</RootDepthMinimum>
            <RootDepthMaximum>750</RootDepthMaximum>
            <RootElongationRate>25</RootElongationRate>
            <RootDistributionDepthParam>90</RootDistributionDepthParam>
            <RootDistributionExponent>3.2</RootDistributionExponent>
            <DigestibilitiesCellWall>
              <double>0.6</double>
              <double>0.6</double>
              <double>0.6</double>
              <double>0.2</double>
            </DigestibilitiesCellWall>
            <MinimumGreenWt>100</MinimumGreenWt>
            <FractionStolonStanding>0</FractionStolonStanding>
            <PreferenceForGreenOverDead>1</PreferenceForGreenOverDead>
            <PreferenceForLeafOverStems>1</PreferenceForLeafOverStems>
            <WaterAvailableMethod>DefaultAPSIM</WaterAvailableMethod>
            <NitrogenAvailableMethod>BasicAgPasture</NitrogenAvailableMethod>
          </PastureSpecies>
          <PastureSpecies>
            <Name>WhiteClover</Name>
            <IncludeInDocumentation>true</IncludeInDocumentation>
            <MaximumNUptake>10</MaximumNUptake>
            <Albedo>0.26</Albedo>
            <Gsmax>0.011</Gsmax>
            <R50>200</R50>
            <SpeciesFamily>Legume</SpeciesFamily>
            <PhotosyntheticPathway>C3</PhotosyntheticPathway>
            <InitialShootDM>250</InitialShootDM>
            <InitialRootDM>150</InitialRootDM>
            <InitialRootDepth>350</InitialRootDepth>
            <ReferencePhotosyntheticRate>1</ReferencePhotosyntheticRate>
            <LightExtinctionCoefficient>0.8</LightExtinctionCoefficient>
            <GrowthTminimum>2</GrowthTminimum>
            <GrowthToptimum>22</GrowthToptimum>
            <GrowthTEffectExponent>1.7</GrowthTEffectExponent>
            <UseHeatStressFactor>yes</UseHeatStressFactor>
            <HeatOnsetTemperature>30</HeatOnsetTemperature>
            <HeatFullTemperature>36</HeatFullTemperature>
            <HeatRecoverySumDD>20</HeatRecoverySumDD>
            <HeatRecoveryTReference>25</HeatRecoveryTReference>
            <UseColdStressFactor>yes</UseColdStressFactor>
            <ColdOnsetTemperature>2</ColdOnsetTemperature>
            <ColdFullTemperature>-5</ColdFullTemperature>
            <ColdRecoverySumDD>30</ColdRecoverySumDD>
            <ColdRecoveryTReference>0</ColdRecoveryTReference>
            <MaintenanceRespirationCoefficient>0.04</MaintenanceRespirationCoefficient>
            <GrowthRespirationCoefficient>0.25</GrowthRespirationCoefficient>
            <RespirationTReference>20</RespirationTReference>
            <RespirationExponent>1.5</RespirationExponent>
            <NThresholdsForLeaves>
              <double>0.045</double>
              <double>0.02</double>
              <double>0.055</double>
            </NThresholdsForLeaves>
            <NThresholdsForStems>
              <double>0.0225</double>
              <double>0.01</double>
              <double>0.0275</double>
            </NThresholdsForStems>
            <NThresholdsForStolons>
              <double>0.0225</double>
              <double>0.01</double>
              <double>0.0275</double>
            </NThresholdsForStolons>
            <NThresholdsForRoots>
              <double>0.0225</double>
              <double>0.01</double>
              <double>0.0275</double>
            </NThresholdsForRoots>
            <DegreesDayForGermination>125</DegreesDayForGermination>
            <TargetShootRootRatio>4</TargetShootRootRatio>
            <MaxRootAllocation>0.25</MaxRootAllocation>
            <ShootRootGlfFactor>0.5</ShootRootGlfFactor>
            <UseReproSeasonFactor>yes</UseReproSeasonFactor>
            <ReproSeasonReferenceLatitude>41</ReproSeasonReferenceLatitude>
            <ReproSeasonTimingCoeff>0.14</ReproSeasonTimingCoeff>
            <ReproSeasonMaxAllocationIncrease>0.5</ReproSeasonMaxAllocationIncrease>
            <ReproSeasonAllocationCoeff>0.1</ReproSeasonAllocationCoeff>
            <FractionLeafMaximum>0.56</FractionLeafMaximum>
            <FractionLeafMinimum>0.28</FractionLeafMinimum>
            <FractionLeafDMThreshold>500</FractionLeafDMThreshold>
            <FractionLeafDMFactor>2000</FractionLeafDMFactor>
            <FractionLeafExponent>3</FractionLeafExponent>
            <FractionToStolon>0.2</FractionToStolon>
            <SpecificLeafArea>30</SpecificLeafArea>
            <SpecificRootLength>45</SpecificRootLength>
            <StolonEffectOnLAI>0.3</StolonEffectOnLAI>
            <ShootMaxEffectOnLAI>500</ShootMaxEffectOnLAI>
            <MaxStemEffectOnLAI>0.5</MaxStemEffectOnLAI>
            <LiveLeavesPerTiller>3</LiveLeavesPerTiller>
            <TissueTurnoverRateShoot>0.05</TissueTurnoverRateShoot>
            <TissueTurnoverRateRoot>0.02</TissueTurnoverRateRoot>
            <DetachmentRateShoot>0.11</DetachmentRateShoot>
            <TurnoverTemperatureMin>2</TurnoverTemperatureMin>
            <TurnoverTemperatureRef>20</TurnoverTemperatureRef>
            <TurnoverTemperatureExponent>1</TurnoverTemperatureExponent>
            <TurnoverDroughtEffectMax>1</TurnoverDroughtEffectMax>
            <TurnoverDroughtThreshold>0.5</TurnoverDroughtThreshold>
            <TurnoverDefoliationCoefficient>0.5</TurnoverDefoliationCoefficient>
            <TurnoverDefoliationRootEffect>0.1</TurnoverDefoliationRootEffect>
            <FractionNLuxuryRemobilisable>
              <double>0.1</double>
              <double>0.1</double>
              <double>0.1</double>
            </FractionNLuxuryRemobilisable>
            <MinimumNFixation>0.2</MinimumNFixation>
            <MaximumNFixation>0.6</MaximumNFixation>
            <SoilSaturationEffectMax>0.1</SoilSaturationEffectMax>
            <MinimumWaterFreePorosity>-1</MinimumWaterFreePorosity>
            <SoilSaturationRecoveryFactor>0.25</SoilSaturationRecoveryFactor>
            <NDillutionCoefficient>1</NDillutionCoefficient>
            <GlfGeneric>1</GlfGeneric>
            <GlfSoilFertility>1</GlfSoilFertility>
            <PlantHeightMinimum>25</PlantHeightMinimum>
            <PlantHeightMaximum>350</PlantHeightMaximum>
            <PlantHeightMassForMax>7500</PlantHeightMassForMax>
            <PlantHeightExponent>2.5</PlantHeightExponent>
            <RootDepthMinimum>30</RootDepthMinimum>
            <RootDepthMaximum>350</RootDepthMaximum>
            <RootElongationRate>25</RootElongationRate>
            <RootDistributionDepthParam>70</RootDistributionDepthParam>
            <RootDistributionExponent>2.5</RootDistributionExponent>
            <DigestibilitiesCellWall>
              <double>0.6</double>
              <double>0.6</double>
              <double>0.6</double>
              <double>0.2</double>
            </DigestibilitiesCellWall>
            <MinimumGreenWt>50</MinimumGreenWt>
            <FractionStolonStanding>0</FractionStolonStanding>
            <PreferenceForGreenOverDead>1</PreferenceForGreenOverDead>
            <PreferenceForLeafOverStems>1</PreferenceForLeafOverStems>
            <WaterAvailableMethod>DefaultAPSIM</WaterAvailableMethod>
            <NitrogenAvailableMethod>BasicAgPasture</NitrogenAvailableMethod>
          </PastureSpecies>
          <IncludeInDocumentation>true</IncludeInDocumentation>
          <ControlledBySward>yes</ControlledBySward>
          <WaterUptakeSource>species</WaterUptakeSource>
          <NUptakeSource>species</NUptakeSource>
        </Sward>
        <Soil>
          <Name>Soil</Name>
          <InitialWater>
            <Name>Initial water</Name>
            <IncludeInDocumentation>true</IncludeInDocumentation>
            <PercentMethod>FilledFromTop</PercentMethod>
            <FractionFull>0.987012987012987</FractionFull>
            <DepthWetSoil>NaN</DepthWetSoil>
          </InitialWater>
          <Water>
            <Name>Water</Name>
            <SoilCrop>
              <Name>SwardSoil</Name>
              <IncludeInDocumentation>true</IncludeInDocumentation>
              <LL>
                <double>0.15</double>
                <double>0.14</double>
                <double>0.06</double>
                <double>0.02</double>
                <double>0.01</double>
                <double>0.01</double>
                <double>0.01</double>
              </LL>
              <KL>
                <double>0.1</double>
                <double>0.1</double>
                <double>0.08</double>
                <double>0.04</double>
                <double>0.01</double>
                <double>0</double>
                <double>0</double>
              </KL>
              <XF>
                <double>1</double>
                <double>1</double>
                <double>1</double>
                <double>1</double>
                <double>1</double>
                <double>0</double>
                <double>0</double>
              </XF>
            </SoilCrop>
            <SoilCrop>
              <Name>RyegrassSoil</Name>
              <IncludeInDocumentation>true</IncludeInDocumentation>
              <LL>
                <double>0.14</double>
                <double>0.14</double>
                <double>0.03</double>
                <double>0.03</double>
                <double>0.03</double>
                <double>0.03</double>
                <double>0.03</double>
              </LL>
              <KL>
                <double>0.1</double>
                <double>0.1</double>
                <double>0.1</double>
                <double>0.02</double>
                <double>0</double>
                <double>0</double>
                <double>0</double>
              </KL>
              <XF>
                <double>1</double>
                <double>1</double>
                <double>1</double>
                <double>1</double>
                <double>0</double>
                <double>0</double>
                <double>0</double>
              </XF>
            </SoilCrop>
            <SoilCrop>
              <Name>WhiteCloverSoil</Name>
              <IncludeInDocumentation>true</IncludeInDocumentation>
              <LL>
                <double>0.14</double>
                <double>0.14</double>
                <double>0.03</double>
                <double>0.03</double>
                <double>0.03</double>
                <double>0.03</double>
                <double>0.03</double>
              </LL>
              <KL>
                <double>0.1</double>
                <double>0.1</double>
                <double>0.1</double>
                <double>0.02</double>
                <double>0</double>
                <double>0</double>
                <double>0</double>
              </KL>
              <XF>
                <double>1</double>
                <double>1</double>
                <double>1</double>
                <double>1</double>
                <double>0</double>
                <double>0</double>
                <double>0</double>
              </XF>
            </SoilCrop>
            <IncludeInDocumentation>true</IncludeInDocumentation>
            <Thickness>
              <double>150</double>
              <double>150</double>
              <double>200</double>
              <double>150</double>
              <double>250</double>
              <double>300</double>
              <double>300</double>
            </Thickness>
            <BD>
              <double>1.3</double>
              <double>1.35</double>
              <double>1</double>
              <double>0.53</double>
              <double>0.31</double>
              <double>0.3</double>
              <double>0.3</double>
            </BD>
            <AirDry>
              <double>0.05</double>
              <double>0.12</double>
              <double>0.055</double>
              <double>0.015</double>
              <double>0.01</double>
              <double>0.01</double>
              <double>0.01</double>
            </AirDry>
            <LL15>
              <double>0.15</double>
              <double>0.14</double>
              <double>0.055</double>
              <double>0.015</double>
              <double>0.01</double>
              <double>0.01</double>
              <double>0.01</double>
            </LL15>
            <DUL>
              <double>0.36</double>
              <double>0.34</double>
              <double>0.19</double>
              <double>0.065</double>
              <double>0.04</double>
              <double>0.03</double>
              <double>0.03</double>
            </DUL>
            <SAT>
              <double>0.45</double>
              <double>0.43</double>
              <double>0.25</double>
              <double>0.15</double>
              <double>0.11</double>
              <double>0.11</double>
              <double>0.11</double>
            </SAT>
            <KS>
              <double>5000</double>
              <double>2500</double>
              <double>3000</double>
              <double>10000</double>
              <double>17500</double>
              <double>20000</double>
              <double>20000</double>
            </KS>
          </Water>
          <SoilWater>
            <Name>SoilWater</Name>
            <IncludeInDocumentation>true</IncludeInDocumentation>
            <SummerDate>1-Nov</SummerDate>
            <SummerU>6</SummerU>
            <SummerCona>3.5</SummerCona>
            <WinterDate>1-apr</WinterDate>
            <WinterU>2</WinterU>
            <WinterCona>2</WinterCona>
            <DiffusConst>88</DiffusConst>
            <DiffusSlope>35</DiffusSlope>
            <Salb>0.13</Salb>
            <CN2Bare>73</CN2Bare>
            <CNRed>20</CNRed>
            <CNCov>0.8</CNCov>
            <slope>0</slope>
            <discharge_width>0</discharge_width>
            <catchment_area>0</catchment_area>
            <max_pond>0</max_pond>
            <Thickness>
              <double>100</double>
              <double>200</double>
              <double>300</double>
              <double>300</double>
              <double>300</double>
              <double>300</double>
              <double>300</double>
            </Thickness>
            <SWCON>
              <double>0.4</double>
              <double>0.5</double>
              <double>0.6</double>
              <double>0.6</double>
              <double>0.8</double>
              <double>0.8</double>
              <double>0.8</double>
            </SWCON>
            <KLAT>
              <double>0</double>
              <double>0</double>
              <double>0</double>
              <double>0</double>
              <double>0</double>
              <double>0</double>
              <double>0</double>
            </KLAT>
            <residueinterception>0</residueinterception>
          </SoilWater>
          <SoilOrganicMatter>
            <Name>SoilOrganicMatter</Name>
            <IncludeInDocumentation>true</IncludeInDocumentation>
            <RootCN>40</RootCN>
            <RootWt>1000</RootWt>
            <SoilCN>12</SoilCN>
            <EnrACoeff>7.4</EnrACoeff>
            <EnrBCoeff>0.2</EnrBCoeff>
            <Thickness>
              <double>150</double>
              <double>150</double>
              <double>200</double>
              <double>150</double>
              <double>250</double>
              <double>300</double>
              <double>300</double>
            </Thickness>
            <Depth>
              <string>0-15</string>
              <string>15-30</string>
              <string>30-50</string>
              <string>50-65</string>
              <string>65-90</string>
              <string>90-120</string>
              <string>120-150</string>
            </Depth>
            <OC>
              <double>3</double>
              <double>1</double>
              <double>0.6</double>
              <double>0.4</double>
              <double>0.25</double>
              <double>0.15</double>
              <double>0.1</double>
            </OC>
            <FBiom>
              <double>0.04</double>
              <double>0.02</double>
              <double>0.02</double>
              <double>0.01</double>
              <double>0.01</double>
              <double>0</double>
              <double>0</double>
            </FBiom>
            <FInert>
              <double>0.5</double>
              <double>0.7</double>
              <double>0.83</double>
              <double>0.9</double>
              <double>0.95</double>
              <double>0.99</double>
              <double>0.99</double>
            </FInert>
            <OCUnits>Total</OCUnits>
          </SoilOrganicMatter>
          <Analysis>
            <Name>Analysis</Name>
            <IncludeInDocumentation>true</IncludeInDocumentation>
            <Thickness>
              <double>100</double>
              <double>200</double>
              <double>300</double>
              <double>300</double>
              <double>300</double>
              <double>300</double>
              <double>300</double>
            </Thickness>
            <Rocks>
              <double>0</double>
              <double>0</double>
              <double>10</double>
              <double>40</double>
              <double>60</double>
              <double>70</double>
              <double>70</double>
            </Rocks>
            <Texture />
            <MunsellColour />
            <PH>
              <double>5.9</double>
              <double>5.9</double>
              <double>5.9</double>
              <double>5.9</double>
              <double>5.9</double>
              <double>5.9</double>
              <double>5.9</double>
            </PH>
            <CEC>
              <double>12.5</double>
              <double>10</double>
              <double>9</double>
              <double>5</double>
              <double>4</double>
              <double>4</double>
              <double>4</double>
            </CEC>
            <ParticleSizeSand>
              <double>15</double>
              <double>20</double>
              <double>25</double>
              <double>35</double>
              <double>40</double>
              <double>40</double>
              <double>40</double>
            </ParticleSizeSand>
            <ParticleSizeSilt>
              <double>65</double>
              <double>65</double>
              <double>63</double>
              <double>57</double>
              <double>54</double>
              <double>55</double>
              <double>55</double>
            </ParticleSizeSilt>
            <ParticleSizeClay>
              <double>20</double>
              <double>15</double>
              <double>12</double>
              <double>8</double>
              <double>6</double>
              <double>5</double>
              <double>5</double>
            </ParticleSizeClay>
            <PHUnits>Water</PHUnits>
            <BoronUnits>HotWater</BoronUnits>
          </Analysis>
          <Sample>
            <Name>Initial nitrogen</Name>
            <IncludeInDocumentation>true</IncludeInDocumentation>
            <Thickness>
              <double>100</double>
              <double>200</double>
              <double>300</double>
              <double>300</double>
              <double>300</double>
              <double>300</double>
              <double>300</double>
            </Thickness>
            <NO3>
              <double>7.619</double>
              <double>7.27</double>
              <double>3.871</double>
              <double>3.84</double>
              <double>3.81</double>
              <double>3.779</double>
              <double>3.691</double>
            </NO3>
            <NH4>
              <double>0.132</double>
              <double>0.132</double>
              <double>0.132</double>
              <double>0.132</double>
              <double>0.132</double>
              <double>0.132</double>
              <double>0.132</double>
            </NH4>
            <NO3Units>ppm</NO3Units>
            <NH4Units>ppm</NH4Units>
            <SWUnits>Volumetric</SWUnits>
            <OCUnits>Total</OCUnits>
            <PHUnits>Water</PHUnits>
          </Sample>
          <SoilNitrogen>
            <Name>SoilNitrogen</Name>
            <IncludeInDocumentation>true</IncludeInDocumentation>
            <fom_type>
              <string>default</string>
              <string>manure</string>
              <string>mucuna</string>
              <string>lablab</string>
              <string>shemp</string>
              <string>stable</string>
            </fom_type>
            <fract_carb>
              <double>0.2</double>
              <double>0.3</double>
              <double>0.54</double>
              <double>0.57</double>
              <double>0.45</double>
              <double>0</double>
            </fract_carb>
            <fract_cell>
              <double>0.7</double>
              <double>0.3</double>
              <double>0.37</double>
              <double>0.37</double>
              <double>0.47</double>
              <double>0.1</double>
            </fract_cell>
            <fract_lign>
              <double>0.1</double>
              <double>0.4</double>
              <double>0.09</double>
              <double>0.06</double>
              <double>0.08</double>
              <double>0.9</double>
            </fract_lign>
          </SoilNitrogen>
          <CERESSoilTemperature>
            <Name>CERESSoilTemperature</Name>
            <IncludeInDocumentation>true</IncludeInDocumentation>
          </CERESSoilTemperature>
          <IncludeInDocumentation>true</IncludeInDocumentation>
          <RecordNumber>0</RecordNumber>
          <SoilType>NZ_Sedimentary</SoilType>
          <LocalName>Lismore</LocalName>
          <Site>Winchmore</Site>
          <NearestTown>Ashburton</NearestTown>
          <Region>Canterbury</Region>
          <Country>New Zealand</Country>
          <NaturalVegetation />
          <Latitude>-48.48</Latitude>
          <Longitude>0</Longitude>
        </Soil>
        <IncludeInDocumentation>true</IncludeInDocumentation>
        <Area>1</Area>
        <Slope>0</Slope>
      </Zone>
      <Zone>
        <Name>P2</Name>
        <Manager>
          <Name>CentrePivot</Name>
          <IncludeInDocumentation>true</IncludeInDocumentation>
          <Script>
            <allowIrrigation>yes</allowIrrigation>
            <IrrigStart>1-sep</IrrigStart>
            <IrrigEnd>30-apr</IrrigEnd>
            <SoilDepth>500</SoilDepth>
            <CritPAWForShallow>60</CritPAWForShallow>
            <CritRainToPause>30</CritRainToPause>
            <DaysToPauseOnCritRain>3</DaysToPauseOnCritRain>
            <IrrigReturnShallow>2</IrrigReturnShallow>
            <IrrigAmtShallow>10</IrrigAmtShallow>
            <PercPAWIrrigDeficitShallow>30</PercPAWIrrigDeficitShallow>
            <IrrigEffShallow>100</IrrigEffShallow>
            <IrrigReturnDeep>4</IrrigReturnDeep>
            <IrrigAmtDeep>20</IrrigAmtDeep>
            <PercPAWIrrigDeficitDeep>25</PercPAWIrrigDeficitDeep>
            <IrrigEffDeep>100</IrrigEffDeep>
            <TodayDeficit>123.894</TodayDeficit>
            <TodayDeficit_nve>-123.894</TodayDeficit_nve>
            <IrrigDay>3</IrrigDay>
            <SoilPAW>63.65</SoilPAW>
            <IrrigDeficit>25</IrrigDeficit>
            <IrrigReturn>4</IrrigReturn>
            <IrrigAmt>20</IrrigAmt>
            <IrrigEff>100</IrrigEff>
            <Rain3>0</Rain3>
            <Days2Pause>-80</Days2Pause>
          </Script>
          <Code><![CDATA[using System;
using Models.Core;
using Models.PMF;
using Models.Soils;
using System.Xml.Serialization;
using Models.PMF;
using APSIM.Shared.Utilities;
using System.Diagnostics; // used with Debugger.Break(); to debug manager scripts
        
namespace Models
{
    [Serializable] 
    [System.Xml.Serialization.XmlInclude(typeof(Model))]
    public class Script : Model
    {
        //Communication to other modules
        [Link] ISummary summary = null;
        [Link] Irrigation irrigation;
        [Link] Clock Clock;
        [Link] Soil soil;
        [Link] Weather Met; 
        [Link(IsOptional = true)] ICrop existingCrop;
       
        //User inputs from properties tab
        [Description("Turn irrigation on?")]
        public answerTypes allowIrrigation { get; set; }
        [Description("Start of irrigation season (dd-MMM)")]
        public string IrrigStart { get; set; }
        [Description("End of irrigation season (dd-MMM)")]
        public string IrrigEnd { get; set; }
        [Description("Enter the depth to which water deficit is computed (mm)")]
        public double SoilDepth { get; set; }
        [Description("PAW below which soil is considered 'shallow' (mm)")]
        public double CritPAWForShallow { get; set; }
        [Description("Amount of rainfall over the last 3 days to cause pause to irrigator (mm)")]
        public double CritRainToPause { get; set; }
        [Description("Number of days to pause irrigator after critical rainfall (days)")]
        public double DaysToPauseOnCritRain { get; set; }

        [Description("Shallow Soils: Irrigation return period (days)")]
        public double IrrigReturnShallow { get; set; }
        [Description("Shallow Soils: Effective irrigation amount (mm)")]
        public double IrrigAmtShallow { get; set; }
        [Description("Shallow Soils: Percentage of PAW at which to irrigate (%)")]
        public double PercPAWIrrigDeficitShallow { get; set; }
        [Description("Shallow Soils: Irrigation efficiency (%)")]
        public double IrrigEffShallow { get; set; }

        [Description("Deep Soils: Irrigation return period (days)")]
        public double IrrigReturnDeep { get; set; }
        [Description("Deep Soils: Effective irrigation amount (mm)")]
        public double IrrigAmtDeep { get; set; }
        [Description("Deep Soils: Percentage of PAW at which to irrigate (%)")]
        public double PercPAWIrrigDeficitDeep { get; set; }
        [Description("Deep Soils: Irrigation efficiency (%)")]
        public double IrrigEffDeep { get; set; }

        // Outputs
        public double TodayDeficit { get; set; }
        public double TodayDeficit_nve { get; set; }
        public double IrrigDay { get; set; }
        public double SoilPAW { get; set; }
        public double IrrigDeficit { get; set; }
        public double IrrigReturn { get; set; }
        public double IrrigAmt { get; set; }
        public double IrrigEff { get; set; }
        public double Rain3 { get; set; }

        public double Days2Pause { get; set; }

        // internal use
        private DateTime StartDate;               //The date when irrigation start (in date format)
        private DateTime EndDate;                 //The date when irrigation finish (in date format)
        private double RainToday=0;
        public double[] Rain_3;

        public enum answerTypes
        {
            /// <summary>a positive answer</summary>
            yes,
            /// <summary>a negative answer</summary>
            no
        }


        [EventSubscribe("StartOfSimulation")]
        private void OnStartOfSimulation(object sender, EventArgs e)
        {
            summary.WriteMessage(this, "==================================================");
            summary.WriteMessage(this, "                CentrePivot initialising          ");
            summary.WriteMessage(this, "");

            IrrigDay = 5000;  //so will reset to 1 on first day
              StartDate = DateTime.Parse(IrrigStart);
              EndDate = DateTime.Parse(IrrigEnd);

            Rain3 = 0;
            Rain_3 = new double[4];
            Rain_3[0] = 0;
            Rain_3[1] = 0;
            Rain_3[2] = 0;

              SoilPAW = 0.0;

              double[] sw_dul = soil.DULmm;
              double[] sw_15 = soil.LL15mm;  
              double MySoilDepth = 0;
              for(int z=0;z<soil.Thickness.Length;z++) {
                  MySoilDepth+=soil.Thickness[z];
                  if (MySoilDepth<= SoilDepth) 
                      SoilPAW+=sw_dul[z] - sw_15[z];    
              }

              if(SoilPAW <= CritPAWForShallow) {      
                IrrigDeficit = PercPAWIrrigDeficitShallow / 100 * SoilPAW;
                IrrigReturn = IrrigReturnShallow;
                IrrigAmt = IrrigAmtShallow;
                IrrigEff = IrrigEffShallow ;           
                summary.WriteMessage(this, "  Soil is considered to be shallow " + CritPAWForShallow + " " + SoilPAW);
            } 
            else 
            {
                IrrigDeficit = PercPAWIrrigDeficitDeep;
                IrrigReturn = IrrigReturnDeep;
                IrrigAmt = IrrigAmtDeep;
                IrrigEff = IrrigEffDeep;
                summary.WriteMessage(this, "  Soil is considered to be deep");
            }

            summary.WriteMessage(this, "  Irrigation critical deficit (mm): " + IrrigDeficit);
            summary.WriteMessage(this, "          Irrigation return (days): " + IrrigReturn);
            summary.WriteMessage(this, "     Irrigation pumped amount (mm): " + IrrigAmt);
            summary.WriteMessage(this, "         Irrigation efficiency (%): " + IrrigEff);
            summary.WriteMessage(this, "");
            summary.WriteMessage(this, "                CentrePivot initialised");
            summary.WriteMessage(this, "==================================================");
            
        }

        [EventSubscribe("Commencing")]
        private void OnSimulationCommencing(object sender, EventArgs e)
        {
        }

       [EventSubscribe("PreparingNewWeatherData")]
        private void OnPreparingNewWeatherData(object sender, EventArgs e)
        {
            RainToday = Met.Rain; //takes note of how much rain was due to fall today        
        }

        //[EventSubscribe("DoDailyInitialisation")]
        //private void OnDoDailyInitialisation(object sender, EventArgs e) 
        //{
        //}

        [EventSubscribe("StartOfDay")]
        private void OnStartOfDay(object sender, EventArgs e)
        {
            int rain=0;

            Rain_3[2] = Rain_3[1];
            Rain_3[1] = Rain_3[0];
            Rain_3[0] = RainToday;
            Rain3 = Rain_3[0] + Rain_3[1] + Rain_3[2]; //sums the rain in the last 3 days
            if(Rain3 >= CritRainToPause)
                Days2Pause = DaysToPauseOnCritRain;
            else
                Days2Pause = Days2Pause - 1;

            double[] sw_dul = soil.DULmm;
            double[] sw_sw = soil.SWAtWaterThickness;  // ??? was MySwim.sw_dep
              double[] sw_15 = soil.LL15mm;  
              double MySoilDepth = 0;

            TodayDeficit = 0.0;
            SoilPAW = 0.0;

              for(int z=0;z<soil.Thickness.Length;z++) {
                  MySoilDepth+=soil.Thickness[z];
                  if (MySoilDepth<= SoilDepth) {
                      SoilPAW+=sw_dul[z] - sw_15[z];    
                      TodayDeficit += sw_dul[z] - Math.Min(sw_dul[z], sw_sw[z]);
                  }
              }
            TodayDeficit_nve = -1 * TodayDeficit;

            if (isBetween(Clock.Today, StartDate, EndDate)) {
                 if(SoilPAW <= CritPAWForShallow) {      
                    IrrigDeficit = PercPAWIrrigDeficitShallow / 100 * SoilPAW;
                    IrrigReturn = IrrigReturnShallow;
                    IrrigAmt = IrrigAmtShallow;
                    IrrigEff = IrrigEffShallow ;           
                } 
                else 
                {
                    IrrigDeficit = PercPAWIrrigDeficitDeep;
                    IrrigReturn = IrrigReturnDeep;
                    IrrigAmt = IrrigAmtDeep;
                    IrrigEff = IrrigEffDeep;
                }

                if(Days2Pause < 0.5) {
                    IrrigDay = IrrigDay + 1;
                    if(IrrigDay > IrrigReturn)
                        IrrigDay = 1;  // and day = 1 is when the irrigation happens                    

                    if ((TodayDeficit >= IrrigDeficit) && (allowIrrigation == answerTypes.yes)) {
                        if(IrrigDay == 1){
                            double AmountToApply = (IrrigAmt / (IrrigEff / 100.0));
                            //summary.WriteMessage(this, "Rain today was " + RainToday + ". Applying " + AmountToApply+ " mm of irrigation");
                            irrigation.Apply(AmountToApply);

                        }
                    }
                }
            }
        }

        ///Checks whether theDate is between iniDate and endDate (non-year specific)
        private bool isBetween(DateTime theDay, DateTime iniDate, DateTime endDate)
        {
            bool result = false;
            if (iniDate.DayOfYear < endDate.DayOfYear)
            {
                // period is within one year, ex: summer in the northern hemisphere
                if ((theDay.DayOfYear >= iniDate.DayOfYear) && (theDay.DayOfYear <= endDate.DayOfYear))
                    result = true;
            }
            else
            {
                // period goes over the end of the year, ex: summer in the southern hemisphere
                if ((theDay.DayOfYear >= iniDate.DayOfYear) || (theDay.DayOfYear <= endDate.DayOfYear))
                    result = true;
            }
            
            return result;
        }

    }
}
]]></Code>
        </Manager>
        <SurfaceOrganicMatter>
          <Name>SurfaceOrganicMatter</Name>
          <IncludeInDocumentation>true</IncludeInDocumentation>
          <PondActive>no</PondActive>
          <ReportAdditions>no</ReportAdditions>
          <ReportRemovals>no</ReportRemovals>
          <ResidueTypes>
            <Name>ResidueTypes</Name>
            <IncludeInDocumentation>true</IncludeInDocumentation>
            <LoadFromResource>ResidueTypes</LoadFromResource>
          </ResidueTypes>
          <TillageTypes>
            <Name>TillageTypesList</Name>
            <IncludeInDocumentation>true</IncludeInDocumentation>
            <TillageType />
          </TillageTypes>
          <Pools>
            <Pool>
              <PoolName>grass</PoolName>
              <ResidueType>grass</ResidueType>
              <Mass>500</Mass>
              <CNRatio>15</CNRatio>
              <CPRatio>NaN</CPRatio>
              <StandingFraction>0</StandingFraction>
            </Pool>
          </Pools>
          <PoolName>grass</PoolName>
          <type>grass</type>
          <mass>500</mass>
          <standing_fraction>0</standing_fraction>
          <cpr />
          <cnr>15</cnr>
          <CriticalResidueWeight>2000</CriticalResidueWeight>
          <OptimumDecompTemp>20</OptimumDecompTemp>
          <MaxCumulativeEOS>20</MaxCumulativeEOS>
          <CNRatioDecompCoeff>0.277</CNRatioDecompCoeff>
          <CNRatioDecompThreshold>25</CNRatioDecompThreshold>
          <TotalLeachRain>25</TotalLeachRain>
          <MinRainToLeach>10</MinRainToLeach>
          <CriticalMinimumOrganicC>0.004</CriticalMinimumOrganicC>
          <DefaultCPRatio>0</DefaultCPRatio>
          <DefaultStandingFraction>0</DefaultStandingFraction>
          <StandingExtinctCoeff>0.5</StandingExtinctCoeff>
          <FractionFaecesAdded>0.5</FractionFaecesAdded>
        </SurfaceOrganicMatter>
        <MicroClimate>
          <Name>MicroClimate</Name>
          <IncludeInDocumentation>true</IncludeInDocumentation>
          <a_interception>0</a_interception>
          <b_interception>1</b_interception>
          <c_interception>0</c_interception>
          <d_interception>0</d_interception>
          <soil_albedo>0.23</soil_albedo>
          <sun_angle>15</sun_angle>
          <soil_heat_flux_fraction>0.4</soil_heat_flux_fraction>
          <night_interception_fraction>0.5</night_interception_fraction>
          <refheight>2</refheight>
          <albedo>0.15</albedo>
          <emissivity>0.95999999999999974</emissivity>
          <RadIntTotal>-4.3854844207218751</RadIntTotal>
        </MicroClimate>
        <Irrigation>
          <Name>Irrigation</Name>
          <IncludeInDocumentation>true</IncludeInDocumentation>
        </Irrigation>
        <Fertiliser>
          <Name>Fertiliser</Name>
          <IncludeInDocumentation>true</IncludeInDocumentation>
        </Fertiliser>
        <SoluteManager>
          <Name>SoluteManager</Name>
          <IncludeInDocumentation>true</IncludeInDocumentation>
        </SoluteManager>
        <Report>
          <Name>Report</Name>
          <IncludeInDocumentation>true</IncludeInDocumentation>
          <ExperimentFactorNames />
          <ExperimentFactorValues />
          <VariableNames>
            <string>[Clock].Today as Date</string>
            <string>(sum([Soil].SoilNitrogen.urea) + sum([Soil].SoilNitrogen.NH4) + sum([Soil].SoilNitrogen.NO3)) as minNPaddock</string>
            <string>[Sward].HerbageGrowthWt</string>
          </VariableNames>
          <EventNames>
            <string>[Clock].EndOfDay</string>
          </EventNames>
        </Report>
        <Sward>
          <Name>Sward</Name>
          <PastureSpecies>
            <Name>Ryegrass</Name>
            <IncludeInDocumentation>true</IncludeInDocumentation>
            <MaximumNUptake>10</MaximumNUptake>
            <Albedo>0.26</Albedo>
            <Gsmax>0.011</Gsmax>
            <R50>200</R50>
            <SpeciesFamily>Grass</SpeciesFamily>
            <PhotosyntheticPathway>C3</PhotosyntheticPathway>
            <InitialShootDM>750</InitialShootDM>
            <InitialRootDM>450</InitialRootDM>
            <InitialRootDepth>750</InitialRootDepth>
            <ReferencePhotosyntheticRate>1</ReferencePhotosyntheticRate>
            <LightExtinctionCoefficient>0.5</LightExtinctionCoefficient>
            <GrowthTminimum>1</GrowthTminimum>
            <GrowthToptimum>20</GrowthToptimum>
            <GrowthTEffectExponent>1.7</GrowthTEffectExponent>
            <UseHeatStressFactor>yes</UseHeatStressFactor>
            <HeatOnsetTemperature>28</HeatOnsetTemperature>
            <HeatFullTemperature>35</HeatFullTemperature>
            <HeatRecoverySumDD>30</HeatRecoverySumDD>
            <HeatRecoveryTReference>25</HeatRecoveryTReference>
            <UseColdStressFactor>yes</UseColdStressFactor>
            <ColdOnsetTemperature>1</ColdOnsetTemperature>
            <ColdFullTemperature>-5</ColdFullTemperature>
            <ColdRecoverySumDD>25</ColdRecoverySumDD>
            <ColdRecoveryTReference>0</ColdRecoveryTReference>
            <MaintenanceRespirationCoefficient>0.03</MaintenanceRespirationCoefficient>
            <GrowthRespirationCoefficient>0.25</GrowthRespirationCoefficient>
            <RespirationTReference>20</RespirationTReference>
            <RespirationExponent>1.5</RespirationExponent>
            <NThresholdsForLeaves>
              <double>0.04</double>
              <double>0.012</double>
              <double>0.05</double>
            </NThresholdsForLeaves>
            <NThresholdsForStems>
              <double>0.02</double>
              <double>0.006</double>
              <double>0.025</double>
            </NThresholdsForStems>
            <NThresholdsForStolons>
              <double>0</double>
              <double>0</double>
              <double>0</double>
            </NThresholdsForStolons>
            <NThresholdsForRoots>
              <double>0.02</double>
              <double>0.006</double>
              <double>0.025</double>
            </NThresholdsForRoots>
            <DegreesDayForGermination>125</DegreesDayForGermination>
            <TargetShootRootRatio>4</TargetShootRootRatio>
            <MaxRootAllocation>0.25</MaxRootAllocation>
            <ShootRootGlfFactor>0.5</ShootRootGlfFactor>
            <UseReproSeasonFactor>yes</UseReproSeasonFactor>
            <ReproSeasonReferenceLatitude>41</ReproSeasonReferenceLatitude>
            <ReproSeasonTimingCoeff>0.14</ReproSeasonTimingCoeff>
            <ReproSeasonMaxAllocationIncrease>0.5</ReproSeasonMaxAllocationIncrease>
            <ReproSeasonAllocationCoeff>0.1</ReproSeasonAllocationCoeff>
            <FractionLeafMaximum>0.7</FractionLeafMaximum>
            <FractionLeafMinimum>0.7</FractionLeafMinimum>
            <FractionLeafDMThreshold>500</FractionLeafDMThreshold>
            <FractionLeafDMFactor>2000</FractionLeafDMFactor>
            <FractionLeafExponent>3</FractionLeafExponent>
            <FractionToStolon>0</FractionToStolon>
            <SpecificLeafArea>25</SpecificLeafArea>
            <SpecificRootLength>100</SpecificRootLength>
            <StolonEffectOnLAI>0</StolonEffectOnLAI>
            <ShootMaxEffectOnLAI>1000</ShootMaxEffectOnLAI>
            <MaxStemEffectOnLAI>1</MaxStemEffectOnLAI>
            <LiveLeavesPerTiller>3</LiveLeavesPerTiller>
            <TissueTurnoverRateShoot>0.05</TissueTurnoverRateShoot>
            <TissueTurnoverRateRoot>0.02</TissueTurnoverRateRoot>
            <DetachmentRateShoot>0.08</DetachmentRateShoot>
            <TurnoverTemperatureMin>2</TurnoverTemperatureMin>
            <TurnoverTemperatureRef>20</TurnoverTemperatureRef>
            <TurnoverTemperatureExponent>1</TurnoverTemperatureExponent>
            <TurnoverDroughtEffectMax>1</TurnoverDroughtEffectMax>
            <TurnoverDroughtThreshold>0.5</TurnoverDroughtThreshold>
            <TurnoverDefoliationCoefficient>0.5</TurnoverDefoliationCoefficient>
            <TurnoverDefoliationRootEffect>0.1</TurnoverDefoliationRootEffect>
            <FractionNLuxuryRemobilisable>
              <double>0.1</double>
              <double>0.1</double>
              <double>0.1</double>
            </FractionNLuxuryRemobilisable>
            <MinimumNFixation>0</MinimumNFixation>
            <MaximumNFixation>0</MaximumNFixation>
            <SoilSaturationEffectMax>0.1</SoilSaturationEffectMax>
            <MinimumWaterFreePorosity>-1</MinimumWaterFreePorosity>
            <SoilSaturationRecoveryFactor>0.25</SoilSaturationRecoveryFactor>
            <NDillutionCoefficient>0.25</NDillutionCoefficient>
            <GlfGeneric>1</GlfGeneric>
            <GlfSoilFertility>1</GlfSoilFertility>
            <PlantHeightMinimum>25</PlantHeightMinimum>
            <PlantHeightMaximum>600</PlantHeightMaximum>
            <PlantHeightMassForMax>10000</PlantHeightMassForMax>
            <PlantHeightExponent>2.8</PlantHeightExponent>
            <RootDepthMinimum>50</RootDepthMinimum>
            <RootDepthMaximum>750</RootDepthMaximum>
            <RootElongationRate>25</RootElongationRate>
            <RootDistributionDepthParam>90</RootDistributionDepthParam>
            <RootDistributionExponent>3.2</RootDistributionExponent>
            <DigestibilitiesCellWall>
              <double>0.6</double>
              <double>0.6</double>
              <double>0.6</double>
              <double>0.2</double>
            </DigestibilitiesCellWall>
            <MinimumGreenWt>100</MinimumGreenWt>
            <FractionStolonStanding>0</FractionStolonStanding>
            <PreferenceForGreenOverDead>1</PreferenceForGreenOverDead>
            <PreferenceForLeafOverStems>1</PreferenceForLeafOverStems>
            <WaterAvailableMethod>DefaultAPSIM</WaterAvailableMethod>
            <NitrogenAvailableMethod>BasicAgPasture</NitrogenAvailableMethod>
          </PastureSpecies>
          <PastureSpecies>
            <Name>WhiteClover</Name>
            <IncludeInDocumentation>true</IncludeInDocumentation>
            <MaximumNUptake>10</MaximumNUptake>
            <Albedo>0.26</Albedo>
            <Gsmax>0.011</Gsmax>
            <R50>200</R50>
            <SpeciesFamily>Legume</SpeciesFamily>
            <PhotosyntheticPathway>C3</PhotosyntheticPathway>
            <InitialShootDM>250</InitialShootDM>
            <InitialRootDM>150</InitialRootDM>
            <InitialRootDepth>350</InitialRootDepth>
            <ReferencePhotosyntheticRate>1</ReferencePhotosyntheticRate>
            <LightExtinctionCoefficient>0.8</LightExtinctionCoefficient>
            <GrowthTminimum>2</GrowthTminimum>
            <GrowthToptimum>22</GrowthToptimum>
            <GrowthTEffectExponent>1.7</GrowthTEffectExponent>
            <UseHeatStressFactor>yes</UseHeatStressFactor>
            <HeatOnsetTemperature>30</HeatOnsetTemperature>
            <HeatFullTemperature>36</HeatFullTemperature>
            <HeatRecoverySumDD>20</HeatRecoverySumDD>
            <HeatRecoveryTReference>25</HeatRecoveryTReference>
            <UseColdStressFactor>yes</UseColdStressFactor>
            <ColdOnsetTemperature>2</ColdOnsetTemperature>
            <ColdFullTemperature>-5</ColdFullTemperature>
            <ColdRecoverySumDD>30</ColdRecoverySumDD>
            <ColdRecoveryTReference>0</ColdRecoveryTReference>
            <MaintenanceRespirationCoefficient>0.04</MaintenanceRespirationCoefficient>
            <GrowthRespirationCoefficient>0.25</GrowthRespirationCoefficient>
            <RespirationTReference>20</RespirationTReference>
            <RespirationExponent>1.5</RespirationExponent>
            <NThresholdsForLeaves>
              <double>0.045</double>
              <double>0.02</double>
              <double>0.055</double>
            </NThresholdsForLeaves>
            <NThresholdsForStems>
              <double>0.0225</double>
              <double>0.01</double>
              <double>0.0275</double>
            </NThresholdsForStems>
            <NThresholdsForStolons>
              <double>0.0225</double>
              <double>0.01</double>
              <double>0.0275</double>
            </NThresholdsForStolons>
            <NThresholdsForRoots>
              <double>0.0225</double>
              <double>0.01</double>
              <double>0.0275</double>
            </NThresholdsForRoots>
            <DegreesDayForGermination>125</DegreesDayForGermination>
            <TargetShootRootRatio>4</TargetShootRootRatio>
            <MaxRootAllocation>0.25</MaxRootAllocation>
            <ShootRootGlfFactor>0.5</ShootRootGlfFactor>
            <UseReproSeasonFactor>yes</UseReproSeasonFactor>
            <ReproSeasonReferenceLatitude>41</ReproSeasonReferenceLatitude>
            <ReproSeasonTimingCoeff>0.14</ReproSeasonTimingCoeff>
            <ReproSeasonMaxAllocationIncrease>0.5</ReproSeasonMaxAllocationIncrease>
            <ReproSeasonAllocationCoeff>0.1</ReproSeasonAllocationCoeff>
            <FractionLeafMaximum>0.56</FractionLeafMaximum>
            <FractionLeafMinimum>0.28</FractionLeafMinimum>
            <FractionLeafDMThreshold>500</FractionLeafDMThreshold>
            <FractionLeafDMFactor>2000</FractionLeafDMFactor>
            <FractionLeafExponent>3</FractionLeafExponent>
            <FractionToStolon>0.2</FractionToStolon>
            <SpecificLeafArea>30</SpecificLeafArea>
            <SpecificRootLength>45</SpecificRootLength>
            <StolonEffectOnLAI>0.3</StolonEffectOnLAI>
            <ShootMaxEffectOnLAI>500</ShootMaxEffectOnLAI>
            <MaxStemEffectOnLAI>0.5</MaxStemEffectOnLAI>
            <LiveLeavesPerTiller>3</LiveLeavesPerTiller>
            <TissueTurnoverRateShoot>0.05</TissueTurnoverRateShoot>
            <TissueTurnoverRateRoot>0.02</TissueTurnoverRateRoot>
            <DetachmentRateShoot>0.11</DetachmentRateShoot>
            <TurnoverTemperatureMin>2</TurnoverTemperatureMin>
            <TurnoverTemperatureRef>20</TurnoverTemperatureRef>
            <TurnoverTemperatureExponent>1</TurnoverTemperatureExponent>
            <TurnoverDroughtEffectMax>1</TurnoverDroughtEffectMax>
            <TurnoverDroughtThreshold>0.5</TurnoverDroughtThreshold>
            <TurnoverDefoliationCoefficient>0.5</TurnoverDefoliationCoefficient>
            <TurnoverDefoliationRootEffect>0.1</TurnoverDefoliationRootEffect>
            <FractionNLuxuryRemobilisable>
              <double>0.1</double>
              <double>0.1</double>
              <double>0.1</double>
            </FractionNLuxuryRemobilisable>
            <MinimumNFixation>0.2</MinimumNFixation>
            <MaximumNFixation>0.6</MaximumNFixation>
            <SoilSaturationEffectMax>0.1</SoilSaturationEffectMax>
            <MinimumWaterFreePorosity>-1</MinimumWaterFreePorosity>
            <SoilSaturationRecoveryFactor>0.25</SoilSaturationRecoveryFactor>
            <NDillutionCoefficient>1</NDillutionCoefficient>
            <GlfGeneric>1</GlfGeneric>
            <GlfSoilFertility>1</GlfSoilFertility>
            <PlantHeightMinimum>25</PlantHeightMinimum>
            <PlantHeightMaximum>350</PlantHeightMaximum>
            <PlantHeightMassForMax>7500</PlantHeightMassForMax>
            <PlantHeightExponent>2.5</PlantHeightExponent>
            <RootDepthMinimum>30</RootDepthMinimum>
            <RootDepthMaximum>350</RootDepthMaximum>
            <RootElongationRate>25</RootElongationRate>
            <RootDistributionDepthParam>70</RootDistributionDepthParam>
            <RootDistributionExponent>2.5</RootDistributionExponent>
            <DigestibilitiesCellWall>
              <double>0.6</double>
              <double>0.6</double>
              <double>0.6</double>
              <double>0.2</double>
            </DigestibilitiesCellWall>
            <MinimumGreenWt>50</MinimumGreenWt>
            <FractionStolonStanding>0</FractionStolonStanding>
            <PreferenceForGreenOverDead>1</PreferenceForGreenOverDead>
            <PreferenceForLeafOverStems>1</PreferenceForLeafOverStems>
            <WaterAvailableMethod>DefaultAPSIM</WaterAvailableMethod>
            <NitrogenAvailableMethod>BasicAgPasture</NitrogenAvailableMethod>
          </PastureSpecies>
          <IncludeInDocumentation>true</IncludeInDocumentation>
          <ControlledBySward>yes</ControlledBySward>
          <WaterUptakeSource>species</WaterUptakeSource>
          <NUptakeSource>species</NUptakeSource>
        </Sward>
        <Soil>
          <Name>Soil</Name>
          <InitialWater>
            <Name>Initial water</Name>
            <IncludeInDocumentation>true</IncludeInDocumentation>
            <PercentMethod>FilledFromTop</PercentMethod>
            <FractionFull>0.987012987012987</FractionFull>
            <DepthWetSoil>NaN</DepthWetSoil>
          </InitialWater>
          <Water>
            <Name>Water</Name>
            <SoilCrop>
              <Name>SwardSoil</Name>
              <IncludeInDocumentation>true</IncludeInDocumentation>
              <LL>
                <double>0.15</double>
                <double>0.14</double>
                <double>0.06</double>
                <double>0.02</double>
                <double>0.01</double>
                <double>0.01</double>
                <double>0.01</double>
              </LL>
              <KL>
                <double>0.1</double>
                <double>0.1</double>
                <double>0.08</double>
                <double>0.04</double>
                <double>0.01</double>
                <double>0</double>
                <double>0</double>
              </KL>
              <XF>
                <double>1</double>
                <double>1</double>
                <double>1</double>
                <double>1</double>
                <double>1</double>
                <double>0</double>
                <double>0</double>
              </XF>
            </SoilCrop>
            <SoilCrop>
              <Name>RyegrassSoil</Name>
              <IncludeInDocumentation>true</IncludeInDocumentation>
              <LL>
                <double>0.14</double>
                <double>0.14</double>
                <double>0.03</double>
                <double>0.03</double>
                <double>0.03</double>
                <double>0.03</double>
                <double>0.03</double>
              </LL>
              <KL>
                <double>0.1</double>
                <double>0.1</double>
                <double>0.1</double>
                <double>0.02</double>
                <double>0</double>
                <double>0</double>
                <double>0</double>
              </KL>
              <XF>
                <double>1</double>
                <double>1</double>
                <double>1</double>
                <double>1</double>
                <double>0</double>
                <double>0</double>
                <double>0</double>
              </XF>
            </SoilCrop>
            <SoilCrop>
              <Name>WhiteCloverSoil</Name>
              <IncludeInDocumentation>true</IncludeInDocumentation>
              <LL>
                <double>0.14</double>
                <double>0.14</double>
                <double>0.03</double>
                <double>0.03</double>
                <double>0.03</double>
                <double>0.03</double>
                <double>0.03</double>
              </LL>
              <KL>
                <double>0.1</double>
                <double>0.1</double>
                <double>0.1</double>
                <double>0.02</double>
                <double>0</double>
                <double>0</double>
                <double>0</double>
              </KL>
              <XF>
                <double>1</double>
                <double>1</double>
                <double>1</double>
                <double>1</double>
                <double>0</double>
                <double>0</double>
                <double>0</double>
              </XF>
            </SoilCrop>
            <IncludeInDocumentation>true</IncludeInDocumentation>
            <Thickness>
              <double>150</double>
              <double>150</double>
              <double>200</double>
              <double>150</double>
              <double>250</double>
              <double>300</double>
              <double>300</double>
            </Thickness>
            <BD>
              <double>1.3</double>
              <double>1.35</double>
              <double>1</double>
              <double>0.53</double>
              <double>0.31</double>
              <double>0.3</double>
              <double>0.3</double>
            </BD>
            <AirDry>
              <double>0.05</double>
              <double>0.12</double>
              <double>0.055</double>
              <double>0.015</double>
              <double>0.01</double>
              <double>0.01</double>
              <double>0.01</double>
            </AirDry>
            <LL15>
              <double>0.15</double>
              <double>0.14</double>
              <double>0.055</double>
              <double>0.015</double>
              <double>0.01</double>
              <double>0.01</double>
              <double>0.01</double>
            </LL15>
            <DUL>
              <double>0.36</double>
              <double>0.34</double>
              <double>0.19</double>
              <double>0.065</double>
              <double>0.04</double>
              <double>0.03</double>
              <double>0.03</double>
            </DUL>
            <SAT>
              <double>0.45</double>
              <double>0.43</double>
              <double>0.25</double>
              <double>0.15</double>
              <double>0.11</double>
              <double>0.11</double>
              <double>0.11</double>
            </SAT>
            <KS>
              <double>5000</double>
              <double>2500</double>
              <double>3000</double>
              <double>10000</double>
              <double>17500</double>
              <double>20000</double>
              <double>20000</double>
            </KS>
          </Water>
          <SoilWater>
            <Name>SoilWater</Name>
            <IncludeInDocumentation>true</IncludeInDocumentation>
            <SummerDate>1-Nov</SummerDate>
            <SummerU>6</SummerU>
            <SummerCona>3.5</SummerCona>
            <WinterDate>1-apr</WinterDate>
            <WinterU>2</WinterU>
            <WinterCona>2</WinterCona>
            <DiffusConst>88</DiffusConst>
            <DiffusSlope>35</DiffusSlope>
            <Salb>0.13</Salb>
            <CN2Bare>73</CN2Bare>
            <CNRed>20</CNRed>
            <CNCov>0.8</CNCov>
            <slope>0</slope>
            <discharge_width>0</discharge_width>
            <catchment_area>0</catchment_area>
            <max_pond>0</max_pond>
            <Thickness>
              <double>100</double>
              <double>200</double>
              <double>300</double>
              <double>300</double>
              <double>300</double>
              <double>300</double>
              <double>300</double>
            </Thickness>
            <SWCON>
              <double>0.4</double>
              <double>0.5</double>
              <double>0.6</double>
              <double>0.6</double>
              <double>0.8</double>
              <double>0.8</double>
              <double>0.8</double>
            </SWCON>
            <KLAT>
              <double>0</double>
              <double>0</double>
              <double>0</double>
              <double>0</double>
              <double>0</double>
              <double>0</double>
              <double>0</double>
            </KLAT>
            <residueinterception>0</residueinterception>
          </SoilWater>
          <SoilOrganicMatter>
            <Name>SoilOrganicMatter</Name>
            <IncludeInDocumentation>true</IncludeInDocumentation>
            <RootCN>40</RootCN>
            <RootWt>1000</RootWt>
            <SoilCN>12</SoilCN>
            <EnrACoeff>7.4</EnrACoeff>
            <EnrBCoeff>0.2</EnrBCoeff>
            <Thickness>
              <double>150</double>
              <double>150</double>
              <double>200</double>
              <double>150</double>
              <double>250</double>
              <double>300</double>
              <double>300</double>
            </Thickness>
            <Depth>
              <string>0-15</string>
              <string>15-30</string>
              <string>30-50</string>
              <string>50-65</string>
              <string>65-90</string>
              <string>90-120</string>
              <string>120-150</string>
            </Depth>
            <OC>
              <double>3</double>
              <double>1</double>
              <double>0.6</double>
              <double>0.4</double>
              <double>0.25</double>
              <double>0.15</double>
              <double>0.1</double>
            </OC>
            <FBiom>
              <double>0.04</double>
              <double>0.02</double>
              <double>0.02</double>
              <double>0.01</double>
              <double>0.01</double>
              <double>0</double>
              <double>0</double>
            </FBiom>
            <FInert>
              <double>0.5</double>
              <double>0.7</double>
              <double>0.83</double>
              <double>0.9</double>
              <double>0.95</double>
              <double>0.99</double>
              <double>0.99</double>
            </FInert>
            <OCUnits>Total</OCUnits>
          </SoilOrganicMatter>
          <Analysis>
            <Name>Analysis</Name>
            <IncludeInDocumentation>true</IncludeInDocumentation>
            <Thickness>
              <double>100</double>
              <double>200</double>
              <double>300</double>
              <double>300</double>
              <double>300</double>
              <double>300</double>
              <double>300</double>
            </Thickness>
            <Rocks>
              <double>0</double>
              <double>0</double>
              <double>10</double>
              <double>40</double>
              <double>60</double>
              <double>70</double>
              <double>70</double>
            </Rocks>
            <Texture />
            <MunsellColour />
            <PH>
              <double>5.9</double>
              <double>5.9</double>
              <double>5.9</double>
              <double>5.9</double>
              <double>5.9</double>
              <double>5.9</double>
              <double>5.9</double>
            </PH>
            <CEC>
              <double>12.5</double>
              <double>10</double>
              <double>9</double>
              <double>5</double>
              <double>4</double>
              <double>4</double>
              <double>4</double>
            </CEC>
            <ParticleSizeSand>
              <double>15</double>
              <double>20</double>
              <double>25</double>
              <double>35</double>
              <double>40</double>
              <double>40</double>
              <double>40</double>
            </ParticleSizeSand>
            <ParticleSizeSilt>
              <double>65</double>
              <double>65</double>
              <double>63</double>
              <double>57</double>
              <double>54</double>
              <double>55</double>
              <double>55</double>
            </ParticleSizeSilt>
            <ParticleSizeClay>
              <double>20</double>
              <double>15</double>
              <double>12</double>
              <double>8</double>
              <double>6</double>
              <double>5</double>
              <double>5</double>
            </ParticleSizeClay>
            <PHUnits>Water</PHUnits>
            <BoronUnits>HotWater</BoronUnits>
          </Analysis>
          <Sample>
            <Name>Initial nitrogen</Name>
            <IncludeInDocumentation>true</IncludeInDocumentation>
            <Thickness>
              <double>100</double>
              <double>200</double>
              <double>300</double>
              <double>300</double>
              <double>300</double>
              <double>300</double>
              <double>300</double>
            </Thickness>
            <NO3>
              <double>7.619</double>
              <double>7.27</double>
              <double>3.871</double>
              <double>3.84</double>
              <double>3.81</double>
              <double>3.779</double>
              <double>3.691</double>
            </NO3>
            <NH4>
              <double>0.132</double>
              <double>0.132</double>
              <double>0.132</double>
              <double>0.132</double>
              <double>0.132</double>
              <double>0.132</double>
              <double>0.132</double>
            </NH4>
            <NO3Units>ppm</NO3Units>
            <NH4Units>ppm</NH4Units>
            <SWUnits>Volumetric</SWUnits>
            <OCUnits>Total</OCUnits>
            <PHUnits>Water</PHUnits>
          </Sample>
          <SoilNitrogen>
            <Name>SoilNitrogen</Name>
            <IncludeInDocumentation>true</IncludeInDocumentation>
            <fom_type>
              <string>default</string>
              <string>manure</string>
              <string>mucuna</string>
              <string>lablab</string>
              <string>shemp</string>
              <string>stable</string>
            </fom_type>
            <fract_carb>
              <double>0.2</double>
              <double>0.3</double>
              <double>0.54</double>
              <double>0.57</double>
              <double>0.45</double>
              <double>0</double>
            </fract_carb>
            <fract_cell>
              <double>0.7</double>
              <double>0.3</double>
              <double>0.37</double>
              <double>0.37</double>
              <double>0.47</double>
              <double>0.1</double>
            </fract_cell>
            <fract_lign>
              <double>0.1</double>
              <double>0.4</double>
              <double>0.09</double>
              <double>0.06</double>
              <double>0.08</double>
              <double>0.9</double>
            </fract_lign>
          </SoilNitrogen>
          <CERESSoilTemperature>
            <Name>CERESSoilTemperature</Name>
            <IncludeInDocumentation>true</IncludeInDocumentation>
          </CERESSoilTemperature>
          <IncludeInDocumentation>true</IncludeInDocumentation>
          <RecordNumber>0</RecordNumber>
          <SoilType>NZ_Sedimentary</SoilType>
          <LocalName>Lismore</LocalName>
          <Site>Winchmore</Site>
          <NearestTown>Ashburton</NearestTown>
          <Region>Canterbury</Region>
          <Country>New Zealand</Country>
          <NaturalVegetation />
          <Latitude>-48.48</Latitude>
          <Longitude>0</Longitude>
        </Soil>
        <IncludeInDocumentation>true</IncludeInDocumentation>
        <Area>1</Area>
        <Slope>0</Slope>
      </Zone>
      <Zone>
        <Name>P3</Name>
        <Manager>
          <Name>CentrePivot</Name>
          <IncludeInDocumentation>true</IncludeInDocumentation>
          <Script>
            <allowIrrigation>yes</allowIrrigation>
            <IrrigStart>1-sep</IrrigStart>
            <IrrigEnd>30-apr</IrrigEnd>
            <SoilDepth>500</SoilDepth>
            <CritPAWForShallow>60</CritPAWForShallow>
            <CritRainToPause>30</CritRainToPause>
            <DaysToPauseOnCritRain>3</DaysToPauseOnCritRain>
            <IrrigReturnShallow>2</IrrigReturnShallow>
            <IrrigAmtShallow>10</IrrigAmtShallow>
            <PercPAWIrrigDeficitShallow>30</PercPAWIrrigDeficitShallow>
            <IrrigEffShallow>100</IrrigEffShallow>
            <IrrigReturnDeep>4</IrrigReturnDeep>
            <IrrigAmtDeep>20</IrrigAmtDeep>
            <PercPAWIrrigDeficitDeep>25</PercPAWIrrigDeficitDeep>
            <IrrigEffDeep>100</IrrigEffDeep>
            <TodayDeficit>123.894</TodayDeficit>
            <TodayDeficit_nve>-123.894</TodayDeficit_nve>
            <IrrigDay>3</IrrigDay>
            <SoilPAW>63.65</SoilPAW>
            <IrrigDeficit>25</IrrigDeficit>
            <IrrigReturn>4</IrrigReturn>
            <IrrigAmt>20</IrrigAmt>
            <IrrigEff>100</IrrigEff>
            <Rain3>0</Rain3>
            <Days2Pause>-80</Days2Pause>
          </Script>
          <Code><![CDATA[using System;
using Models.Core;
using Models.PMF;
using Models.Soils;
using System.Xml.Serialization;
using Models.PMF;
using APSIM.Shared.Utilities;
using System.Diagnostics; // used with Debugger.Break(); to debug manager scripts
        
namespace Models
{
    [Serializable] 
    [System.Xml.Serialization.XmlInclude(typeof(Model))]
    public class Script : Model
    {
        //Communication to other modules
        [Link] ISummary summary = null;
        [Link] Irrigation irrigation;
        [Link] Clock Clock;
        [Link] Soil soil;
        [Link] Weather Met; 
        [Link(IsOptional = true)] ICrop existingCrop;
       
        //User inputs from properties tab
        [Description("Turn irrigation on?")]
        public answerTypes allowIrrigation { get; set; }
        [Description("Start of irrigation season (dd-MMM)")]
        public string IrrigStart { get; set; }
        [Description("End of irrigation season (dd-MMM)")]
        public string IrrigEnd { get; set; }
        [Description("Enter the depth to which water deficit is computed (mm)")]
        public double SoilDepth { get; set; }
        [Description("PAW below which soil is considered 'shallow' (mm)")]
        public double CritPAWForShallow { get; set; }
        [Description("Amount of rainfall over the last 3 days to cause pause to irrigator (mm)")]
        public double CritRainToPause { get; set; }
        [Description("Number of days to pause irrigator after critical rainfall (days)")]
        public double DaysToPauseOnCritRain { get; set; }

        [Description("Shallow Soils: Irrigation return period (days)")]
        public double IrrigReturnShallow { get; set; }
        [Description("Shallow Soils: Effective irrigation amount (mm)")]
        public double IrrigAmtShallow { get; set; }
        [Description("Shallow Soils: Percentage of PAW at which to irrigate (%)")]
        public double PercPAWIrrigDeficitShallow { get; set; }
        [Description("Shallow Soils: Irrigation efficiency (%)")]
        public double IrrigEffShallow { get; set; }

        [Description("Deep Soils: Irrigation return period (days)")]
        public double IrrigReturnDeep { get; set; }
        [Description("Deep Soils: Effective irrigation amount (mm)")]
        public double IrrigAmtDeep { get; set; }
        [Description("Deep Soils: Percentage of PAW at which to irrigate (%)")]
        public double PercPAWIrrigDeficitDeep { get; set; }
        [Description("Deep Soils: Irrigation efficiency (%)")]
        public double IrrigEffDeep { get; set; }

        // Outputs
        public double TodayDeficit { get; set; }
        public double TodayDeficit_nve { get; set; }
        public double IrrigDay { get; set; }
        public double SoilPAW { get; set; }
        public double IrrigDeficit { get; set; }
        public double IrrigReturn { get; set; }
        public double IrrigAmt { get; set; }
        public double IrrigEff { get; set; }
        public double Rain3 { get; set; }

        public double Days2Pause { get; set; }

        // internal use
        private DateTime StartDate;               //The date when irrigation start (in date format)
        private DateTime EndDate;                 //The date when irrigation finish (in date format)
        private double RainToday=0;
        public double[] Rain_3;

        public enum answerTypes
        {
            /// <summary>a positive answer</summary>
            yes,
            /// <summary>a negative answer</summary>
            no
        }


        [EventSubscribe("StartOfSimulation")]
        private void OnStartOfSimulation(object sender, EventArgs e)
        {
            summary.WriteMessage(this, "==================================================");
            summary.WriteMessage(this, "                CentrePivot initialising          ");
            summary.WriteMessage(this, "");

            IrrigDay = 5000;  //so will reset to 1 on first day
              StartDate = DateTime.Parse(IrrigStart);
              EndDate = DateTime.Parse(IrrigEnd);

            Rain3 = 0;
            Rain_3 = new double[4];
            Rain_3[0] = 0;
            Rain_3[1] = 0;
            Rain_3[2] = 0;

              SoilPAW = 0.0;

              double[] sw_dul = soil.DULmm;
              double[] sw_15 = soil.LL15mm;  
              double MySoilDepth = 0;
              for(int z=0;z<soil.Thickness.Length;z++) {
                  MySoilDepth+=soil.Thickness[z];
                  if (MySoilDepth<= SoilDepth) 
                      SoilPAW+=sw_dul[z] - sw_15[z];    
              }

              if(SoilPAW <= CritPAWForShallow) {      
                IrrigDeficit = PercPAWIrrigDeficitShallow / 100 * SoilPAW;
                IrrigReturn = IrrigReturnShallow;
                IrrigAmt = IrrigAmtShallow;
                IrrigEff = IrrigEffShallow ;           
                summary.WriteMessage(this, "  Soil is considered to be shallow " + CritPAWForShallow + " " + SoilPAW);
            } 
            else 
            {
                IrrigDeficit = PercPAWIrrigDeficitDeep;
                IrrigReturn = IrrigReturnDeep;
                IrrigAmt = IrrigAmtDeep;
                IrrigEff = IrrigEffDeep;
                summary.WriteMessage(this, "  Soil is considered to be deep");
            }

            summary.WriteMessage(this, "  Irrigation critical deficit (mm): " + IrrigDeficit);
            summary.WriteMessage(this, "          Irrigation return (days): " + IrrigReturn);
            summary.WriteMessage(this, "     Irrigation pumped amount (mm): " + IrrigAmt);
            summary.WriteMessage(this, "         Irrigation efficiency (%): " + IrrigEff);
            summary.WriteMessage(this, "");
            summary.WriteMessage(this, "                CentrePivot initialised");
            summary.WriteMessage(this, "==================================================");
            
        }

        [EventSubscribe("Commencing")]
        private void OnSimulationCommencing(object sender, EventArgs e)
        {
        }

       [EventSubscribe("PreparingNewWeatherData")]
        private void OnPreparingNewWeatherData(object sender, EventArgs e)
        {
            RainToday = Met.Rain; //takes note of how much rain was due to fall today        
        }

        //[EventSubscribe("DoDailyInitialisation")]
        //private void OnDoDailyInitialisation(object sender, EventArgs e) 
        //{
        //}

        [EventSubscribe("StartOfDay")]
        private void OnStartOfDay(object sender, EventArgs e)
        {
            int rain=0;

            Rain_3[2] = Rain_3[1];
            Rain_3[1] = Rain_3[0];
            Rain_3[0] = RainToday;
            Rain3 = Rain_3[0] + Rain_3[1] + Rain_3[2]; //sums the rain in the last 3 days
            if(Rain3 >= CritRainToPause)
                Days2Pause = DaysToPauseOnCritRain;
            else
                Days2Pause = Days2Pause - 1;

            double[] sw_dul = soil.DULmm;
            double[] sw_sw = soil.SWAtWaterThickness;  // ??? was MySwim.sw_dep
              double[] sw_15 = soil.LL15mm;  
              double MySoilDepth = 0;

            TodayDeficit = 0.0;
            SoilPAW = 0.0;

              for(int z=0;z<soil.Thickness.Length;z++) {
                  MySoilDepth+=soil.Thickness[z];
                  if (MySoilDepth<= SoilDepth) {
                      SoilPAW+=sw_dul[z] - sw_15[z];    
                      TodayDeficit += sw_dul[z] - Math.Min(sw_dul[z], sw_sw[z]);
                  }
              }
            TodayDeficit_nve = -1 * TodayDeficit;

            if (isBetween(Clock.Today, StartDate, EndDate)) {
                 if(SoilPAW <= CritPAWForShallow) {      
                    IrrigDeficit = PercPAWIrrigDeficitShallow / 100 * SoilPAW;
                    IrrigReturn = IrrigReturnShallow;
                    IrrigAmt = IrrigAmtShallow;
                    IrrigEff = IrrigEffShallow ;           
                } 
                else 
                {
                    IrrigDeficit = PercPAWIrrigDeficitDeep;
                    IrrigReturn = IrrigReturnDeep;
                    IrrigAmt = IrrigAmtDeep;
                    IrrigEff = IrrigEffDeep;
                }

                if(Days2Pause < 0.5) {
                    IrrigDay = IrrigDay + 1;
                    if(IrrigDay > IrrigReturn)
                        IrrigDay = 1;  // and day = 1 is when the irrigation happens                    

                    if ((TodayDeficit >= IrrigDeficit) && (allowIrrigation == answerTypes.yes)) {
                        if(IrrigDay == 1){
                            double AmountToApply = (IrrigAmt / (IrrigEff / 100.0));
                            //summary.WriteMessage(this, "Rain today was " + RainToday + ". Applying " + AmountToApply+ " mm of irrigation");
                            irrigation.Apply(AmountToApply);

                        }
                    }
                }
            }
        }

        ///Checks whether theDate is between iniDate and endDate (non-year specific)
        private bool isBetween(DateTime theDay, DateTime iniDate, DateTime endDate)
        {
            bool result = false;
            if (iniDate.DayOfYear < endDate.DayOfYear)
            {
                // period is within one year, ex: summer in the northern hemisphere
                if ((theDay.DayOfYear >= iniDate.DayOfYear) && (theDay.DayOfYear <= endDate.DayOfYear))
                    result = true;
            }
            else
            {
                // period goes over the end of the year, ex: summer in the southern hemisphere
                if ((theDay.DayOfYear >= iniDate.DayOfYear) || (theDay.DayOfYear <= endDate.DayOfYear))
                    result = true;
            }
            
            return result;
        }

    }
}
]]></Code>
        </Manager>
        <SurfaceOrganicMatter>
          <Name>SurfaceOrganicMatter</Name>
          <IncludeInDocumentation>true</IncludeInDocumentation>
          <PondActive>no</PondActive>
          <ReportAdditions>no</ReportAdditions>
          <ReportRemovals>no</ReportRemovals>
          <ResidueTypes>
            <Name>ResidueTypes</Name>
            <IncludeInDocumentation>true</IncludeInDocumentation>
            <LoadFromResource>ResidueTypes</LoadFromResource>
          </ResidueTypes>
          <TillageTypes>
            <Name>TillageTypesList</Name>
            <IncludeInDocumentation>true</IncludeInDocumentation>
            <TillageType />
          </TillageTypes>
          <Pools>
            <Pool>
              <PoolName>grass</PoolName>
              <ResidueType>grass</ResidueType>
              <Mass>500</Mass>
              <CNRatio>15</CNRatio>
              <CPRatio>NaN</CPRatio>
              <StandingFraction>0</StandingFraction>
            </Pool>
          </Pools>
          <PoolName>grass</PoolName>
          <type>grass</type>
          <mass>500</mass>
          <standing_fraction>0</standing_fraction>
          <cpr />
          <cnr>15</cnr>
          <CriticalResidueWeight>2000</CriticalResidueWeight>
          <OptimumDecompTemp>20</OptimumDecompTemp>
          <MaxCumulativeEOS>20</MaxCumulativeEOS>
          <CNRatioDecompCoeff>0.277</CNRatioDecompCoeff>
          <CNRatioDecompThreshold>25</CNRatioDecompThreshold>
          <TotalLeachRain>25</TotalLeachRain>
          <MinRainToLeach>10</MinRainToLeach>
          <CriticalMinimumOrganicC>0.004</CriticalMinimumOrganicC>
          <DefaultCPRatio>0</DefaultCPRatio>
          <DefaultStandingFraction>0</DefaultStandingFraction>
          <StandingExtinctCoeff>0.5</StandingExtinctCoeff>
          <FractionFaecesAdded>0.5</FractionFaecesAdded>
        </SurfaceOrganicMatter>
        <MicroClimate>
          <Name>MicroClimate</Name>
          <IncludeInDocumentation>true</IncludeInDocumentation>
          <a_interception>0</a_interception>
          <b_interception>1</b_interception>
          <c_interception>0</c_interception>
          <d_interception>0</d_interception>
          <soil_albedo>0.23</soil_albedo>
          <sun_angle>15</sun_angle>
          <soil_heat_flux_fraction>0.4</soil_heat_flux_fraction>
          <night_interception_fraction>0.5</night_interception_fraction>
          <refheight>2</refheight>
          <albedo>0.15</albedo>
          <emissivity>0.95999999999999974</emissivity>
          <RadIntTotal>-4.3854844207218751</RadIntTotal>
        </MicroClimate>
        <Irrigation>
          <Name>Irrigation</Name>
          <IncludeInDocumentation>true</IncludeInDocumentation>
        </Irrigation>
        <Fertiliser>
          <Name>Fertiliser</Name>
          <IncludeInDocumentation>true</IncludeInDocumentation>
        </Fertiliser>
        <SoluteManager>
          <Name>SoluteManager</Name>
          <IncludeInDocumentation>true</IncludeInDocumentation>
        </SoluteManager>
        <Report>
          <Name>Report</Name>
          <IncludeInDocumentation>true</IncludeInDocumentation>
          <ExperimentFactorNames />
          <ExperimentFactorValues />
          <VariableNames>
            <string>[Clock].Today as Date</string>
            <string>(sum([Soil].SoilNitrogen.urea) + sum([Soil].SoilNitrogen.NH4) + sum([Soil].SoilNitrogen.NO3)) as minNPaddock</string>
            <string>[Sward].HerbageGrowthWt</string>
          </VariableNames>
          <EventNames>
            <string>[Clock].EndOfDay</string>
          </EventNames>
        </Report>
        <Sward>
          <Name>Sward</Name>
          <PastureSpecies>
            <Name>Ryegrass</Name>
            <IncludeInDocumentation>true</IncludeInDocumentation>
            <MaximumNUptake>10</MaximumNUptake>
            <Albedo>0.26</Albedo>
            <Gsmax>0.011</Gsmax>
            <R50>200</R50>
            <SpeciesFamily>Grass</SpeciesFamily>
            <PhotosyntheticPathway>C3</PhotosyntheticPathway>
            <InitialShootDM>750</InitialShootDM>
            <InitialRootDM>450</InitialRootDM>
            <InitialRootDepth>750</InitialRootDepth>
            <ReferencePhotosyntheticRate>1</ReferencePhotosyntheticRate>
            <LightExtinctionCoefficient>0.5</LightExtinctionCoefficient>
            <GrowthTminimum>1</GrowthTminimum>
            <GrowthToptimum>20</GrowthToptimum>
            <GrowthTEffectExponent>1.7</GrowthTEffectExponent>
            <UseHeatStressFactor>yes</UseHeatStressFactor>
            <HeatOnsetTemperature>28</HeatOnsetTemperature>
            <HeatFullTemperature>35</HeatFullTemperature>
            <HeatRecoverySumDD>30</HeatRecoverySumDD>
            <HeatRecoveryTReference>25</HeatRecoveryTReference>
            <UseColdStressFactor>yes</UseColdStressFactor>
            <ColdOnsetTemperature>1</ColdOnsetTemperature>
            <ColdFullTemperature>-5</ColdFullTemperature>
            <ColdRecoverySumDD>25</ColdRecoverySumDD>
            <ColdRecoveryTReference>0</ColdRecoveryTReference>
            <MaintenanceRespirationCoefficient>0.03</MaintenanceRespirationCoefficient>
            <GrowthRespirationCoefficient>0.25</GrowthRespirationCoefficient>
            <RespirationTReference>20</RespirationTReference>
            <RespirationExponent>1.5</RespirationExponent>
            <NThresholdsForLeaves>
              <double>0.04</double>
              <double>0.012</double>
              <double>0.05</double>
            </NThresholdsForLeaves>
            <NThresholdsForStems>
              <double>0.02</double>
              <double>0.006</double>
              <double>0.025</double>
            </NThresholdsForStems>
            <NThresholdsForStolons>
              <double>0</double>
              <double>0</double>
              <double>0</double>
            </NThresholdsForStolons>
            <NThresholdsForRoots>
              <double>0.02</double>
              <double>0.006</double>
              <double>0.025</double>
            </NThresholdsForRoots>
            <DegreesDayForGermination>125</DegreesDayForGermination>
            <TargetShootRootRatio>4</TargetShootRootRatio>
            <MaxRootAllocation>0.25</MaxRootAllocation>
            <ShootRootGlfFactor>0.5</ShootRootGlfFactor>
            <UseReproSeasonFactor>yes</UseReproSeasonFactor>
            <ReproSeasonReferenceLatitude>41</ReproSeasonReferenceLatitude>
            <ReproSeasonTimingCoeff>0.14</ReproSeasonTimingCoeff>
            <ReproSeasonMaxAllocationIncrease>0.5</ReproSeasonMaxAllocationIncrease>
            <ReproSeasonAllocationCoeff>0.1</ReproSeasonAllocationCoeff>
            <FractionLeafMaximum>0.7</FractionLeafMaximum>
            <FractionLeafMinimum>0.7</FractionLeafMinimum>
            <FractionLeafDMThreshold>500</FractionLeafDMThreshold>
            <FractionLeafDMFactor>2000</FractionLeafDMFactor>
            <FractionLeafExponent>3</FractionLeafExponent>
            <FractionToStolon>0</FractionToStolon>
            <SpecificLeafArea>25</SpecificLeafArea>
            <SpecificRootLength>100</SpecificRootLength>
            <StolonEffectOnLAI>0</StolonEffectOnLAI>
            <ShootMaxEffectOnLAI>1000</ShootMaxEffectOnLAI>
            <MaxStemEffectOnLAI>1</MaxStemEffectOnLAI>
            <LiveLeavesPerTiller>3</LiveLeavesPerTiller>
            <TissueTurnoverRateShoot>0.05</TissueTurnoverRateShoot>
            <TissueTurnoverRateRoot>0.02</TissueTurnoverRateRoot>
            <DetachmentRateShoot>0.08</DetachmentRateShoot>
            <TurnoverTemperatureMin>2</TurnoverTemperatureMin>
            <TurnoverTemperatureRef>20</TurnoverTemperatureRef>
            <TurnoverTemperatureExponent>1</TurnoverTemperatureExponent>
            <TurnoverDroughtEffectMax>1</TurnoverDroughtEffectMax>
            <TurnoverDroughtThreshold>0.5</TurnoverDroughtThreshold>
            <TurnoverDefoliationCoefficient>0.5</TurnoverDefoliationCoefficient>
            <TurnoverDefoliationRootEffect>0.1</TurnoverDefoliationRootEffect>
            <FractionNLuxuryRemobilisable>
              <double>0.1</double>
              <double>0.1</double>
              <double>0.1</double>
            </FractionNLuxuryRemobilisable>
            <MinimumNFixation>0</MinimumNFixation>
            <MaximumNFixation>0</MaximumNFixation>
            <SoilSaturationEffectMax>0.1</SoilSaturationEffectMax>
            <MinimumWaterFreePorosity>-1</MinimumWaterFreePorosity>
            <SoilSaturationRecoveryFactor>0.25</SoilSaturationRecoveryFactor>
            <NDillutionCoefficient>0.25</NDillutionCoefficient>
            <GlfGeneric>1</GlfGeneric>
            <GlfSoilFertility>1</GlfSoilFertility>
            <PlantHeightMinimum>25</PlantHeightMinimum>
            <PlantHeightMaximum>600</PlantHeightMaximum>
            <PlantHeightMassForMax>10000</PlantHeightMassForMax>
            <PlantHeightExponent>2.8</PlantHeightExponent>
            <RootDepthMinimum>50</RootDepthMinimum>
            <RootDepthMaximum>750</RootDepthMaximum>
            <RootElongationRate>25</RootElongationRate>
            <RootDistributionDepthParam>90</RootDistributionDepthParam>
            <RootDistributionExponent>3.2</RootDistributionExponent>
            <DigestibilitiesCellWall>
              <double>0.6</double>
              <double>0.6</double>
              <double>0.6</double>
              <double>0.2</double>
            </DigestibilitiesCellWall>
            <MinimumGreenWt>100</MinimumGreenWt>
            <FractionStolonStanding>0</FractionStolonStanding>
            <PreferenceForGreenOverDead>1</PreferenceForGreenOverDead>
            <PreferenceForLeafOverStems>1</PreferenceForLeafOverStems>
            <WaterAvailableMethod>DefaultAPSIM</WaterAvailableMethod>
            <NitrogenAvailableMethod>BasicAgPasture</NitrogenAvailableMethod>
          </PastureSpecies>
          <PastureSpecies>
            <Name>WhiteClover</Name>
            <IncludeInDocumentation>true</IncludeInDocumentation>
            <MaximumNUptake>10</MaximumNUptake>
            <Albedo>0.26</Albedo>
            <Gsmax>0.011</Gsmax>
            <R50>200</R50>
            <SpeciesFamily>Legume</SpeciesFamily>
            <PhotosyntheticPathway>C3</PhotosyntheticPathway>
            <InitialShootDM>250</InitialShootDM>
            <InitialRootDM>150</InitialRootDM>
            <InitialRootDepth>350</InitialRootDepth>
            <ReferencePhotosyntheticRate>1</ReferencePhotosyntheticRate>
            <LightExtinctionCoefficient>0.8</LightExtinctionCoefficient>
            <GrowthTminimum>2</GrowthTminimum>
            <GrowthToptimum>22</GrowthToptimum>
            <GrowthTEffectExponent>1.7</GrowthTEffectExponent>
            <UseHeatStressFactor>yes</UseHeatStressFactor>
            <HeatOnsetTemperature>30</HeatOnsetTemperature>
            <HeatFullTemperature>36</HeatFullTemperature>
            <HeatRecoverySumDD>20</HeatRecoverySumDD>
            <HeatRecoveryTReference>25</HeatRecoveryTReference>
            <UseColdStressFactor>yes</UseColdStressFactor>
            <ColdOnsetTemperature>2</ColdOnsetTemperature>
            <ColdFullTemperature>-5</ColdFullTemperature>
            <ColdRecoverySumDD>30</ColdRecoverySumDD>
            <ColdRecoveryTReference>0</ColdRecoveryTReference>
            <MaintenanceRespirationCoefficient>0.04</MaintenanceRespirationCoefficient>
            <GrowthRespirationCoefficient>0.25</GrowthRespirationCoefficient>
            <RespirationTReference>20</RespirationTReference>
            <RespirationExponent>1.5</RespirationExponent>
            <NThresholdsForLeaves>
              <double>0.045</double>
              <double>0.02</double>
              <double>0.055</double>
            </NThresholdsForLeaves>
            <NThresholdsForStems>
              <double>0.0225</double>
              <double>0.01</double>
              <double>0.0275</double>
            </NThresholdsForStems>
            <NThresholdsForStolons>
              <double>0.0225</double>
              <double>0.01</double>
              <double>0.0275</double>
            </NThresholdsForStolons>
            <NThresholdsForRoots>
              <double>0.0225</double>
              <double>0.01</double>
              <double>0.0275</double>
            </NThresholdsForRoots>
            <DegreesDayForGermination>125</DegreesDayForGermination>
            <TargetShootRootRatio>4</TargetShootRootRatio>
            <MaxRootAllocation>0.25</MaxRootAllocation>
            <ShootRootGlfFactor>0.5</ShootRootGlfFactor>
            <UseReproSeasonFactor>yes</UseReproSeasonFactor>
            <ReproSeasonReferenceLatitude>41</ReproSeasonReferenceLatitude>
            <ReproSeasonTimingCoeff>0.14</ReproSeasonTimingCoeff>
            <ReproSeasonMaxAllocationIncrease>0.5</ReproSeasonMaxAllocationIncrease>
            <ReproSeasonAllocationCoeff>0.1</ReproSeasonAllocationCoeff>
            <FractionLeafMaximum>0.56</FractionLeafMaximum>
            <FractionLeafMinimum>0.28</FractionLeafMinimum>
            <FractionLeafDMThreshold>500</FractionLeafDMThreshold>
            <FractionLeafDMFactor>2000</FractionLeafDMFactor>
            <FractionLeafExponent>3</FractionLeafExponent>
            <FractionToStolon>0.2</FractionToStolon>
            <SpecificLeafArea>30</SpecificLeafArea>
            <SpecificRootLength>45</SpecificRootLength>
            <StolonEffectOnLAI>0.3</StolonEffectOnLAI>
            <ShootMaxEffectOnLAI>500</ShootMaxEffectOnLAI>
            <MaxStemEffectOnLAI>0.5</MaxStemEffectOnLAI>
            <LiveLeavesPerTiller>3</LiveLeavesPerTiller>
            <TissueTurnoverRateShoot>0.05</TissueTurnoverRateShoot>
            <TissueTurnoverRateRoot>0.02</TissueTurnoverRateRoot>
            <DetachmentRateShoot>0.11</DetachmentRateShoot>
            <TurnoverTemperatureMin>2</TurnoverTemperatureMin>
            <TurnoverTemperatureRef>20</TurnoverTemperatureRef>
            <TurnoverTemperatureExponent>1</TurnoverTemperatureExponent>
            <TurnoverDroughtEffectMax>1</TurnoverDroughtEffectMax>
            <TurnoverDroughtThreshold>0.5</TurnoverDroughtThreshold>
            <TurnoverDefoliationCoefficient>0.5</TurnoverDefoliationCoefficient>
            <TurnoverDefoliationRootEffect>0.1</TurnoverDefoliationRootEffect>
            <FractionNLuxuryRemobilisable>
              <double>0.1</double>
              <double>0.1</double>
              <double>0.1</double>
            </FractionNLuxuryRemobilisable>
            <MinimumNFixation>0.2</MinimumNFixation>
            <MaximumNFixation>0.6</MaximumNFixation>
            <SoilSaturationEffectMax>0.1</SoilSaturationEffectMax>
            <MinimumWaterFreePorosity>-1</MinimumWaterFreePorosity>
            <SoilSaturationRecoveryFactor>0.25</SoilSaturationRecoveryFactor>
            <NDillutionCoefficient>1</NDillutionCoefficient>
            <GlfGeneric>1</GlfGeneric>
            <GlfSoilFertility>1</GlfSoilFertility>
            <PlantHeightMinimum>25</PlantHeightMinimum>
            <PlantHeightMaximum>350</PlantHeightMaximum>
            <PlantHeightMassForMax>7500</PlantHeightMassForMax>
            <PlantHeightExponent>2.5</PlantHeightExponent>
            <RootDepthMinimum>30</RootDepthMinimum>
            <RootDepthMaximum>350</RootDepthMaximum>
            <RootElongationRate>25</RootElongationRate>
            <RootDistributionDepthParam>70</RootDistributionDepthParam>
            <RootDistributionExponent>2.5</RootDistributionExponent>
            <DigestibilitiesCellWall>
              <double>0.6</double>
              <double>0.6</double>
              <double>0.6</double>
              <double>0.2</double>
            </DigestibilitiesCellWall>
            <MinimumGreenWt>50</MinimumGreenWt>
            <FractionStolonStanding>0</FractionStolonStanding>
            <PreferenceForGreenOverDead>1</PreferenceForGreenOverDead>
            <PreferenceForLeafOverStems>1</PreferenceForLeafOverStems>
            <WaterAvailableMethod>DefaultAPSIM</WaterAvailableMethod>
            <NitrogenAvailableMethod>BasicAgPasture</NitrogenAvailableMethod>
          </PastureSpecies>
          <IncludeInDocumentation>true</IncludeInDocumentation>
          <ControlledBySward>yes</ControlledBySward>
          <WaterUptakeSource>species</WaterUptakeSource>
          <NUptakeSource>species</NUptakeSource>
        </Sward>
        <Soil>
          <Name>Soil</Name>
          <InitialWater>
            <Name>Initial water</Name>
            <IncludeInDocumentation>true</IncludeInDocumentation>
            <PercentMethod>FilledFromTop</PercentMethod>
            <FractionFull>0.987012987012987</FractionFull>
            <DepthWetSoil>NaN</DepthWetSoil>
          </InitialWater>
          <Water>
            <Name>Water</Name>
            <SoilCrop>
              <Name>SwardSoil</Name>
              <IncludeInDocumentation>true</IncludeInDocumentation>
              <LL>
                <double>0.15</double>
                <double>0.14</double>
                <double>0.06</double>
                <double>0.02</double>
                <double>0.01</double>
                <double>0.01</double>
                <double>0.01</double>
              </LL>
              <KL>
                <double>0.1</double>
                <double>0.1</double>
                <double>0.08</double>
                <double>0.04</double>
                <double>0.01</double>
                <double>0</double>
                <double>0</double>
              </KL>
              <XF>
                <double>1</double>
                <double>1</double>
                <double>1</double>
                <double>1</double>
                <double>1</double>
                <double>0</double>
                <double>0</double>
              </XF>
            </SoilCrop>
            <SoilCrop>
              <Name>RyegrassSoil</Name>
              <IncludeInDocumentation>true</IncludeInDocumentation>
              <LL>
                <double>0.14</double>
                <double>0.14</double>
                <double>0.03</double>
                <double>0.03</double>
                <double>0.03</double>
                <double>0.03</double>
                <double>0.03</double>
              </LL>
              <KL>
                <double>0.1</double>
                <double>0.1</double>
                <double>0.1</double>
                <double>0.02</double>
                <double>0</double>
                <double>0</double>
                <double>0</double>
              </KL>
              <XF>
                <double>1</double>
                <double>1</double>
                <double>1</double>
                <double>1</double>
                <double>0</double>
                <double>0</double>
                <double>0</double>
              </XF>
            </SoilCrop>
            <SoilCrop>
              <Name>WhiteCloverSoil</Name>
              <IncludeInDocumentation>true</IncludeInDocumentation>
              <LL>
                <double>0.14</double>
                <double>0.14</double>
                <double>0.03</double>
                <double>0.03</double>
                <double>0.03</double>
                <double>0.03</double>
                <double>0.03</double>
              </LL>
              <KL>
                <double>0.1</double>
                <double>0.1</double>
                <double>0.1</double>
                <double>0.02</double>
                <double>0</double>
                <double>0</double>
                <double>0</double>
              </KL>
              <XF>
                <double>1</double>
                <double>1</double>
                <double>1</double>
                <double>1</double>
                <double>0</double>
                <double>0</double>
                <double>0</double>
              </XF>
            </SoilCrop>
            <IncludeInDocumentation>true</IncludeInDocumentation>
            <Thickness>
              <double>150</double>
              <double>150</double>
              <double>200</double>
              <double>150</double>
              <double>250</double>
              <double>300</double>
              <double>300</double>
            </Thickness>
            <BD>
              <double>1.3</double>
              <double>1.35</double>
              <double>1</double>
              <double>0.53</double>
              <double>0.31</double>
              <double>0.3</double>
              <double>0.3</double>
            </BD>
            <AirDry>
              <double>0.05</double>
              <double>0.12</double>
              <double>0.055</double>
              <double>0.015</double>
              <double>0.01</double>
              <double>0.01</double>
              <double>0.01</double>
            </AirDry>
            <LL15>
              <double>0.15</double>
              <double>0.14</double>
              <double>0.055</double>
              <double>0.015</double>
              <double>0.01</double>
              <double>0.01</double>
              <double>0.01</double>
            </LL15>
            <DUL>
              <double>0.36</double>
              <double>0.34</double>
              <double>0.19</double>
              <double>0.065</double>
              <double>0.04</double>
              <double>0.03</double>
              <double>0.03</double>
            </DUL>
            <SAT>
              <double>0.45</double>
              <double>0.43</double>
              <double>0.25</double>
              <double>0.15</double>
              <double>0.11</double>
              <double>0.11</double>
              <double>0.11</double>
            </SAT>
            <KS>
              <double>5000</double>
              <double>2500</double>
              <double>3000</double>
              <double>10000</double>
              <double>17500</double>
              <double>20000</double>
              <double>20000</double>
            </KS>
          </Water>
          <SoilWater>
            <Name>SoilWater</Name>
            <IncludeInDocumentation>true</IncludeInDocumentation>
            <SummerDate>1-Nov</SummerDate>
            <SummerU>6</SummerU>
            <SummerCona>3.5</SummerCona>
            <WinterDate>1-apr</WinterDate>
            <WinterU>2</WinterU>
            <WinterCona>2</WinterCona>
            <DiffusConst>88</DiffusConst>
            <DiffusSlope>35</DiffusSlope>
            <Salb>0.13</Salb>
            <CN2Bare>73</CN2Bare>
            <CNRed>20</CNRed>
            <CNCov>0.8</CNCov>
            <slope>0</slope>
            <discharge_width>0</discharge_width>
            <catchment_area>0</catchment_area>
            <max_pond>0</max_pond>
            <Thickness>
              <double>100</double>
              <double>200</double>
              <double>300</double>
              <double>300</double>
              <double>300</double>
              <double>300</double>
              <double>300</double>
            </Thickness>
            <SWCON>
              <double>0.4</double>
              <double>0.5</double>
              <double>0.6</double>
              <double>0.6</double>
              <double>0.8</double>
              <double>0.8</double>
              <double>0.8</double>
            </SWCON>
            <KLAT>
              <double>0</double>
              <double>0</double>
              <double>0</double>
              <double>0</double>
              <double>0</double>
              <double>0</double>
              <double>0</double>
            </KLAT>
            <residueinterception>0</residueinterception>
          </SoilWater>
          <SoilOrganicMatter>
            <Name>SoilOrganicMatter</Name>
            <IncludeInDocumentation>true</IncludeInDocumentation>
            <RootCN>40</RootCN>
            <RootWt>1000</RootWt>
            <SoilCN>12</SoilCN>
            <EnrACoeff>7.4</EnrACoeff>
            <EnrBCoeff>0.2</EnrBCoeff>
            <Thickness>
              <double>150</double>
              <double>150</double>
              <double>200</double>
              <double>150</double>
              <double>250</double>
              <double>300</double>
              <double>300</double>
            </Thickness>
            <Depth>
              <string>0-15</string>
              <string>15-30</string>
              <string>30-50</string>
              <string>50-65</string>
              <string>65-90</string>
              <string>90-120</string>
              <string>120-150</string>
            </Depth>
            <OC>
              <double>3</double>
              <double>1</double>
              <double>0.6</double>
              <double>0.4</double>
              <double>0.25</double>
              <double>0.15</double>
              <double>0.1</double>
            </OC>
            <FBiom>
              <double>0.04</double>
              <double>0.02</double>
              <double>0.02</double>
              <double>0.01</double>
              <double>0.01</double>
              <double>0</double>
              <double>0</double>
            </FBiom>
            <FInert>
              <double>0.5</double>
              <double>0.7</double>
              <double>0.83</double>
              <double>0.9</double>
              <double>0.95</double>
              <double>0.99</double>
              <double>0.99</double>
            </FInert>
            <OCUnits>Total</OCUnits>
          </SoilOrganicMatter>
          <Analysis>
            <Name>Analysis</Name>
            <IncludeInDocumentation>true</IncludeInDocumentation>
            <Thickness>
              <double>100</double>
              <double>200</double>
              <double>300</double>
              <double>300</double>
              <double>300</double>
              <double>300</double>
              <double>300</double>
            </Thickness>
            <Rocks>
              <double>0</double>
              <double>0</double>
              <double>10</double>
              <double>40</double>
              <double>60</double>
              <double>70</double>
              <double>70</double>
            </Rocks>
            <Texture />
            <MunsellColour />
            <PH>
              <double>5.9</double>
              <double>5.9</double>
              <double>5.9</double>
              <double>5.9</double>
              <double>5.9</double>
              <double>5.9</double>
              <double>5.9</double>
            </PH>
            <CEC>
              <double>12.5</double>
              <double>10</double>
              <double>9</double>
              <double>5</double>
              <double>4</double>
              <double>4</double>
              <double>4</double>
            </CEC>
            <ParticleSizeSand>
              <double>15</double>
              <double>20</double>
              <double>25</double>
              <double>35</double>
              <double>40</double>
              <double>40</double>
              <double>40</double>
            </ParticleSizeSand>
            <ParticleSizeSilt>
              <double>65</double>
              <double>65</double>
              <double>63</double>
              <double>57</double>
              <double>54</double>
              <double>55</double>
              <double>55</double>
            </ParticleSizeSilt>
            <ParticleSizeClay>
              <double>20</double>
              <double>15</double>
              <double>12</double>
              <double>8</double>
              <double>6</double>
              <double>5</double>
              <double>5</double>
            </ParticleSizeClay>
            <PHUnits>Water</PHUnits>
            <BoronUnits>HotWater</BoronUnits>
          </Analysis>
          <Sample>
            <Name>Initial nitrogen</Name>
            <IncludeInDocumentation>true</IncludeInDocumentation>
            <Thickness>
              <double>100</double>
              <double>200</double>
              <double>300</double>
              <double>300</double>
              <double>300</double>
              <double>300</double>
              <double>300</double>
            </Thickness>
            <NO3>
              <double>7.619</double>
              <double>7.27</double>
              <double>3.871</double>
              <double>3.84</double>
              <double>3.81</double>
              <double>3.779</double>
              <double>3.691</double>
            </NO3>
            <NH4>
              <double>0.132</double>
              <double>0.132</double>
              <double>0.132</double>
              <double>0.132</double>
              <double>0.132</double>
              <double>0.132</double>
              <double>0.132</double>
            </NH4>
            <NO3Units>ppm</NO3Units>
            <NH4Units>ppm</NH4Units>
            <SWUnits>Volumetric</SWUnits>
            <OCUnits>Total</OCUnits>
            <PHUnits>Water</PHUnits>
          </Sample>
          <SoilNitrogen>
            <Name>SoilNitrogen</Name>
            <IncludeInDocumentation>true</IncludeInDocumentation>
            <fom_type>
              <string>default</string>
              <string>manure</string>
              <string>mucuna</string>
              <string>lablab</string>
              <string>shemp</string>
              <string>stable</string>
            </fom_type>
            <fract_carb>
              <double>0.2</double>
              <double>0.3</double>
              <double>0.54</double>
              <double>0.57</double>
              <double>0.45</double>
              <double>0</double>
            </fract_carb>
            <fract_cell>
              <double>0.7</double>
              <double>0.3</double>
              <double>0.37</double>
              <double>0.37</double>
              <double>0.47</double>
              <double>0.1</double>
            </fract_cell>
            <fract_lign>
              <double>0.1</double>
              <double>0.4</double>
              <double>0.09</double>
              <double>0.06</double>
              <double>0.08</double>
              <double>0.9</double>
            </fract_lign>
          </SoilNitrogen>
          <CERESSoilTemperature>
            <Name>CERESSoilTemperature</Name>
            <IncludeInDocumentation>true</IncludeInDocumentation>
          </CERESSoilTemperature>
          <IncludeInDocumentation>true</IncludeInDocumentation>
          <RecordNumber>0</RecordNumber>
          <SoilType>NZ_Sedimentary</SoilType>
          <LocalName>Lismore</LocalName>
          <Site>Winchmore</Site>
          <NearestTown>Ashburton</NearestTown>
          <Region>Canterbury</Region>
          <Country>New Zealand</Country>
          <NaturalVegetation />
          <Latitude>-48.48</Latitude>
          <Longitude>0</Longitude>
        </Soil>
        <IncludeInDocumentation>true</IncludeInDocumentation>
        <Area>1</Area>
        <Slope>0</Slope>
      </Zone>
      <Zone>
        <Name>P4</Name>
        <Manager>
          <Name>CentrePivot</Name>
          <IncludeInDocumentation>true</IncludeInDocumentation>
          <Script>
            <allowIrrigation>yes</allowIrrigation>
            <IrrigStart>1-sep</IrrigStart>
            <IrrigEnd>30-apr</IrrigEnd>
            <SoilDepth>500</SoilDepth>
            <CritPAWForShallow>60</CritPAWForShallow>
            <CritRainToPause>30</CritRainToPause>
            <DaysToPauseOnCritRain>3</DaysToPauseOnCritRain>
            <IrrigReturnShallow>2</IrrigReturnShallow>
            <IrrigAmtShallow>10</IrrigAmtShallow>
            <PercPAWIrrigDeficitShallow>30</PercPAWIrrigDeficitShallow>
            <IrrigEffShallow>100</IrrigEffShallow>
            <IrrigReturnDeep>4</IrrigReturnDeep>
            <IrrigAmtDeep>20</IrrigAmtDeep>
            <PercPAWIrrigDeficitDeep>25</PercPAWIrrigDeficitDeep>
            <IrrigEffDeep>100</IrrigEffDeep>
            <TodayDeficit>123.894</TodayDeficit>
            <TodayDeficit_nve>-123.894</TodayDeficit_nve>
            <IrrigDay>3</IrrigDay>
            <SoilPAW>63.65</SoilPAW>
            <IrrigDeficit>25</IrrigDeficit>
            <IrrigReturn>4</IrrigReturn>
            <IrrigAmt>20</IrrigAmt>
            <IrrigEff>100</IrrigEff>
            <Rain3>0</Rain3>
            <Days2Pause>-80</Days2Pause>
          </Script>
          <Code><![CDATA[using System;
using Models.Core;
using Models.PMF;
using Models.Soils;
using System.Xml.Serialization;
using Models.PMF;
using APSIM.Shared.Utilities;
using System.Diagnostics; // used with Debugger.Break(); to debug manager scripts
        
namespace Models
{
    [Serializable] 
    [System.Xml.Serialization.XmlInclude(typeof(Model))]
    public class Script : Model
    {
        //Communication to other modules
        [Link] ISummary summary = null;
        [Link] Irrigation irrigation;
        [Link] Clock Clock;
        [Link] Soil soil;
        [Link] Weather Met; 
        [Link(IsOptional = true)] ICrop existingCrop;
       
        //User inputs from properties tab
        [Description("Turn irrigation on?")]
        public answerTypes allowIrrigation { get; set; }
        [Description("Start of irrigation season (dd-MMM)")]
        public string IrrigStart { get; set; }
        [Description("End of irrigation season (dd-MMM)")]
        public string IrrigEnd { get; set; }
        [Description("Enter the depth to which water deficit is computed (mm)")]
        public double SoilDepth { get; set; }
        [Description("PAW below which soil is considered 'shallow' (mm)")]
        public double CritPAWForShallow { get; set; }
        [Description("Amount of rainfall over the last 3 days to cause pause to irrigator (mm)")]
        public double CritRainToPause { get; set; }
        [Description("Number of days to pause irrigator after critical rainfall (days)")]
        public double DaysToPauseOnCritRain { get; set; }

        [Description("Shallow Soils: Irrigation return period (days)")]
        public double IrrigReturnShallow { get; set; }
        [Description("Shallow Soils: Effective irrigation amount (mm)")]
        public double IrrigAmtShallow { get; set; }
        [Description("Shallow Soils: Percentage of PAW at which to irrigate (%)")]
        public double PercPAWIrrigDeficitShallow { get; set; }
        [Description("Shallow Soils: Irrigation efficiency (%)")]
        public double IrrigEffShallow { get; set; }

        [Description("Deep Soils: Irrigation return period (days)")]
        public double IrrigReturnDeep { get; set; }
        [Description("Deep Soils: Effective irrigation amount (mm)")]
        public double IrrigAmtDeep { get; set; }
        [Description("Deep Soils: Percentage of PAW at which to irrigate (%)")]
        public double PercPAWIrrigDeficitDeep { get; set; }
        [Description("Deep Soils: Irrigation efficiency (%)")]
        public double IrrigEffDeep { get; set; }

        // Outputs
        public double TodayDeficit { get; set; }
        public double TodayDeficit_nve { get; set; }
        public double IrrigDay { get; set; }
        public double SoilPAW { get; set; }
        public double IrrigDeficit { get; set; }
        public double IrrigReturn { get; set; }
        public double IrrigAmt { get; set; }
        public double IrrigEff { get; set; }
        public double Rain3 { get; set; }

        public double Days2Pause { get; set; }

        // internal use
        private DateTime StartDate;               //The date when irrigation start (in date format)
        private DateTime EndDate;                 //The date when irrigation finish (in date format)
        private double RainToday=0;
        public double[] Rain_3;

        public enum answerTypes
        {
            /// <summary>a positive answer</summary>
            yes,
            /// <summary>a negative answer</summary>
            no
        }


        [EventSubscribe("StartOfSimulation")]
        private void OnStartOfSimulation(object sender, EventArgs e)
        {
            summary.WriteMessage(this, "==================================================");
            summary.WriteMessage(this, "                CentrePivot initialising          ");
            summary.WriteMessage(this, "");

            IrrigDay = 5000;  //so will reset to 1 on first day
              StartDate = DateTime.Parse(IrrigStart);
              EndDate = DateTime.Parse(IrrigEnd);

            Rain3 = 0;
            Rain_3 = new double[4];
            Rain_3[0] = 0;
            Rain_3[1] = 0;
            Rain_3[2] = 0;

              SoilPAW = 0.0;

              double[] sw_dul = soil.DULmm;
              double[] sw_15 = soil.LL15mm;  
              double MySoilDepth = 0;
              for(int z=0;z<soil.Thickness.Length;z++) {
                  MySoilDepth+=soil.Thickness[z];
                  if (MySoilDepth<= SoilDepth) 
                      SoilPAW+=sw_dul[z] - sw_15[z];    
              }

              if(SoilPAW <= CritPAWForShallow) {      
                IrrigDeficit = PercPAWIrrigDeficitShallow / 100 * SoilPAW;
                IrrigReturn = IrrigReturnShallow;
                IrrigAmt = IrrigAmtShallow;
                IrrigEff = IrrigEffShallow ;           
                summary.WriteMessage(this, "  Soil is considered to be shallow " + CritPAWForShallow + " " + SoilPAW);
            } 
            else 
            {
                IrrigDeficit = PercPAWIrrigDeficitDeep;
                IrrigReturn = IrrigReturnDeep;
                IrrigAmt = IrrigAmtDeep;
                IrrigEff = IrrigEffDeep;
                summary.WriteMessage(this, "  Soil is considered to be deep");
            }

            summary.WriteMessage(this, "  Irrigation critical deficit (mm): " + IrrigDeficit);
            summary.WriteMessage(this, "          Irrigation return (days): " + IrrigReturn);
            summary.WriteMessage(this, "     Irrigation pumped amount (mm): " + IrrigAmt);
            summary.WriteMessage(this, "         Irrigation efficiency (%): " + IrrigEff);
            summary.WriteMessage(this, "");
            summary.WriteMessage(this, "                CentrePivot initialised");
            summary.WriteMessage(this, "==================================================");
            
        }

        [EventSubscribe("Commencing")]
        private void OnSimulationCommencing(object sender, EventArgs e)
        {
        }

       [EventSubscribe("PreparingNewWeatherData")]
        private void OnPreparingNewWeatherData(object sender, EventArgs e)
        {
            RainToday = Met.Rain; //takes note of how much rain was due to fall today        
        }

        //[EventSubscribe("DoDailyInitialisation")]
        //private void OnDoDailyInitialisation(object sender, EventArgs e) 
        //{
        //}

        [EventSubscribe("StartOfDay")]
        private void OnStartOfDay(object sender, EventArgs e)
        {
            int rain=0;

            Rain_3[2] = Rain_3[1];
            Rain_3[1] = Rain_3[0];
            Rain_3[0] = RainToday;
            Rain3 = Rain_3[0] + Rain_3[1] + Rain_3[2]; //sums the rain in the last 3 days
            if(Rain3 >= CritRainToPause)
                Days2Pause = DaysToPauseOnCritRain;
            else
                Days2Pause = Days2Pause - 1;

            double[] sw_dul = soil.DULmm;
            double[] sw_sw = soil.SWAtWaterThickness;  // ??? was MySwim.sw_dep
              double[] sw_15 = soil.LL15mm;  
              double MySoilDepth = 0;

            TodayDeficit = 0.0;
            SoilPAW = 0.0;

              for(int z=0;z<soil.Thickness.Length;z++) {
                  MySoilDepth+=soil.Thickness[z];
                  if (MySoilDepth<= SoilDepth) {
                      SoilPAW+=sw_dul[z] - sw_15[z];    
                      TodayDeficit += sw_dul[z] - Math.Min(sw_dul[z], sw_sw[z]);
                  }
              }
            TodayDeficit_nve = -1 * TodayDeficit;

            if (isBetween(Clock.Today, StartDate, EndDate)) {
                 if(SoilPAW <= CritPAWForShallow) {      
                    IrrigDeficit = PercPAWIrrigDeficitShallow / 100 * SoilPAW;
                    IrrigReturn = IrrigReturnShallow;
                    IrrigAmt = IrrigAmtShallow;
                    IrrigEff = IrrigEffShallow ;           
                } 
                else 
                {
                    IrrigDeficit = PercPAWIrrigDeficitDeep;
                    IrrigReturn = IrrigReturnDeep;
                    IrrigAmt = IrrigAmtDeep;
                    IrrigEff = IrrigEffDeep;
                }

                if(Days2Pause < 0.5) {
                    IrrigDay = IrrigDay + 1;
                    if(IrrigDay > IrrigReturn)
                        IrrigDay = 1;  // and day = 1 is when the irrigation happens                    

                    if ((TodayDeficit >= IrrigDeficit) && (allowIrrigation == answerTypes.yes)) {
                        if(IrrigDay == 1){
                            double AmountToApply = (IrrigAmt / (IrrigEff / 100.0));
                            //summary.WriteMessage(this, "Rain today was " + RainToday + ". Applying " + AmountToApply+ " mm of irrigation");
                            irrigation.Apply(AmountToApply);

                        }
                    }
                }
            }
        }

        ///Checks whether theDate is between iniDate and endDate (non-year specific)
        private bool isBetween(DateTime theDay, DateTime iniDate, DateTime endDate)
        {
            bool result = false;
            if (iniDate.DayOfYear < endDate.DayOfYear)
            {
                // period is within one year, ex: summer in the northern hemisphere
                if ((theDay.DayOfYear >= iniDate.DayOfYear) && (theDay.DayOfYear <= endDate.DayOfYear))
                    result = true;
            }
            else
            {
                // period goes over the end of the year, ex: summer in the southern hemisphere
                if ((theDay.DayOfYear >= iniDate.DayOfYear) || (theDay.DayOfYear <= endDate.DayOfYear))
                    result = true;
            }
            
            return result;
        }

    }
}
]]></Code>
        </Manager>
        <SurfaceOrganicMatter>
          <Name>SurfaceOrganicMatter</Name>
          <IncludeInDocumentation>true</IncludeInDocumentation>
          <PondActive>no</PondActive>
          <ReportAdditions>no</ReportAdditions>
          <ReportRemovals>no</ReportRemovals>
          <ResidueTypes>
            <Name>ResidueTypes</Name>
            <IncludeInDocumentation>true</IncludeInDocumentation>
            <LoadFromResource>ResidueTypes</LoadFromResource>
          </ResidueTypes>
          <TillageTypes>
            <Name>TillageTypesList</Name>
            <IncludeInDocumentation>true</IncludeInDocumentation>
            <TillageType />
          </TillageTypes>
          <Pools>
            <Pool>
              <PoolName>grass</PoolName>
              <ResidueType>grass</ResidueType>
              <Mass>500</Mass>
              <CNRatio>15</CNRatio>
              <CPRatio>NaN</CPRatio>
              <StandingFraction>0</StandingFraction>
            </Pool>
          </Pools>
          <PoolName>grass</PoolName>
          <type>grass</type>
          <mass>500</mass>
          <standing_fraction>0</standing_fraction>
          <cpr />
          <cnr>15</cnr>
          <CriticalResidueWeight>2000</CriticalResidueWeight>
          <OptimumDecompTemp>20</OptimumDecompTemp>
          <MaxCumulativeEOS>20</MaxCumulativeEOS>
          <CNRatioDecompCoeff>0.277</CNRatioDecompCoeff>
          <CNRatioDecompThreshold>25</CNRatioDecompThreshold>
          <TotalLeachRain>25</TotalLeachRain>
          <MinRainToLeach>10</MinRainToLeach>
          <CriticalMinimumOrganicC>0.004</CriticalMinimumOrganicC>
          <DefaultCPRatio>0</DefaultCPRatio>
          <DefaultStandingFraction>0</DefaultStandingFraction>
          <StandingExtinctCoeff>0.5</StandingExtinctCoeff>
          <FractionFaecesAdded>0.5</FractionFaecesAdded>
        </SurfaceOrganicMatter>
        <MicroClimate>
          <Name>MicroClimate</Name>
          <IncludeInDocumentation>true</IncludeInDocumentation>
          <a_interception>0</a_interception>
          <b_interception>1</b_interception>
          <c_interception>0</c_interception>
          <d_interception>0</d_interception>
          <soil_albedo>0.23</soil_albedo>
          <sun_angle>15</sun_angle>
          <soil_heat_flux_fraction>0.4</soil_heat_flux_fraction>
          <night_interception_fraction>0.5</night_interception_fraction>
          <refheight>2</refheight>
          <albedo>0.15</albedo>
          <emissivity>0.95999999999999974</emissivity>
          <RadIntTotal>-4.3854844207218751</RadIntTotal>
        </MicroClimate>
        <Irrigation>
          <Name>Irrigation</Name>
          <IncludeInDocumentation>true</IncludeInDocumentation>
        </Irrigation>
        <Fertiliser>
          <Name>Fertiliser</Name>
          <IncludeInDocumentation>true</IncludeInDocumentation>
        </Fertiliser>
        <SoluteManager>
          <Name>SoluteManager</Name>
          <IncludeInDocumentation>true</IncludeInDocumentation>
        </SoluteManager>
        <Report>
          <Name>Report</Name>
          <IncludeInDocumentation>true</IncludeInDocumentation>
          <ExperimentFactorNames />
          <ExperimentFactorValues />
          <VariableNames>
            <string>[Clock].Today as Date</string>
            <string>(sum([Soil].SoilNitrogen.urea) + sum([Soil].SoilNitrogen.NH4) + sum([Soil].SoilNitrogen.NO3)) as minNPaddock</string>
            <string>[Sward].HerbageGrowthWt</string>
          </VariableNames>
          <EventNames>
            <string>[Clock].EndOfDay</string>
          </EventNames>
        </Report>
        <Sward>
          <Name>Sward</Name>
          <PastureSpecies>
            <Name>Ryegrass</Name>
            <IncludeInDocumentation>true</IncludeInDocumentation>
            <MaximumNUptake>10</MaximumNUptake>
            <Albedo>0.26</Albedo>
            <Gsmax>0.011</Gsmax>
            <R50>200</R50>
            <SpeciesFamily>Grass</SpeciesFamily>
            <PhotosyntheticPathway>C3</PhotosyntheticPathway>
            <InitialShootDM>750</InitialShootDM>
            <InitialRootDM>450</InitialRootDM>
            <InitialRootDepth>750</InitialRootDepth>
            <ReferencePhotosyntheticRate>1</ReferencePhotosyntheticRate>
            <LightExtinctionCoefficient>0.5</LightExtinctionCoefficient>
            <GrowthTminimum>1</GrowthTminimum>
            <GrowthToptimum>20</GrowthToptimum>
            <GrowthTEffectExponent>1.7</GrowthTEffectExponent>
            <UseHeatStressFactor>yes</UseHeatStressFactor>
            <HeatOnsetTemperature>28</HeatOnsetTemperature>
            <HeatFullTemperature>35</HeatFullTemperature>
            <HeatRecoverySumDD>30</HeatRecoverySumDD>
            <HeatRecoveryTReference>25</HeatRecoveryTReference>
            <UseColdStressFactor>yes</UseColdStressFactor>
            <ColdOnsetTemperature>1</ColdOnsetTemperature>
            <ColdFullTemperature>-5</ColdFullTemperature>
            <ColdRecoverySumDD>25</ColdRecoverySumDD>
            <ColdRecoveryTReference>0</ColdRecoveryTReference>
            <MaintenanceRespirationCoefficient>0.03</MaintenanceRespirationCoefficient>
            <GrowthRespirationCoefficient>0.25</GrowthRespirationCoefficient>
            <RespirationTReference>20</RespirationTReference>
            <RespirationExponent>1.5</RespirationExponent>
            <NThresholdsForLeaves>
              <double>0.04</double>
              <double>0.012</double>
              <double>0.05</double>
            </NThresholdsForLeaves>
            <NThresholdsForStems>
              <double>0.02</double>
              <double>0.006</double>
              <double>0.025</double>
            </NThresholdsForStems>
            <NThresholdsForStolons>
              <double>0</double>
              <double>0</double>
              <double>0</double>
            </NThresholdsForStolons>
            <NThresholdsForRoots>
              <double>0.02</double>
              <double>0.006</double>
              <double>0.025</double>
            </NThresholdsForRoots>
            <DegreesDayForGermination>125</DegreesDayForGermination>
            <TargetShootRootRatio>4</TargetShootRootRatio>
            <MaxRootAllocation>0.25</MaxRootAllocation>
            <ShootRootGlfFactor>0.5</ShootRootGlfFactor>
            <UseReproSeasonFactor>yes</UseReproSeasonFactor>
            <ReproSeasonReferenceLatitude>41</ReproSeasonReferenceLatitude>
            <ReproSeasonTimingCoeff>0.14</ReproSeasonTimingCoeff>
            <ReproSeasonMaxAllocationIncrease>0.5</ReproSeasonMaxAllocationIncrease>
            <ReproSeasonAllocationCoeff>0.1</ReproSeasonAllocationCoeff>
            <FractionLeafMaximum>0.7</FractionLeafMaximum>
            <FractionLeafMinimum>0.7</FractionLeafMinimum>
            <FractionLeafDMThreshold>500</FractionLeafDMThreshold>
            <FractionLeafDMFactor>2000</FractionLeafDMFactor>
            <FractionLeafExponent>3</FractionLeafExponent>
            <FractionToStolon>0</FractionToStolon>
            <SpecificLeafArea>25</SpecificLeafArea>
            <SpecificRootLength>100</SpecificRootLength>
            <StolonEffectOnLAI>0</StolonEffectOnLAI>
            <ShootMaxEffectOnLAI>1000</ShootMaxEffectOnLAI>
            <MaxStemEffectOnLAI>1</MaxStemEffectOnLAI>
            <LiveLeavesPerTiller>3</LiveLeavesPerTiller>
            <TissueTurnoverRateShoot>0.05</TissueTurnoverRateShoot>
            <TissueTurnoverRateRoot>0.02</TissueTurnoverRateRoot>
            <DetachmentRateShoot>0.08</DetachmentRateShoot>
            <TurnoverTemperatureMin>2</TurnoverTemperatureMin>
            <TurnoverTemperatureRef>20</TurnoverTemperatureRef>
            <TurnoverTemperatureExponent>1</TurnoverTemperatureExponent>
            <TurnoverDroughtEffectMax>1</TurnoverDroughtEffectMax>
            <TurnoverDroughtThreshold>0.5</TurnoverDroughtThreshold>
            <TurnoverDefoliationCoefficient>0.5</TurnoverDefoliationCoefficient>
            <TurnoverDefoliationRootEffect>0.1</TurnoverDefoliationRootEffect>
            <FractionNLuxuryRemobilisable>
              <double>0.1</double>
              <double>0.1</double>
              <double>0.1</double>
            </FractionNLuxuryRemobilisable>
            <MinimumNFixation>0</MinimumNFixation>
            <MaximumNFixation>0</MaximumNFixation>
            <SoilSaturationEffectMax>0.1</SoilSaturationEffectMax>
            <MinimumWaterFreePorosity>-1</MinimumWaterFreePorosity>
            <SoilSaturationRecoveryFactor>0.25</SoilSaturationRecoveryFactor>
            <NDillutionCoefficient>0.25</NDillutionCoefficient>
            <GlfGeneric>1</GlfGeneric>
            <GlfSoilFertility>1</GlfSoilFertility>
            <PlantHeightMinimum>25</PlantHeightMinimum>
            <PlantHeightMaximum>600</PlantHeightMaximum>
            <PlantHeightMassForMax>10000</PlantHeightMassForMax>
            <PlantHeightExponent>2.8</PlantHeightExponent>
            <RootDepthMinimum>50</RootDepthMinimum>
            <RootDepthMaximum>750</RootDepthMaximum>
            <RootElongationRate>25</RootElongationRate>
            <RootDistributionDepthParam>90</RootDistributionDepthParam>
            <RootDistributionExponent>3.2</RootDistributionExponent>
            <DigestibilitiesCellWall>
              <double>0.6</double>
              <double>0.6</double>
              <double>0.6</double>
              <double>0.2</double>
            </DigestibilitiesCellWall>
            <MinimumGreenWt>100</MinimumGreenWt>
            <FractionStolonStanding>0</FractionStolonStanding>
            <PreferenceForGreenOverDead>1</PreferenceForGreenOverDead>
            <PreferenceForLeafOverStems>1</PreferenceForLeafOverStems>
            <WaterAvailableMethod>DefaultAPSIM</WaterAvailableMethod>
            <NitrogenAvailableMethod>BasicAgPasture</NitrogenAvailableMethod>
          </PastureSpecies>
          <PastureSpecies>
            <Name>WhiteClover</Name>
            <IncludeInDocumentation>true</IncludeInDocumentation>
            <MaximumNUptake>10</MaximumNUptake>
            <Albedo>0.26</Albedo>
            <Gsmax>0.011</Gsmax>
            <R50>200</R50>
            <SpeciesFamily>Legume</SpeciesFamily>
            <PhotosyntheticPathway>C3</PhotosyntheticPathway>
            <InitialShootDM>250</InitialShootDM>
            <InitialRootDM>150</InitialRootDM>
            <InitialRootDepth>350</InitialRootDepth>
            <ReferencePhotosyntheticRate>1</ReferencePhotosyntheticRate>
            <LightExtinctionCoefficient>0.8</LightExtinctionCoefficient>
            <GrowthTminimum>2</GrowthTminimum>
            <GrowthToptimum>22</GrowthToptimum>
            <GrowthTEffectExponent>1.7</GrowthTEffectExponent>
            <UseHeatStressFactor>yes</UseHeatStressFactor>
            <HeatOnsetTemperature>30</HeatOnsetTemperature>
            <HeatFullTemperature>36</HeatFullTemperature>
            <HeatRecoverySumDD>20</HeatRecoverySumDD>
            <HeatRecoveryTReference>25</HeatRecoveryTReference>
            <UseColdStressFactor>yes</UseColdStressFactor>
            <ColdOnsetTemperature>2</ColdOnsetTemperature>
            <ColdFullTemperature>-5</ColdFullTemperature>
            <ColdRecoverySumDD>30</ColdRecoverySumDD>
            <ColdRecoveryTReference>0</ColdRecoveryTReference>
            <MaintenanceRespirationCoefficient>0.04</MaintenanceRespirationCoefficient>
            <GrowthRespirationCoefficient>0.25</GrowthRespirationCoefficient>
            <RespirationTReference>20</RespirationTReference>
            <RespirationExponent>1.5</RespirationExponent>
            <NThresholdsForLeaves>
              <double>0.045</double>
              <double>0.02</double>
              <double>0.055</double>
            </NThresholdsForLeaves>
            <NThresholdsForStems>
              <double>0.0225</double>
              <double>0.01</double>
              <double>0.0275</double>
            </NThresholdsForStems>
            <NThresholdsForStolons>
              <double>0.0225</double>
              <double>0.01</double>
              <double>0.0275</double>
            </NThresholdsForStolons>
            <NThresholdsForRoots>
              <double>0.0225</double>
              <double>0.01</double>
              <double>0.0275</double>
            </NThresholdsForRoots>
            <DegreesDayForGermination>125</DegreesDayForGermination>
            <TargetShootRootRatio>4</TargetShootRootRatio>
            <MaxRootAllocation>0.25</MaxRootAllocation>
            <ShootRootGlfFactor>0.5</ShootRootGlfFactor>
            <UseReproSeasonFactor>yes</UseReproSeasonFactor>
            <ReproSeasonReferenceLatitude>41</ReproSeasonReferenceLatitude>
            <ReproSeasonTimingCoeff>0.14</ReproSeasonTimingCoeff>
            <ReproSeasonMaxAllocationIncrease>0.5</ReproSeasonMaxAllocationIncrease>
            <ReproSeasonAllocationCoeff>0.1</ReproSeasonAllocationCoeff>
            <FractionLeafMaximum>0.56</FractionLeafMaximum>
            <FractionLeafMinimum>0.28</FractionLeafMinimum>
            <FractionLeafDMThreshold>500</FractionLeafDMThreshold>
            <FractionLeafDMFactor>2000</FractionLeafDMFactor>
            <FractionLeafExponent>3</FractionLeafExponent>
            <FractionToStolon>0.2</FractionToStolon>
            <SpecificLeafArea>30</SpecificLeafArea>
            <SpecificRootLength>45</SpecificRootLength>
            <StolonEffectOnLAI>0.3</StolonEffectOnLAI>
            <ShootMaxEffectOnLAI>500</ShootMaxEffectOnLAI>
            <MaxStemEffectOnLAI>0.5</MaxStemEffectOnLAI>
            <LiveLeavesPerTiller>3</LiveLeavesPerTiller>
            <TissueTurnoverRateShoot>0.05</TissueTurnoverRateShoot>
            <TissueTurnoverRateRoot>0.02</TissueTurnoverRateRoot>
            <DetachmentRateShoot>0.11</DetachmentRateShoot>
            <TurnoverTemperatureMin>2</TurnoverTemperatureMin>
            <TurnoverTemperatureRef>20</TurnoverTemperatureRef>
            <TurnoverTemperatureExponent>1</TurnoverTemperatureExponent>
            <TurnoverDroughtEffectMax>1</TurnoverDroughtEffectMax>
            <TurnoverDroughtThreshold>0.5</TurnoverDroughtThreshold>
            <TurnoverDefoliationCoefficient>0.5</TurnoverDefoliationCoefficient>
            <TurnoverDefoliationRootEffect>0.1</TurnoverDefoliationRootEffect>
            <FractionNLuxuryRemobilisable>
              <double>0.1</double>
              <double>0.1</double>
              <double>0.1</double>
            </FractionNLuxuryRemobilisable>
            <MinimumNFixation>0.2</MinimumNFixation>
            <MaximumNFixation>0.6</MaximumNFixation>
            <SoilSaturationEffectMax>0.1</SoilSaturationEffectMax>
            <MinimumWaterFreePorosity>-1</MinimumWaterFreePorosity>
            <SoilSaturationRecoveryFactor>0.25</SoilSaturationRecoveryFactor>
            <NDillutionCoefficient>1</NDillutionCoefficient>
            <GlfGeneric>1</GlfGeneric>
            <GlfSoilFertility>1</GlfSoilFertility>
            <PlantHeightMinimum>25</PlantHeightMinimum>
            <PlantHeightMaximum>350</PlantHeightMaximum>
            <PlantHeightMassForMax>7500</PlantHeightMassForMax>
            <PlantHeightExponent>2.5</PlantHeightExponent>
            <RootDepthMinimum>30</RootDepthMinimum>
            <RootDepthMaximum>350</RootDepthMaximum>
            <RootElongationRate>25</RootElongationRate>
            <RootDistributionDepthParam>70</RootDistributionDepthParam>
            <RootDistributionExponent>2.5</RootDistributionExponent>
            <DigestibilitiesCellWall>
              <double>0.6</double>
              <double>0.6</double>
              <double>0.6</double>
              <double>0.2</double>
            </DigestibilitiesCellWall>
            <MinimumGreenWt>50</MinimumGreenWt>
            <FractionStolonStanding>0</FractionStolonStanding>
            <PreferenceForGreenOverDead>1</PreferenceForGreenOverDead>
            <PreferenceForLeafOverStems>1</PreferenceForLeafOverStems>
            <WaterAvailableMethod>DefaultAPSIM</WaterAvailableMethod>
            <NitrogenAvailableMethod>BasicAgPasture</NitrogenAvailableMethod>
          </PastureSpecies>
          <IncludeInDocumentation>true</IncludeInDocumentation>
          <ControlledBySward>yes</ControlledBySward>
          <WaterUptakeSource>species</WaterUptakeSource>
          <NUptakeSource>species</NUptakeSource>
        </Sward>
        <Soil>
          <Name>Soil</Name>
          <InitialWater>
            <Name>Initial water</Name>
            <IncludeInDocumentation>true</IncludeInDocumentation>
            <PercentMethod>FilledFromTop</PercentMethod>
            <FractionFull>0.987012987012987</FractionFull>
            <DepthWetSoil>NaN</DepthWetSoil>
          </InitialWater>
          <Water>
            <Name>Water</Name>
            <SoilCrop>
              <Name>SwardSoil</Name>
              <IncludeInDocumentation>true</IncludeInDocumentation>
              <LL>
                <double>0.15</double>
                <double>0.14</double>
                <double>0.06</double>
                <double>0.02</double>
                <double>0.01</double>
                <double>0.01</double>
                <double>0.01</double>
              </LL>
              <KL>
                <double>0.1</double>
                <double>0.1</double>
                <double>0.08</double>
                <double>0.04</double>
                <double>0.01</double>
                <double>0</double>
                <double>0</double>
              </KL>
              <XF>
                <double>1</double>
                <double>1</double>
                <double>1</double>
                <double>1</double>
                <double>1</double>
                <double>0</double>
                <double>0</double>
              </XF>
            </SoilCrop>
            <SoilCrop>
              <Name>RyegrassSoil</Name>
              <IncludeInDocumentation>true</IncludeInDocumentation>
              <LL>
                <double>0.14</double>
                <double>0.14</double>
                <double>0.03</double>
                <double>0.03</double>
                <double>0.03</double>
                <double>0.03</double>
                <double>0.03</double>
              </LL>
              <KL>
                <double>0.1</double>
                <double>0.1</double>
                <double>0.1</double>
                <double>0.02</double>
                <double>0</double>
                <double>0</double>
                <double>0</double>
              </KL>
              <XF>
                <double>1</double>
                <double>1</double>
                <double>1</double>
                <double>1</double>
                <double>0</double>
                <double>0</double>
                <double>0</double>
              </XF>
            </SoilCrop>
            <SoilCrop>
              <Name>WhiteCloverSoil</Name>
              <IncludeInDocumentation>true</IncludeInDocumentation>
              <LL>
                <double>0.14</double>
                <double>0.14</double>
                <double>0.03</double>
                <double>0.03</double>
                <double>0.03</double>
                <double>0.03</double>
                <double>0.03</double>
              </LL>
              <KL>
                <double>0.1</double>
                <double>0.1</double>
                <double>0.1</double>
                <double>0.02</double>
                <double>0</double>
                <double>0</double>
                <double>0</double>
              </KL>
              <XF>
                <double>1</double>
                <double>1</double>
                <double>1</double>
                <double>1</double>
                <double>0</double>
                <double>0</double>
                <double>0</double>
              </XF>
            </SoilCrop>
            <IncludeInDocumentation>true</IncludeInDocumentation>
            <Thickness>
              <double>150</double>
              <double>150</double>
              <double>200</double>
              <double>150</double>
              <double>250</double>
              <double>300</double>
              <double>300</double>
            </Thickness>
            <BD>
              <double>1.3</double>
              <double>1.35</double>
              <double>1</double>
              <double>0.53</double>
              <double>0.31</double>
              <double>0.3</double>
              <double>0.3</double>
            </BD>
            <AirDry>
              <double>0.05</double>
              <double>0.12</double>
              <double>0.055</double>
              <double>0.015</double>
              <double>0.01</double>
              <double>0.01</double>
              <double>0.01</double>
            </AirDry>
            <LL15>
              <double>0.15</double>
              <double>0.14</double>
              <double>0.055</double>
              <double>0.015</double>
              <double>0.01</double>
              <double>0.01</double>
              <double>0.01</double>
            </LL15>
            <DUL>
              <double>0.36</double>
              <double>0.34</double>
              <double>0.19</double>
              <double>0.065</double>
              <double>0.04</double>
              <double>0.03</double>
              <double>0.03</double>
            </DUL>
            <SAT>
              <double>0.45</double>
              <double>0.43</double>
              <double>0.25</double>
              <double>0.15</double>
              <double>0.11</double>
              <double>0.11</double>
              <double>0.11</double>
            </SAT>
            <KS>
              <double>5000</double>
              <double>2500</double>
              <double>3000</double>
              <double>10000</double>
              <double>17500</double>
              <double>20000</double>
              <double>20000</double>
            </KS>
          </Water>
          <SoilWater>
            <Name>SoilWater</Name>
            <IncludeInDocumentation>true</IncludeInDocumentation>
            <SummerDate>1-Nov</SummerDate>
            <SummerU>6</SummerU>
            <SummerCona>3.5</SummerCona>
            <WinterDate>1-apr</WinterDate>
            <WinterU>2</WinterU>
            <WinterCona>2</WinterCona>
            <DiffusConst>88</DiffusConst>
            <DiffusSlope>35</DiffusSlope>
            <Salb>0.13</Salb>
            <CN2Bare>73</CN2Bare>
            <CNRed>20</CNRed>
            <CNCov>0.8</CNCov>
            <slope>0</slope>
            <discharge_width>0</discharge_width>
            <catchment_area>0</catchment_area>
            <max_pond>0</max_pond>
            <Thickness>
              <double>100</double>
              <double>200</double>
              <double>300</double>
              <double>300</double>
              <double>300</double>
              <double>300</double>
              <double>300</double>
            </Thickness>
            <SWCON>
              <double>0.4</double>
              <double>0.5</double>
              <double>0.6</double>
              <double>0.6</double>
              <double>0.8</double>
              <double>0.8</double>
              <double>0.8</double>
            </SWCON>
            <KLAT>
              <double>0</double>
              <double>0</double>
              <double>0</double>
              <double>0</double>
              <double>0</double>
              <double>0</double>
              <double>0</double>
            </KLAT>
            <residueinterception>0</residueinterception>
          </SoilWater>
          <SoilOrganicMatter>
            <Name>SoilOrganicMatter</Name>
            <IncludeInDocumentation>true</IncludeInDocumentation>
            <RootCN>40</RootCN>
            <RootWt>1000</RootWt>
            <SoilCN>12</SoilCN>
            <EnrACoeff>7.4</EnrACoeff>
            <EnrBCoeff>0.2</EnrBCoeff>
            <Thickness>
              <double>150</double>
              <double>150</double>
              <double>200</double>
              <double>150</double>
              <double>250</double>
              <double>300</double>
              <double>300</double>
            </Thickness>
            <Depth>
              <string>0-15</string>
              <string>15-30</string>
              <string>30-50</string>
              <string>50-65</string>
              <string>65-90</string>
              <string>90-120</string>
              <string>120-150</string>
            </Depth>
            <OC>
              <double>3</double>
              <double>1</double>
              <double>0.6</double>
              <double>0.4</double>
              <double>0.25</double>
              <double>0.15</double>
              <double>0.1</double>
            </OC>
            <FBiom>
              <double>0.04</double>
              <double>0.02</double>
              <double>0.02</double>
              <double>0.01</double>
              <double>0.01</double>
              <double>0</double>
              <double>0</double>
            </FBiom>
            <FInert>
              <double>0.5</double>
              <double>0.7</double>
              <double>0.83</double>
              <double>0.9</double>
              <double>0.95</double>
              <double>0.99</double>
              <double>0.99</double>
            </FInert>
            <OCUnits>Total</OCUnits>
          </SoilOrganicMatter>
          <Analysis>
            <Name>Analysis</Name>
            <IncludeInDocumentation>true</IncludeInDocumentation>
            <Thickness>
              <double>100</double>
              <double>200</double>
              <double>300</double>
              <double>300</double>
              <double>300</double>
              <double>300</double>
              <double>300</double>
            </Thickness>
            <Rocks>
              <double>0</double>
              <double>0</double>
              <double>10</double>
              <double>40</double>
              <double>60</double>
              <double>70</double>
              <double>70</double>
            </Rocks>
            <Texture />
            <MunsellColour />
            <PH>
              <double>5.9</double>
              <double>5.9</double>
              <double>5.9</double>
              <double>5.9</double>
              <double>5.9</double>
              <double>5.9</double>
              <double>5.9</double>
            </PH>
            <CEC>
              <double>12.5</double>
              <double>10</double>
              <double>9</double>
              <double>5</double>
              <double>4</double>
              <double>4</double>
              <double>4</double>
            </CEC>
            <ParticleSizeSand>
              <double>15</double>
              <double>20</double>
              <double>25</double>
              <double>35</double>
              <double>40</double>
              <double>40</double>
              <double>40</double>
            </ParticleSizeSand>
            <ParticleSizeSilt>
              <double>65</double>
              <double>65</double>
              <double>63</double>
              <double>57</double>
              <double>54</double>
              <double>55</double>
              <double>55</double>
            </ParticleSizeSilt>
            <ParticleSizeClay>
              <double>20</double>
              <double>15</double>
              <double>12</double>
              <double>8</double>
              <double>6</double>
              <double>5</double>
              <double>5</double>
            </ParticleSizeClay>
            <PHUnits>Water</PHUnits>
            <BoronUnits>HotWater</BoronUnits>
          </Analysis>
          <Sample>
            <Name>Initial nitrogen</Name>
            <IncludeInDocumentation>true</IncludeInDocumentation>
            <Thickness>
              <double>100</double>
              <double>200</double>
              <double>300</double>
              <double>300</double>
              <double>300</double>
              <double>300</double>
              <double>300</double>
            </Thickness>
            <NO3>
              <double>7.619</double>
              <double>7.27</double>
              <double>3.871</double>
              <double>3.84</double>
              <double>3.81</double>
              <double>3.779</double>
              <double>3.691</double>
            </NO3>
            <NH4>
              <double>0.132</double>
              <double>0.132</double>
              <double>0.132</double>
              <double>0.132</double>
              <double>0.132</double>
              <double>0.132</double>
              <double>0.132</double>
            </NH4>
            <NO3Units>ppm</NO3Units>
            <NH4Units>ppm</NH4Units>
            <SWUnits>Volumetric</SWUnits>
            <OCUnits>Total</OCUnits>
            <PHUnits>Water</PHUnits>
          </Sample>
          <SoilNitrogen>
            <Name>SoilNitrogen</Name>
            <IncludeInDocumentation>true</IncludeInDocumentation>
            <fom_type>
              <string>default</string>
              <string>manure</string>
              <string>mucuna</string>
              <string>lablab</string>
              <string>shemp</string>
              <string>stable</string>
            </fom_type>
            <fract_carb>
              <double>0.2</double>
              <double>0.3</double>
              <double>0.54</double>
              <double>0.57</double>
              <double>0.45</double>
              <double>0</double>
            </fract_carb>
            <fract_cell>
              <double>0.7</double>
              <double>0.3</double>
              <double>0.37</double>
              <double>0.37</double>
              <double>0.47</double>
              <double>0.1</double>
            </fract_cell>
            <fract_lign>
              <double>0.1</double>
              <double>0.4</double>
              <double>0.09</double>
              <double>0.06</double>
              <double>0.08</double>
              <double>0.9</double>
            </fract_lign>
          </SoilNitrogen>
          <CERESSoilTemperature>
            <Name>CERESSoilTemperature</Name>
            <IncludeInDocumentation>true</IncludeInDocumentation>
          </CERESSoilTemperature>
          <IncludeInDocumentation>true</IncludeInDocumentation>
          <RecordNumber>0</RecordNumber>
          <SoilType>NZ_Sedimentary</SoilType>
          <LocalName>Lismore</LocalName>
          <Site>Winchmore</Site>
          <NearestTown>Ashburton</NearestTown>
          <Region>Canterbury</Region>
          <Country>New Zealand</Country>
          <NaturalVegetation />
          <Latitude>-48.48</Latitude>
          <Longitude>0</Longitude>
        </Soil>
        <IncludeInDocumentation>true</IncludeInDocumentation>
        <Area>1</Area>
        <Slope>0</Slope>
      </Zone>
      <Zone>
        <Name>P5</Name>
        <Manager>
          <Name>CentrePivot</Name>
          <IncludeInDocumentation>true</IncludeInDocumentation>
          <Script>
            <allowIrrigation>yes</allowIrrigation>
            <IrrigStart>1-sep</IrrigStart>
            <IrrigEnd>30-apr</IrrigEnd>
            <SoilDepth>500</SoilDepth>
            <CritPAWForShallow>60</CritPAWForShallow>
            <CritRainToPause>30</CritRainToPause>
            <DaysToPauseOnCritRain>3</DaysToPauseOnCritRain>
            <IrrigReturnShallow>2</IrrigReturnShallow>
            <IrrigAmtShallow>10</IrrigAmtShallow>
            <PercPAWIrrigDeficitShallow>30</PercPAWIrrigDeficitShallow>
            <IrrigEffShallow>100</IrrigEffShallow>
            <IrrigReturnDeep>4</IrrigReturnDeep>
            <IrrigAmtDeep>20</IrrigAmtDeep>
            <PercPAWIrrigDeficitDeep>25</PercPAWIrrigDeficitDeep>
            <IrrigEffDeep>100</IrrigEffDeep>
            <TodayDeficit>123.894</TodayDeficit>
            <TodayDeficit_nve>-123.894</TodayDeficit_nve>
            <IrrigDay>3</IrrigDay>
            <SoilPAW>63.65</SoilPAW>
            <IrrigDeficit>25</IrrigDeficit>
            <IrrigReturn>4</IrrigReturn>
            <IrrigAmt>20</IrrigAmt>
            <IrrigEff>100</IrrigEff>
            <Rain3>0</Rain3>
            <Days2Pause>-80</Days2Pause>
          </Script>
          <Code><![CDATA[using System;
using Models.Core;
using Models.PMF;
using Models.Soils;
using System.Xml.Serialization;
using Models.PMF;
using APSIM.Shared.Utilities;
using System.Diagnostics; // used with Debugger.Break(); to debug manager scripts
        
namespace Models
{
    [Serializable] 
    [System.Xml.Serialization.XmlInclude(typeof(Model))]
    public class Script : Model
    {
        //Communication to other modules
        [Link] ISummary summary = null;
        [Link] Irrigation irrigation;
        [Link] Clock Clock;
        [Link] Soil soil;
        [Link] Weather Met; 
        [Link(IsOptional = true)] ICrop existingCrop;
       
        //User inputs from properties tab
        [Description("Turn irrigation on?")]
        public answerTypes allowIrrigation { get; set; }
        [Description("Start of irrigation season (dd-MMM)")]
        public string IrrigStart { get; set; }
        [Description("End of irrigation season (dd-MMM)")]
        public string IrrigEnd { get; set; }
        [Description("Enter the depth to which water deficit is computed (mm)")]
        public double SoilDepth { get; set; }
        [Description("PAW below which soil is considered 'shallow' (mm)")]
        public double CritPAWForShallow { get; set; }
        [Description("Amount of rainfall over the last 3 days to cause pause to irrigator (mm)")]
        public double CritRainToPause { get; set; }
        [Description("Number of days to pause irrigator after critical rainfall (days)")]
        public double DaysToPauseOnCritRain { get; set; }

        [Description("Shallow Soils: Irrigation return period (days)")]
        public double IrrigReturnShallow { get; set; }
        [Description("Shallow Soils: Effective irrigation amount (mm)")]
        public double IrrigAmtShallow { get; set; }
        [Description("Shallow Soils: Percentage of PAW at which to irrigate (%)")]
        public double PercPAWIrrigDeficitShallow { get; set; }
        [Description("Shallow Soils: Irrigation efficiency (%)")]
        public double IrrigEffShallow { get; set; }

        [Description("Deep Soils: Irrigation return period (days)")]
        public double IrrigReturnDeep { get; set; }
        [Description("Deep Soils: Effective irrigation amount (mm)")]
        public double IrrigAmtDeep { get; set; }
        [Description("Deep Soils: Percentage of PAW at which to irrigate (%)")]
        public double PercPAWIrrigDeficitDeep { get; set; }
        [Description("Deep Soils: Irrigation efficiency (%)")]
        public double IrrigEffDeep { get; set; }

        // Outputs
        public double TodayDeficit { get; set; }
        public double TodayDeficit_nve { get; set; }
        public double IrrigDay { get; set; }
        public double SoilPAW { get; set; }
        public double IrrigDeficit { get; set; }
        public double IrrigReturn { get; set; }
        public double IrrigAmt { get; set; }
        public double IrrigEff { get; set; }
        public double Rain3 { get; set; }

        public double Days2Pause { get; set; }

        // internal use
        private DateTime StartDate;               //The date when irrigation start (in date format)
        private DateTime EndDate;                 //The date when irrigation finish (in date format)
        private double RainToday=0;
        public double[] Rain_3;

        public enum answerTypes
        {
            /// <summary>a positive answer</summary>
            yes,
            /// <summary>a negative answer</summary>
            no
        }


        [EventSubscribe("StartOfSimulation")]
        private void OnStartOfSimulation(object sender, EventArgs e)
        {
            summary.WriteMessage(this, "==================================================");
            summary.WriteMessage(this, "                CentrePivot initialising          ");
            summary.WriteMessage(this, "");

            IrrigDay = 5000;  //so will reset to 1 on first day
              StartDate = DateTime.Parse(IrrigStart);
              EndDate = DateTime.Parse(IrrigEnd);

            Rain3 = 0;
            Rain_3 = new double[4];
            Rain_3[0] = 0;
            Rain_3[1] = 0;
            Rain_3[2] = 0;

              SoilPAW = 0.0;

              double[] sw_dul = soil.DULmm;
              double[] sw_15 = soil.LL15mm;  
              double MySoilDepth = 0;
              for(int z=0;z<soil.Thickness.Length;z++) {
                  MySoilDepth+=soil.Thickness[z];
                  if (MySoilDepth<= SoilDepth) 
                      SoilPAW+=sw_dul[z] - sw_15[z];    
              }

              if(SoilPAW <= CritPAWForShallow) {      
                IrrigDeficit = PercPAWIrrigDeficitShallow / 100 * SoilPAW;
                IrrigReturn = IrrigReturnShallow;
                IrrigAmt = IrrigAmtShallow;
                IrrigEff = IrrigEffShallow ;           
                summary.WriteMessage(this, "  Soil is considered to be shallow " + CritPAWForShallow + " " + SoilPAW);
            } 
            else 
            {
                IrrigDeficit = PercPAWIrrigDeficitDeep;
                IrrigReturn = IrrigReturnDeep;
                IrrigAmt = IrrigAmtDeep;
                IrrigEff = IrrigEffDeep;
                summary.WriteMessage(this, "  Soil is considered to be deep");
            }

            summary.WriteMessage(this, "  Irrigation critical deficit (mm): " + IrrigDeficit);
            summary.WriteMessage(this, "          Irrigation return (days): " + IrrigReturn);
            summary.WriteMessage(this, "     Irrigation pumped amount (mm): " + IrrigAmt);
            summary.WriteMessage(this, "         Irrigation efficiency (%): " + IrrigEff);
            summary.WriteMessage(this, "");
            summary.WriteMessage(this, "                CentrePivot initialised");
            summary.WriteMessage(this, "==================================================");
            
        }

        [EventSubscribe("Commencing")]
        private void OnSimulationCommencing(object sender, EventArgs e)
        {
        }

       [EventSubscribe("PreparingNewWeatherData")]
        private void OnPreparingNewWeatherData(object sender, EventArgs e)
        {
            RainToday = Met.Rain; //takes note of how much rain was due to fall today        
        }

        //[EventSubscribe("DoDailyInitialisation")]
        //private void OnDoDailyInitialisation(object sender, EventArgs e) 
        //{
        //}

        [EventSubscribe("StartOfDay")]
        private void OnStartOfDay(object sender, EventArgs e)
        {
            int rain=0;

            Rain_3[2] = Rain_3[1];
            Rain_3[1] = Rain_3[0];
            Rain_3[0] = RainToday;
            Rain3 = Rain_3[0] + Rain_3[1] + Rain_3[2]; //sums the rain in the last 3 days
            if(Rain3 >= CritRainToPause)
                Days2Pause = DaysToPauseOnCritRain;
            else
                Days2Pause = Days2Pause - 1;

            double[] sw_dul = soil.DULmm;
            double[] sw_sw = soil.SWAtWaterThickness;  // ??? was MySwim.sw_dep
              double[] sw_15 = soil.LL15mm;  
              double MySoilDepth = 0;

            TodayDeficit = 0.0;
            SoilPAW = 0.0;

              for(int z=0;z<soil.Thickness.Length;z++) {
                  MySoilDepth+=soil.Thickness[z];
                  if (MySoilDepth<= SoilDepth) {
                      SoilPAW+=sw_dul[z] - sw_15[z];    
                      TodayDeficit += sw_dul[z] - Math.Min(sw_dul[z], sw_sw[z]);
                  }
              }
            TodayDeficit_nve = -1 * TodayDeficit;

            if (isBetween(Clock.Today, StartDate, EndDate)) {
                 if(SoilPAW <= CritPAWForShallow) {      
                    IrrigDeficit = PercPAWIrrigDeficitShallow / 100 * SoilPAW;
                    IrrigReturn = IrrigReturnShallow;
                    IrrigAmt = IrrigAmtShallow;
                    IrrigEff = IrrigEffShallow ;           
                } 
                else 
                {
                    IrrigDeficit = PercPAWIrrigDeficitDeep;
                    IrrigReturn = IrrigReturnDeep;
                    IrrigAmt = IrrigAmtDeep;
                    IrrigEff = IrrigEffDeep;
                }

                if(Days2Pause < 0.5) {
                    IrrigDay = IrrigDay + 1;
                    if(IrrigDay > IrrigReturn)
                        IrrigDay = 1;  // and day = 1 is when the irrigation happens                    

                    if ((TodayDeficit >= IrrigDeficit) && (allowIrrigation == answerTypes.yes)) {
                        if(IrrigDay == 1){
                            double AmountToApply = (IrrigAmt / (IrrigEff / 100.0));
                            //summary.WriteMessage(this, "Rain today was " + RainToday + ". Applying " + AmountToApply+ " mm of irrigation");
                            irrigation.Apply(AmountToApply);

                        }
                    }
                }
            }
        }

        ///Checks whether theDate is between iniDate and endDate (non-year specific)
        private bool isBetween(DateTime theDay, DateTime iniDate, DateTime endDate)
        {
            bool result = false;
            if (iniDate.DayOfYear < endDate.DayOfYear)
            {
                // period is within one year, ex: summer in the northern hemisphere
                if ((theDay.DayOfYear >= iniDate.DayOfYear) && (theDay.DayOfYear <= endDate.DayOfYear))
                    result = true;
            }
            else
            {
                // period goes over the end of the year, ex: summer in the southern hemisphere
                if ((theDay.DayOfYear >= iniDate.DayOfYear) || (theDay.DayOfYear <= endDate.DayOfYear))
                    result = true;
            }
            
            return result;
        }

    }
}
]]></Code>
        </Manager>
        <SurfaceOrganicMatter>
          <Name>SurfaceOrganicMatter</Name>
          <IncludeInDocumentation>true</IncludeInDocumentation>
          <PondActive>no</PondActive>
          <ReportAdditions>no</ReportAdditions>
          <ReportRemovals>no</ReportRemovals>
          <ResidueTypes>
            <Name>ResidueTypes</Name>
            <IncludeInDocumentation>true</IncludeInDocumentation>
            <LoadFromResource>ResidueTypes</LoadFromResource>
          </ResidueTypes>
          <TillageTypes>
            <Name>TillageTypesList</Name>
            <IncludeInDocumentation>true</IncludeInDocumentation>
            <TillageType />
          </TillageTypes>
          <Pools>
            <Pool>
              <PoolName>grass</PoolName>
              <ResidueType>grass</ResidueType>
              <Mass>500</Mass>
              <CNRatio>15</CNRatio>
              <CPRatio>NaN</CPRatio>
              <StandingFraction>0</StandingFraction>
            </Pool>
          </Pools>
          <PoolName>grass</PoolName>
          <type>grass</type>
          <mass>500</mass>
          <standing_fraction>0</standing_fraction>
          <cpr />
          <cnr>15</cnr>
          <CriticalResidueWeight>2000</CriticalResidueWeight>
          <OptimumDecompTemp>20</OptimumDecompTemp>
          <MaxCumulativeEOS>20</MaxCumulativeEOS>
          <CNRatioDecompCoeff>0.277</CNRatioDecompCoeff>
          <CNRatioDecompThreshold>25</CNRatioDecompThreshold>
          <TotalLeachRain>25</TotalLeachRain>
          <MinRainToLeach>10</MinRainToLeach>
          <CriticalMinimumOrganicC>0.004</CriticalMinimumOrganicC>
          <DefaultCPRatio>0</DefaultCPRatio>
          <DefaultStandingFraction>0</DefaultStandingFraction>
          <StandingExtinctCoeff>0.5</StandingExtinctCoeff>
          <FractionFaecesAdded>0.5</FractionFaecesAdded>
        </SurfaceOrganicMatter>
        <MicroClimate>
          <Name>MicroClimate</Name>
          <IncludeInDocumentation>true</IncludeInDocumentation>
          <a_interception>0</a_interception>
          <b_interception>1</b_interception>
          <c_interception>0</c_interception>
          <d_interception>0</d_interception>
          <soil_albedo>0.23</soil_albedo>
          <sun_angle>15</sun_angle>
          <soil_heat_flux_fraction>0.4</soil_heat_flux_fraction>
          <night_interception_fraction>0.5</night_interception_fraction>
          <refheight>2</refheight>
          <albedo>0.15</albedo>
          <emissivity>0.95999999999999974</emissivity>
          <RadIntTotal>-4.3854844207218751</RadIntTotal>
        </MicroClimate>
        <Irrigation>
          <Name>Irrigation</Name>
          <IncludeInDocumentation>true</IncludeInDocumentation>
        </Irrigation>
        <Fertiliser>
          <Name>Fertiliser</Name>
          <IncludeInDocumentation>true</IncludeInDocumentation>
        </Fertiliser>
        <SoluteManager>
          <Name>SoluteManager</Name>
          <IncludeInDocumentation>true</IncludeInDocumentation>
        </SoluteManager>
        <Report>
          <Name>Report</Name>
          <IncludeInDocumentation>true</IncludeInDocumentation>
          <ExperimentFactorNames />
          <ExperimentFactorValues />
          <VariableNames>
            <string>[Clock].Today as Date</string>
            <string>(sum([Soil].SoilNitrogen.urea) + sum([Soil].SoilNitrogen.NH4) + sum([Soil].SoilNitrogen.NO3)) as minNPaddock</string>
            <string>[Sward].HerbageGrowthWt</string>
          </VariableNames>
          <EventNames>
            <string>[Clock].EndOfDay</string>
          </EventNames>
        </Report>
        <Sward>
          <Name>Sward</Name>
          <PastureSpecies>
            <Name>Ryegrass</Name>
            <IncludeInDocumentation>true</IncludeInDocumentation>
            <MaximumNUptake>10</MaximumNUptake>
            <Albedo>0.26</Albedo>
            <Gsmax>0.011</Gsmax>
            <R50>200</R50>
            <SpeciesFamily>Grass</SpeciesFamily>
            <PhotosyntheticPathway>C3</PhotosyntheticPathway>
            <InitialShootDM>750</InitialShootDM>
            <InitialRootDM>450</InitialRootDM>
            <InitialRootDepth>750</InitialRootDepth>
            <ReferencePhotosyntheticRate>1</ReferencePhotosyntheticRate>
            <LightExtinctionCoefficient>0.5</LightExtinctionCoefficient>
            <GrowthTminimum>1</GrowthTminimum>
            <GrowthToptimum>20</GrowthToptimum>
            <GrowthTEffectExponent>1.7</GrowthTEffectExponent>
            <UseHeatStressFactor>yes</UseHeatStressFactor>
            <HeatOnsetTemperature>28</HeatOnsetTemperature>
            <HeatFullTemperature>35</HeatFullTemperature>
            <HeatRecoverySumDD>30</HeatRecoverySumDD>
            <HeatRecoveryTReference>25</HeatRecoveryTReference>
            <UseColdStressFactor>yes</UseColdStressFactor>
            <ColdOnsetTemperature>1</ColdOnsetTemperature>
            <ColdFullTemperature>-5</ColdFullTemperature>
            <ColdRecoverySumDD>25</ColdRecoverySumDD>
            <ColdRecoveryTReference>0</ColdRecoveryTReference>
            <MaintenanceRespirationCoefficient>0.03</MaintenanceRespirationCoefficient>
            <GrowthRespirationCoefficient>0.25</GrowthRespirationCoefficient>
            <RespirationTReference>20</RespirationTReference>
            <RespirationExponent>1.5</RespirationExponent>
            <NThresholdsForLeaves>
              <double>0.04</double>
              <double>0.012</double>
              <double>0.05</double>
            </NThresholdsForLeaves>
            <NThresholdsForStems>
              <double>0.02</double>
              <double>0.006</double>
              <double>0.025</double>
            </NThresholdsForStems>
            <NThresholdsForStolons>
              <double>0</double>
              <double>0</double>
              <double>0</double>
            </NThresholdsForStolons>
            <NThresholdsForRoots>
              <double>0.02</double>
              <double>0.006</double>
              <double>0.025</double>
            </NThresholdsForRoots>
            <DegreesDayForGermination>125</DegreesDayForGermination>
            <TargetShootRootRatio>4</TargetShootRootRatio>
            <MaxRootAllocation>0.25</MaxRootAllocation>
            <ShootRootGlfFactor>0.5</ShootRootGlfFactor>
            <UseReproSeasonFactor>yes</UseReproSeasonFactor>
            <ReproSeasonReferenceLatitude>41</ReproSeasonReferenceLatitude>
            <ReproSeasonTimingCoeff>0.14</ReproSeasonTimingCoeff>
            <ReproSeasonMaxAllocationIncrease>0.5</ReproSeasonMaxAllocationIncrease>
            <ReproSeasonAllocationCoeff>0.1</ReproSeasonAllocationCoeff>
            <FractionLeafMaximum>0.7</FractionLeafMaximum>
            <FractionLeafMinimum>0.7</FractionLeafMinimum>
            <FractionLeafDMThreshold>500</FractionLeafDMThreshold>
            <FractionLeafDMFactor>2000</FractionLeafDMFactor>
            <FractionLeafExponent>3</FractionLeafExponent>
            <FractionToStolon>0</FractionToStolon>
            <SpecificLeafArea>25</SpecificLeafArea>
            <SpecificRootLength>100</SpecificRootLength>
            <StolonEffectOnLAI>0</StolonEffectOnLAI>
            <ShootMaxEffectOnLAI>1000</ShootMaxEffectOnLAI>
            <MaxStemEffectOnLAI>1</MaxStemEffectOnLAI>
            <LiveLeavesPerTiller>3</LiveLeavesPerTiller>
            <TissueTurnoverRateShoot>0.05</TissueTurnoverRateShoot>
            <TissueTurnoverRateRoot>0.02</TissueTurnoverRateRoot>
            <DetachmentRateShoot>0.08</DetachmentRateShoot>
            <TurnoverTemperatureMin>2</TurnoverTemperatureMin>
            <TurnoverTemperatureRef>20</TurnoverTemperatureRef>
            <TurnoverTemperatureExponent>1</TurnoverTemperatureExponent>
            <TurnoverDroughtEffectMax>1</TurnoverDroughtEffectMax>
            <TurnoverDroughtThreshold>0.5</TurnoverDroughtThreshold>
            <TurnoverDefoliationCoefficient>0.5</TurnoverDefoliationCoefficient>
            <TurnoverDefoliationRootEffect>0.1</TurnoverDefoliationRootEffect>
            <FractionNLuxuryRemobilisable>
              <double>0.1</double>
              <double>0.1</double>
              <double>0.1</double>
            </FractionNLuxuryRemobilisable>
            <MinimumNFixation>0</MinimumNFixation>
            <MaximumNFixation>0</MaximumNFixation>
            <SoilSaturationEffectMax>0.1</SoilSaturationEffectMax>
            <MinimumWaterFreePorosity>-1</MinimumWaterFreePorosity>
            <SoilSaturationRecoveryFactor>0.25</SoilSaturationRecoveryFactor>
            <NDillutionCoefficient>0.25</NDillutionCoefficient>
            <GlfGeneric>1</GlfGeneric>
            <GlfSoilFertility>1</GlfSoilFertility>
            <PlantHeightMinimum>25</PlantHeightMinimum>
            <PlantHeightMaximum>600</PlantHeightMaximum>
            <PlantHeightMassForMax>10000</PlantHeightMassForMax>
            <PlantHeightExponent>2.8</PlantHeightExponent>
            <RootDepthMinimum>50</RootDepthMinimum>
            <RootDepthMaximum>750</RootDepthMaximum>
            <RootElongationRate>25</RootElongationRate>
            <RootDistributionDepthParam>90</RootDistributionDepthParam>
            <RootDistributionExponent>3.2</RootDistributionExponent>
            <DigestibilitiesCellWall>
              <double>0.6</double>
              <double>0.6</double>
              <double>0.6</double>
              <double>0.2</double>
            </DigestibilitiesCellWall>
            <MinimumGreenWt>100</MinimumGreenWt>
            <FractionStolonStanding>0</FractionStolonStanding>
            <PreferenceForGreenOverDead>1</PreferenceForGreenOverDead>
            <PreferenceForLeafOverStems>1</PreferenceForLeafOverStems>
            <WaterAvailableMethod>DefaultAPSIM</WaterAvailableMethod>
            <NitrogenAvailableMethod>BasicAgPasture</NitrogenAvailableMethod>
          </PastureSpecies>
          <PastureSpecies>
            <Name>WhiteClover</Name>
            <IncludeInDocumentation>true</IncludeInDocumentation>
            <MaximumNUptake>10</MaximumNUptake>
            <Albedo>0.26</Albedo>
            <Gsmax>0.011</Gsmax>
            <R50>200</R50>
            <SpeciesFamily>Legume</SpeciesFamily>
            <PhotosyntheticPathway>C3</PhotosyntheticPathway>
            <InitialShootDM>250</InitialShootDM>
            <InitialRootDM>150</InitialRootDM>
            <InitialRootDepth>350</InitialRootDepth>
            <ReferencePhotosyntheticRate>1</ReferencePhotosyntheticRate>
            <LightExtinctionCoefficient>0.8</LightExtinctionCoefficient>
            <GrowthTminimum>2</GrowthTminimum>
            <GrowthToptimum>22</GrowthToptimum>
            <GrowthTEffectExponent>1.7</GrowthTEffectExponent>
            <UseHeatStressFactor>yes</UseHeatStressFactor>
            <HeatOnsetTemperature>30</HeatOnsetTemperature>
            <HeatFullTemperature>36</HeatFullTemperature>
            <HeatRecoverySumDD>20</HeatRecoverySumDD>
            <HeatRecoveryTReference>25</HeatRecoveryTReference>
            <UseColdStressFactor>yes</UseColdStressFactor>
            <ColdOnsetTemperature>2</ColdOnsetTemperature>
            <ColdFullTemperature>-5</ColdFullTemperature>
            <ColdRecoverySumDD>30</ColdRecoverySumDD>
            <ColdRecoveryTReference>0</ColdRecoveryTReference>
            <MaintenanceRespirationCoefficient>0.04</MaintenanceRespirationCoefficient>
            <GrowthRespirationCoefficient>0.25</GrowthRespirationCoefficient>
            <RespirationTReference>20</RespirationTReference>
            <RespirationExponent>1.5</RespirationExponent>
            <NThresholdsForLeaves>
              <double>0.045</double>
              <double>0.02</double>
              <double>0.055</double>
            </NThresholdsForLeaves>
            <NThresholdsForStems>
              <double>0.0225</double>
              <double>0.01</double>
              <double>0.0275</double>
            </NThresholdsForStems>
            <NThresholdsForStolons>
              <double>0.0225</double>
              <double>0.01</double>
              <double>0.0275</double>
            </NThresholdsForStolons>
            <NThresholdsForRoots>
              <double>0.0225</double>
              <double>0.01</double>
              <double>0.0275</double>
            </NThresholdsForRoots>
            <DegreesDayForGermination>125</DegreesDayForGermination>
            <TargetShootRootRatio>4</TargetShootRootRatio>
            <MaxRootAllocation>0.25</MaxRootAllocation>
            <ShootRootGlfFactor>0.5</ShootRootGlfFactor>
            <UseReproSeasonFactor>yes</UseReproSeasonFactor>
            <ReproSeasonReferenceLatitude>41</ReproSeasonReferenceLatitude>
            <ReproSeasonTimingCoeff>0.14</ReproSeasonTimingCoeff>
            <ReproSeasonMaxAllocationIncrease>0.5</ReproSeasonMaxAllocationIncrease>
            <ReproSeasonAllocationCoeff>0.1</ReproSeasonAllocationCoeff>
            <FractionLeafMaximum>0.56</FractionLeafMaximum>
            <FractionLeafMinimum>0.28</FractionLeafMinimum>
            <FractionLeafDMThreshold>500</FractionLeafDMThreshold>
            <FractionLeafDMFactor>2000</FractionLeafDMFactor>
            <FractionLeafExponent>3</FractionLeafExponent>
            <FractionToStolon>0.2</FractionToStolon>
            <SpecificLeafArea>30</SpecificLeafArea>
            <SpecificRootLength>45</SpecificRootLength>
            <StolonEffectOnLAI>0.3</StolonEffectOnLAI>
            <ShootMaxEffectOnLAI>500</ShootMaxEffectOnLAI>
            <MaxStemEffectOnLAI>0.5</MaxStemEffectOnLAI>
            <LiveLeavesPerTiller>3</LiveLeavesPerTiller>
            <TissueTurnoverRateShoot>0.05</TissueTurnoverRateShoot>
            <TissueTurnoverRateRoot>0.02</TissueTurnoverRateRoot>
            <DetachmentRateShoot>0.11</DetachmentRateShoot>
            <TurnoverTemperatureMin>2</TurnoverTemperatureMin>
            <TurnoverTemperatureRef>20</TurnoverTemperatureRef>
            <TurnoverTemperatureExponent>1</TurnoverTemperatureExponent>
            <TurnoverDroughtEffectMax>1</TurnoverDroughtEffectMax>
            <TurnoverDroughtThreshold>0.5</TurnoverDroughtThreshold>
            <TurnoverDefoliationCoefficient>0.5</TurnoverDefoliationCoefficient>
            <TurnoverDefoliationRootEffect>0.1</TurnoverDefoliationRootEffect>
            <FractionNLuxuryRemobilisable>
              <double>0.1</double>
              <double>0.1</double>
              <double>0.1</double>
            </FractionNLuxuryRemobilisable>
            <MinimumNFixation>0.2</MinimumNFixation>
            <MaximumNFixation>0.6</MaximumNFixation>
            <SoilSaturationEffectMax>0.1</SoilSaturationEffectMax>
            <MinimumWaterFreePorosity>-1</MinimumWaterFreePorosity>
            <SoilSaturationRecoveryFactor>0.25</SoilSaturationRecoveryFactor>
            <NDillutionCoefficient>1</NDillutionCoefficient>
            <GlfGeneric>1</GlfGeneric>
            <GlfSoilFertility>1</GlfSoilFertility>
            <PlantHeightMinimum>25</PlantHeightMinimum>
            <PlantHeightMaximum>350</PlantHeightMaximum>
            <PlantHeightMassForMax>7500</PlantHeightMassForMax>
            <PlantHeightExponent>2.5</PlantHeightExponent>
            <RootDepthMinimum>30</RootDepthMinimum>
            <RootDepthMaximum>350</RootDepthMaximum>
            <RootElongationRate>25</RootElongationRate>
            <RootDistributionDepthParam>70</RootDistributionDepthParam>
            <RootDistributionExponent>2.5</RootDistributionExponent>
            <DigestibilitiesCellWall>
              <double>0.6</double>
              <double>0.6</double>
              <double>0.6</double>
              <double>0.2</double>
            </DigestibilitiesCellWall>
            <MinimumGreenWt>50</MinimumGreenWt>
            <FractionStolonStanding>0</FractionStolonStanding>
            <PreferenceForGreenOverDead>1</PreferenceForGreenOverDead>
            <PreferenceForLeafOverStems>1</PreferenceForLeafOverStems>
            <WaterAvailableMethod>DefaultAPSIM</WaterAvailableMethod>
            <NitrogenAvailableMethod>BasicAgPasture</NitrogenAvailableMethod>
          </PastureSpecies>
          <IncludeInDocumentation>true</IncludeInDocumentation>
          <ControlledBySward>yes</ControlledBySward>
          <WaterUptakeSource>species</WaterUptakeSource>
          <NUptakeSource>species</NUptakeSource>
        </Sward>
        <Soil>
          <Name>Soil</Name>
          <InitialWater>
            <Name>Initial water</Name>
            <IncludeInDocumentation>true</IncludeInDocumentation>
            <PercentMethod>FilledFromTop</PercentMethod>
            <FractionFull>0.987012987012987</FractionFull>
            <DepthWetSoil>NaN</DepthWetSoil>
          </InitialWater>
          <Water>
            <Name>Water</Name>
            <SoilCrop>
              <Name>SwardSoil</Name>
              <IncludeInDocumentation>true</IncludeInDocumentation>
              <LL>
                <double>0.15</double>
                <double>0.14</double>
                <double>0.06</double>
                <double>0.02</double>
                <double>0.01</double>
                <double>0.01</double>
                <double>0.01</double>
              </LL>
              <KL>
                <double>0.1</double>
                <double>0.1</double>
                <double>0.08</double>
                <double>0.04</double>
                <double>0.01</double>
                <double>0</double>
                <double>0</double>
              </KL>
              <XF>
                <double>1</double>
                <double>1</double>
                <double>1</double>
                <double>1</double>
                <double>1</double>
                <double>0</double>
                <double>0</double>
              </XF>
            </SoilCrop>
            <SoilCrop>
              <Name>RyegrassSoil</Name>
              <IncludeInDocumentation>true</IncludeInDocumentation>
              <LL>
                <double>0.14</double>
                <double>0.14</double>
                <double>0.03</double>
                <double>0.03</double>
                <double>0.03</double>
                <double>0.03</double>
                <double>0.03</double>
              </LL>
              <KL>
                <double>0.1</double>
                <double>0.1</double>
                <double>0.1</double>
                <double>0.02</double>
                <double>0</double>
                <double>0</double>
                <double>0</double>
              </KL>
              <XF>
                <double>1</double>
                <double>1</double>
                <double>1</double>
                <double>1</double>
                <double>0</double>
                <double>0</double>
                <double>0</double>
              </XF>
            </SoilCrop>
            <SoilCrop>
              <Name>WhiteCloverSoil</Name>
              <IncludeInDocumentation>true</IncludeInDocumentation>
              <LL>
                <double>0.14</double>
                <double>0.14</double>
                <double>0.03</double>
                <double>0.03</double>
                <double>0.03</double>
                <double>0.03</double>
                <double>0.03</double>
              </LL>
              <KL>
                <double>0.1</double>
                <double>0.1</double>
                <double>0.1</double>
                <double>0.02</double>
                <double>0</double>
                <double>0</double>
                <double>0</double>
              </KL>
              <XF>
                <double>1</double>
                <double>1</double>
                <double>1</double>
                <double>1</double>
                <double>0</double>
                <double>0</double>
                <double>0</double>
              </XF>
            </SoilCrop>
            <IncludeInDocumentation>true</IncludeInDocumentation>
            <Thickness>
              <double>150</double>
              <double>150</double>
              <double>200</double>
              <double>150</double>
              <double>250</double>
              <double>300</double>
              <double>300</double>
            </Thickness>
            <BD>
              <double>1.3</double>
              <double>1.35</double>
              <double>1</double>
              <double>0.53</double>
              <double>0.31</double>
              <double>0.3</double>
              <double>0.3</double>
            </BD>
            <AirDry>
              <double>0.05</double>
              <double>0.12</double>
              <double>0.055</double>
              <double>0.015</double>
              <double>0.01</double>
              <double>0.01</double>
              <double>0.01</double>
            </AirDry>
            <LL15>
              <double>0.15</double>
              <double>0.14</double>
              <double>0.055</double>
              <double>0.015</double>
              <double>0.01</double>
              <double>0.01</double>
              <double>0.01</double>
            </LL15>
            <DUL>
              <double>0.36</double>
              <double>0.34</double>
              <double>0.19</double>
              <double>0.065</double>
              <double>0.04</double>
              <double>0.03</double>
              <double>0.03</double>
            </DUL>
            <SAT>
              <double>0.45</double>
              <double>0.43</double>
              <double>0.25</double>
              <double>0.15</double>
              <double>0.11</double>
              <double>0.11</double>
              <double>0.11</double>
            </SAT>
            <KS>
              <double>5000</double>
              <double>2500</double>
              <double>3000</double>
              <double>10000</double>
              <double>17500</double>
              <double>20000</double>
              <double>20000</double>
            </KS>
          </Water>
          <SoilWater>
            <Name>SoilWater</Name>
            <IncludeInDocumentation>true</IncludeInDocumentation>
            <SummerDate>1-Nov</SummerDate>
            <SummerU>6</SummerU>
            <SummerCona>3.5</SummerCona>
            <WinterDate>1-apr</WinterDate>
            <WinterU>2</WinterU>
            <WinterCona>2</WinterCona>
            <DiffusConst>88</DiffusConst>
            <DiffusSlope>35</DiffusSlope>
            <Salb>0.13</Salb>
            <CN2Bare>73</CN2Bare>
            <CNRed>20</CNRed>
            <CNCov>0.8</CNCov>
            <slope>0</slope>
            <discharge_width>0</discharge_width>
            <catchment_area>0</catchment_area>
            <max_pond>0</max_pond>
            <Thickness>
              <double>100</double>
              <double>200</double>
              <double>300</double>
              <double>300</double>
              <double>300</double>
              <double>300</double>
              <double>300</double>
            </Thickness>
            <SWCON>
              <double>0.4</double>
              <double>0.5</double>
              <double>0.6</double>
              <double>0.6</double>
              <double>0.8</double>
              <double>0.8</double>
              <double>0.8</double>
            </SWCON>
            <KLAT>
              <double>0</double>
              <double>0</double>
              <double>0</double>
              <double>0</double>
              <double>0</double>
              <double>0</double>
              <double>0</double>
            </KLAT>
            <residueinterception>0</residueinterception>
          </SoilWater>
          <SoilOrganicMatter>
            <Name>SoilOrganicMatter</Name>
            <IncludeInDocumentation>true</IncludeInDocumentation>
            <RootCN>40</RootCN>
            <RootWt>1000</RootWt>
            <SoilCN>12</SoilCN>
            <EnrACoeff>7.4</EnrACoeff>
            <EnrBCoeff>0.2</EnrBCoeff>
            <Thickness>
              <double>150</double>
              <double>150</double>
              <double>200</double>
              <double>150</double>
              <double>250</double>
              <double>300</double>
              <double>300</double>
            </Thickness>
            <Depth>
              <string>0-15</string>
              <string>15-30</string>
              <string>30-50</string>
              <string>50-65</string>
              <string>65-90</string>
              <string>90-120</string>
              <string>120-150</string>
            </Depth>
            <OC>
              <double>3</double>
              <double>1</double>
              <double>0.6</double>
              <double>0.4</double>
              <double>0.25</double>
              <double>0.15</double>
              <double>0.1</double>
            </OC>
            <FBiom>
              <double>0.04</double>
              <double>0.02</double>
              <double>0.02</double>
              <double>0.01</double>
              <double>0.01</double>
              <double>0</double>
              <double>0</double>
            </FBiom>
            <FInert>
              <double>0.5</double>
              <double>0.7</double>
              <double>0.83</double>
              <double>0.9</double>
              <double>0.95</double>
              <double>0.99</double>
              <double>0.99</double>
            </FInert>
            <OCUnits>Total</OCUnits>
          </SoilOrganicMatter>
          <Analysis>
            <Name>Analysis</Name>
            <IncludeInDocumentation>true</IncludeInDocumentation>
            <Thickness>
              <double>100</double>
              <double>200</double>
              <double>300</double>
              <double>300</double>
              <double>300</double>
              <double>300</double>
              <double>300</double>
            </Thickness>
            <Rocks>
              <double>0</double>
              <double>0</double>
              <double>10</double>
              <double>40</double>
              <double>60</double>
              <double>70</double>
              <double>70</double>
            </Rocks>
            <Texture />
            <MunsellColour />
            <PH>
              <double>5.9</double>
              <double>5.9</double>
              <double>5.9</double>
              <double>5.9</double>
              <double>5.9</double>
              <double>5.9</double>
              <double>5.9</double>
            </PH>
            <CEC>
              <double>12.5</double>
              <double>10</double>
              <double>9</double>
              <double>5</double>
              <double>4</double>
              <double>4</double>
              <double>4</double>
            </CEC>
            <ParticleSizeSand>
              <double>15</double>
              <double>20</double>
              <double>25</double>
              <double>35</double>
              <double>40</double>
              <double>40</double>
              <double>40</double>
            </ParticleSizeSand>
            <ParticleSizeSilt>
              <double>65</double>
              <double>65</double>
              <double>63</double>
              <double>57</double>
              <double>54</double>
              <double>55</double>
              <double>55</double>
            </ParticleSizeSilt>
            <ParticleSizeClay>
              <double>20</double>
              <double>15</double>
              <double>12</double>
              <double>8</double>
              <double>6</double>
              <double>5</double>
              <double>5</double>
            </ParticleSizeClay>
            <PHUnits>Water</PHUnits>
            <BoronUnits>HotWater</BoronUnits>
          </Analysis>
          <Sample>
            <Name>Initial nitrogen</Name>
            <IncludeInDocumentation>true</IncludeInDocumentation>
            <Thickness>
              <double>100</double>
              <double>200</double>
              <double>300</double>
              <double>300</double>
              <double>300</double>
              <double>300</double>
              <double>300</double>
            </Thickness>
            <NO3>
              <double>7.619</double>
              <double>7.27</double>
              <double>3.871</double>
              <double>3.84</double>
              <double>3.81</double>
              <double>3.779</double>
              <double>3.691</double>
            </NO3>
            <NH4>
              <double>0.132</double>
              <double>0.132</double>
              <double>0.132</double>
              <double>0.132</double>
              <double>0.132</double>
              <double>0.132</double>
              <double>0.132</double>
            </NH4>
            <NO3Units>ppm</NO3Units>
            <NH4Units>ppm</NH4Units>
            <SWUnits>Volumetric</SWUnits>
            <OCUnits>Total</OCUnits>
            <PHUnits>Water</PHUnits>
          </Sample>
          <SoilNitrogen>
            <Name>SoilNitrogen</Name>
            <IncludeInDocumentation>true</IncludeInDocumentation>
            <fom_type>
              <string>default</string>
              <string>manure</string>
              <string>mucuna</string>
              <string>lablab</string>
              <string>shemp</string>
              <string>stable</string>
            </fom_type>
            <fract_carb>
              <double>0.2</double>
              <double>0.3</double>
              <double>0.54</double>
              <double>0.57</double>
              <double>0.45</double>
              <double>0</double>
            </fract_carb>
            <fract_cell>
              <double>0.7</double>
              <double>0.3</double>
              <double>0.37</double>
              <double>0.37</double>
              <double>0.47</double>
              <double>0.1</double>
            </fract_cell>
            <fract_lign>
              <double>0.1</double>
              <double>0.4</double>
              <double>0.09</double>
              <double>0.06</double>
              <double>0.08</double>
              <double>0.9</double>
            </fract_lign>
          </SoilNitrogen>
          <CERESSoilTemperature>
            <Name>CERESSoilTemperature</Name>
            <IncludeInDocumentation>true</IncludeInDocumentation>
          </CERESSoilTemperature>
          <IncludeInDocumentation>true</IncludeInDocumentation>
          <RecordNumber>0</RecordNumber>
          <SoilType>NZ_Sedimentary</SoilType>
          <LocalName>Lismore</LocalName>
          <Site>Winchmore</Site>
          <NearestTown>Ashburton</NearestTown>
          <Region>Canterbury</Region>
          <Country>New Zealand</Country>
          <NaturalVegetation />
          <Latitude>-48.48</Latitude>
          <Longitude>0</Longitude>
        </Soil>
        <IncludeInDocumentation>true</IncludeInDocumentation>
        <Area>1</Area>
        <Slope>0</Slope>
      </Zone>
      <IncludeInDocumentation>true</IncludeInDocumentation>
      <ShowPageOfGraphs>true</ShowPageOfGraphs>
    </Folder>
    <Graph>
      <Name>MinNPaddock</Name>
      <Series>
        <Name>Series</Name>
        <IncludeInDocumentation>true</IncludeInDocumentation>
        <Type>Scatter</Type>
        <XAxis>Bottom</XAxis>
        <YAxis>Left</YAxis>
        <ColourArgb>-16777216</ColourArgb>
        <FactorIndexToVaryColours>0</FactorIndexToVaryColours>
        <FactorIndexToVaryMarkers>-1</FactorIndexToVaryMarkers>
        <FactorIndexToVaryLines>-1</FactorIndexToVaryLines>
        <Marker>FilledCircle</Marker>
        <MarkerSize>Normal</MarkerSize>
        <Line>Solid</Line>
        <LineThickness>Normal</LineThickness>
        <Checkpoint>Current</Checkpoint>
        <TableName>Report</TableName>
        <XFieldName>Date</XFieldName>
        <YFieldName>minNPaddock</YFieldName>
        <ShowInLegend>true</ShowInLegend>
        <IncludeSeriesNameInLegend>true</IncludeSeriesNameInLegend>
        <Cumulative>false</Cumulative>
        <CumulativeX>false</CumulativeX>
      </Series>
      <IncludeInDocumentation>true</IncludeInDocumentation>
      <Axis>
        <Type>Bottom</Type>
        <Inverted>false</Inverted>
        <Minimum>NaN</Minimum>
        <Maximum>NaN</Maximum>
        <Interval>NaN</Interval>
      </Axis>
      <Axis>
        <Type>Left</Type>
        <Inverted>false</Inverted>
        <Minimum>NaN</Minimum>
        <Maximum>NaN</Maximum>
        <Interval>NaN</Interval>
      </Axis>
      <LegendPosition>TopLeft</LegendPosition>
      <DisabledSeries />
    </Graph>
    <Graph>
      <Name>MinNGod</Name>
      <Series>
        <Name>P1</Name>
        <IncludeInDocumentation>true</IncludeInDocumentation>
        <Type>Scatter</Type>
        <XAxis>Bottom</XAxis>
        <YAxis>Left</YAxis>
        <ColourArgb>-16777216</ColourArgb>
        <FactorIndexToVaryColours>-1</FactorIndexToVaryColours>
        <FactorIndexToVaryMarkers>-1</FactorIndexToVaryMarkers>
        <FactorIndexToVaryLines>-1</FactorIndexToVaryLines>
        <Marker>FilledCircle</Marker>
        <MarkerSize>Normal</MarkerSize>
        <Line>Solid</Line>
        <LineThickness>Normal</LineThickness>
        <Checkpoint>Current</Checkpoint>
        <TableName>ReportingWithPatches</TableName>
        <XFieldName>Date</XFieldName>
        <YFieldName>ReportingWithPatchesVariablesScript.MinNPatch(1)</YFieldName>
        <ShowInLegend>true</ShowInLegend>
        <IncludeSeriesNameInLegend>true</IncludeSeriesNameInLegend>
        <Cumulative>false</Cumulative>
        <CumulativeX>false</CumulativeX>
      </Series>
      <Series>
        <Name>P2</Name>
        <IncludeInDocumentation>true</IncludeInDocumentation>
        <Type>Scatter</Type>
        <XAxis>Bottom</XAxis>
        <YAxis>Left</YAxis>
        <ColourArgb>-1663232</ColourArgb>
        <FactorIndexToVaryColours>-1</FactorIndexToVaryColours>
        <FactorIndexToVaryMarkers>-1</FactorIndexToVaryMarkers>
        <FactorIndexToVaryLines>-1</FactorIndexToVaryLines>
        <Marker>FilledCircle</Marker>
        <MarkerSize>Normal</MarkerSize>
        <Line>Solid</Line>
        <LineThickness>Normal</LineThickness>
        <Checkpoint>Current</Checkpoint>
        <TableName>ReportingWithPatches</TableName>
        <XFieldName>Date</XFieldName>
        <YFieldName>ReportingWithPatchesVariablesScript.MinNPatch(2)</YFieldName>
        <ShowInLegend>true</ShowInLegend>
        <IncludeSeriesNameInLegend>true</IncludeSeriesNameInLegend>
        <Cumulative>false</Cumulative>
        <CumulativeX>false</CumulativeX>
      </Series>
      <Series>
        <Name>P3</Name>
        <IncludeInDocumentation>true</IncludeInDocumentation>
        <Type>Scatter</Type>
        <XAxis>Bottom</XAxis>
        <YAxis>Left</YAxis>
        <ColourArgb>-11094807</ColourArgb>
        <FactorIndexToVaryColours>-1</FactorIndexToVaryColours>
        <FactorIndexToVaryMarkers>-1</FactorIndexToVaryMarkers>
        <FactorIndexToVaryLines>-1</FactorIndexToVaryLines>
        <Marker>FilledCircle</Marker>
        <MarkerSize>Normal</MarkerSize>
        <Line>Solid</Line>
        <LineThickness>Normal</LineThickness>
        <Checkpoint>Current</Checkpoint>
        <TableName>ReportingWithPatches</TableName>
        <XFieldName>Date</XFieldName>
        <YFieldName>ReportingWithPatchesVariablesScript.MinNPatch(3)</YFieldName>
        <ShowInLegend>true</ShowInLegend>
        <IncludeSeriesNameInLegend>true</IncludeSeriesNameInLegend>
        <Cumulative>false</Cumulative>
        <CumulativeX>false</CumulativeX>
      </Series>
      <Series>
        <Name>P4</Name>
        <IncludeInDocumentation>true</IncludeInDocumentation>
        <Type>Scatter</Type>
        <XAxis>Bottom</XAxis>
        <YAxis>Left</YAxis>
        <ColourArgb>-16736653</ColourArgb>
        <FactorIndexToVaryColours>-1</FactorIndexToVaryColours>
        <FactorIndexToVaryMarkers>-1</FactorIndexToVaryMarkers>
        <FactorIndexToVaryLines>-1</FactorIndexToVaryLines>
        <Marker>FilledCircle</Marker>
        <MarkerSize>Normal</MarkerSize>
        <Line>Solid</Line>
        <LineThickness>Normal</LineThickness>
        <Checkpoint>Current</Checkpoint>
        <TableName>ReportingWithPatches</TableName>
        <XFieldName>Date</XFieldName>
        <YFieldName>ReportingWithPatchesVariablesScript.MinNPatch(4)</YFieldName>
        <ShowInLegend>true</ShowInLegend>
        <IncludeSeriesNameInLegend>true</IncludeSeriesNameInLegend>
        <Cumulative>false</Cumulative>
        <CumulativeX>false</CumulativeX>
      </Series>
      <Series>
        <Name>P5</Name>
        <IncludeInDocumentation>true</IncludeInDocumentation>
        <Type>Scatter</Type>
        <XAxis>Bottom</XAxis>
        <YAxis>Left</YAxis>
        <ColourArgb>-16747854</ColourArgb>
        <FactorIndexToVaryColours>-1</FactorIndexToVaryColours>
        <FactorIndexToVaryMarkers>-1</FactorIndexToVaryMarkers>
        <FactorIndexToVaryLines>-1</FactorIndexToVaryLines>
        <Marker>FilledCircle</Marker>
        <MarkerSize>Normal</MarkerSize>
        <Line>Solid</Line>
        <LineThickness>Normal</LineThickness>
        <Checkpoint>Current</Checkpoint>
        <TableName>ReportingWithPatches</TableName>
        <XFieldName>Date</XFieldName>
        <YFieldName>ReportingWithPatchesVariablesScript.MinNPatch(5)</YFieldName>
        <ShowInLegend>true</ShowInLegend>
        <IncludeSeriesNameInLegend>true</IncludeSeriesNameInLegend>
        <Cumulative>false</Cumulative>
        <CumulativeX>false</CumulativeX>
      </Series>
      <IncludeInDocumentation>true</IncludeInDocumentation>
      <Axis>
        <Type>Bottom</Type>
        <Inverted>false</Inverted>
        <Minimum>NaN</Minimum>
        <Maximum>NaN</Maximum>
        <Interval>NaN</Interval>
      </Axis>
      <Axis>
        <Type>Left</Type>
        <Inverted>false</Inverted>
        <Minimum>NaN</Minimum>
        <Maximum>NaN</Maximum>
        <Interval>NaN</Interval>
      </Axis>
      <LegendPosition>TopLeft</LegendPosition>
      <DisabledSeries />
    </Graph>
    <IncludeInDocumentation>true</IncludeInDocumentation>
  </Simulation>
  <Simulation>
    <Name>PseudoGrazedPaddock</Name>
    <Clock>
      <Name>Clock</Name>
      <IncludeInDocumentation>true</IncludeInDocumentation>
      <StartDate>1972-01-01T00:00:00</StartDate>
      <EndDate>1972-12-31T00:00:00</EndDate>
    </Clock>
    <Summary>
      <Name>SummaryFile</Name>
      <IncludeInDocumentation>true</IncludeInDocumentation>
    </Summary>
    <Weather>
      <Name>Weather</Name>
      <IncludeInDocumentation>true</IncludeInDocumentation>
      <FileName>%root%\Examples\WeatherFiles\lincoln.met</FileName>
      <ExcelWorkSheetName />
    </Weather>
    <SoilArbitrator>
      <Name>Soil Arbitrator</Name>
      <IncludeInDocumentation>true</IncludeInDocumentation>
    </SoilArbitrator>
    <Manager>
      <Name>PatchManager</Name>
      <IncludeInDocumentation>true</IncludeInDocumentation>
      <Script>
        <CuttingFrequency>0</CuttingFrequency>
        <CuttingResidual>1000</CuttingResidual>
        <NutrientReturnType>Constant</NutrientReturnType>
        <AmountFertNReturned>40</AmountFertNReturned>
        <AmountDungNReturned>0</AmountDungNReturned>
        <FertiliserDepth>200</FertiliserDepth>
        <FertiliserReturnPattern>RotatingInOrder</FertiliserReturnPattern>
        <ReportingFreq>OnGrazing</ReportingFreq>
        <PatchType>PP</PatchType>
        <NumGPPatches>50</NumGPPatches>
        <SystemID>C</SystemID>
      </Script>
      <Code><![CDATA[using System;
using Models.Core;
using Models.Soils;
using Models.PMF;
using Models.Zones;
using Models.AgPasture;
using System.Xml.Serialization;
using Models.Soils;
using Models.SurfaceOM;
using APSIM.Shared.Utilities;
using System.Collections.Generic;
using System.Diagnostics; // used with Debugger.Break(); to debug manager scripts



namespace Models
{
    [Serializable]
    [System.Xml.Serialization.XmlInclude(typeof(Model))]
    public class Script : Model
    {
        [Link] Clock Clock;
        [Link] Soil soil;
        [Link] ISummary summary = null;
        [Link] Weather Weather;
        [Link] Sward sward;
        [Link] Zone myZone;

        public string SoilType;
        public string SimLocation;
        public string SetIrrigation;
        public string GeneralFertType;
        public double GeneralFertAmt;
        public string PastureType;

        public int PatchCount;
        public int DaysSinceCut = 0;
        public int PatchNumForFert = -1;



        private int NumPaddocks = 0;  // NumPaddocks is the number of AgPastures and SoilWats etc 
        private int NumPatchesForFertiliser = 1;
        private double[] MonthlyFertAmt;
        private double[] FertDepthPlacement;
        private int[] PseudoRandomSeq;
        double iniOrgC;
        double iniOrgN;
        private int GrazingNumber = -1;
        private bool CutNow = false;

        private bool ReportToday = false;
        private double AmountDungCReturned = 0.0;
        private int nPatchesAdded = 0;
        private double NewArea;
        private int[] PatchToAddTo;
        private string[] PatchNmToAddTo = new string[1];  

        public event AddSoilCNPatchDelegate AddSoilCNPatch;
        public event BiomassRemovedDelegate BiomassRemoved;

        [XmlIgnore] public bool grazedToday { get; set; }
        [XmlIgnore] public double Harvested { get; set; }
        [XmlIgnore] public double HarvestedN { get; set; }
        [XmlIgnore] public double UreaReturned  { get; set; }
        [XmlIgnore] public int NumPatches { get; set; }


        [Description("Frequency of cutting (days) (0 will be interpreted as the end of each month)")]
        public int CuttingFrequency { get; set; }

        [Description("Residual pasture mass after cutting (kg DM /ha)")]
        public int CuttingResidual { get; set; }

        [Description("Type of nutrient return - calculated from the amount of herbage harvested or constant")]
        public NutrientReturnTypes NutrientReturnType { get; set; }

        [Description("Amount of fertiliser N to apply to simulation after each cutting (pretend urine) (kgN/ha) (ignored if nutrient return is FromHarvest)")]
        public double AmountFertNReturned { get; set; }

        [Description("Amount of dung N to apply to simulation after each cutting (kgN/ha) (ignored if nutrient return is FromHarvest)")]
        public double AmountDungNReturned { get; set; }

        [Description("Depth band (0 mm to X mm) for fertiliser placement (mm)")]
        public int FertiliserDepth { get; set; }
                        
        [Description("Pattern for fertiliser return")]
        public urineReturnTypes FertiliserReturnPattern { get; set; }

        [Description("Frequency of reporting")]
        public reportingFrequencyTypes ReportingFreq { get; set; }

        [Description("Patch type")]
        public patchTypes PatchType { get; set; }

        [Description("How many patches should there be in the grid? (used to create the grid for GP and the size of the patches for PP)")]
        public int NumGPPatches { get; set; }

        [Description("System identifier")]
        public systemTypes SystemID { get; set; }


//
        public enum systemTypes
        {
            /// <summary>A</summary>
            A,
            /// <summary>B</summary>
            B,
            /// <summary>C</summary>
            C,
            /// <summary>D</summary>
            D,
            /// <summary>E</summary>
            E,
            /// <summary>F</summary>
            F
        }

        public enum patchTypes
        {
            /// <summary>EP</summary>
            EP,
            /// <summary>EP</summary>
            GP,
            /// <summary>EP</summary>
            PP,
            /// <summary>EP</summary>
            UP
        }

        public enum reportingFrequencyTypes
        {
            /// <summary>Daily</summary>
            Daily,
            /// <summary>Every 10 days</summary>
            TenDaily,
            /// <summary>Monthly</summary>
            Monthly,
            /// <summary>Annual</summary>
            Annual,
            /// <summary>On grazing</summary>
            OnGrazing
        }

        public enum urineReturnTypes
        {
            /// <summary>Uniform</summary>
            UniformAcrossAllPatches,
            /// <summary>Rotating in order</summary>
            RotatingInOrder,
            /// <summary>Random</summary>
            Random,
            /// <summary>Pseudo-random</summary>
            PseudoRandom
        }

        public enum NutrientReturnTypes
        {
            /// <summary>Constant</summary>
            Constant,
            /// <summary>FromHarvest</summary>
            FromHarvest,
            /// <summary>SetMonthly</summary>
            SetMonthly
        }


        private void SetSystemParams()
        {
            if (SystemID == systemTypes.A)
            {
                SoilType = "HE";
                SimLocation = "Rua";
                SetIrrigation = "no";
                GeneralFertType = "NoWinter";
                GeneralFertAmt = 0.0;
                PastureType = "RyeWhite";
            }
            else if (SystemID == systemTypes.B)
            {
                SoilType = "HE";
                SimLocation = "Rua";
                SetIrrigation = "no";
                GeneralFertType = "NoWinter";
                GeneralFertAmt = 150.0;
                PastureType = "RyeWhite";
            }
            else if (SystemID == systemTypes.C)
            {
                SoilType = "VL";
                SimLocation = "Lin";
                SetIrrigation = "yes";
                GeneralFertType = "NoWinter";
                GeneralFertAmt = 0.0;
                PastureType = "RyeWhite";
            }
            else if (SystemID == systemTypes.D)
            {
                SoilType = "VL";
                SimLocation = "Lin";
                SetIrrigation = "yes";
                GeneralFertType = "NoWinter";
                GeneralFertAmt = 250.0;
                PastureType = "RyeWhite";
            }
            else if (SystemID == systemTypes.E)
            {
                SoilType = "VL";
                SimLocation = "Lin";
                SetIrrigation = "yes";
                GeneralFertType = "NoWinter";
                GeneralFertAmt = 400.0;
                PastureType = "GrassOnly";
            }
            else if (SystemID == systemTypes.F)
            {
                SoilType = "VL";
                SimLocation = "Lin";
                SetIrrigation = "no";
                GeneralFertType = "NoWinter";
                GeneralFertAmt = 0.0;
                PastureType = "RyeWhite";
            }
        }

        [EventSubscribe("StartOfSimulation")]
        private void OnStartOfSimulation(object sender, EventArgs e)
        {
            if (PatchType == patchTypes.EP)
                NumPatches = NumPaddocks;
            else if (PatchType == patchTypes.GP)
                NumPatches = NumGPPatches;
            else if (PatchType == patchTypes.PP)
                NumPatches = NumGPPatches; // but will actually use this to set the size of the newly created patches
            else if (PatchType == patchTypes.UP)
                NumPatches = NumGPPatches;
            else
                throw new Exception("Patch type not catered for");

            if ((PatchType == patchTypes.GP)&&(NumPaddocks>1)) throw new Exception("Patch type GP may only have one paddock/zone");
            if ((PatchType == patchTypes.PP)&&(NumPaddocks>1)) throw new Exception("Patch type PP may only have one paddock/zone");

            NumPatchesForFertiliser = 1;  // in the future this might be > 1
            if (FertiliserReturnPattern == urineReturnTypes.PseudoRandom)  // generate a return pattern up front
            {
                int MaxNumGrazings = (Clock.EndDate.Year - Clock.StartDate.Year + 1) * 52; //allow for a maximum of 1 per week

                PseudoRandomSeq = new int[MaxNumGrazings * NumPatchesForFertiliser];
                Random rndConstSeed = new Random((int) 666);
                string MyString = "";
                for (int i = 0; i < (MaxNumGrazings * NumPatchesForFertiliser); i++)
                {
                    PseudoRandomSeq[i] = rndConstSeed.Next(0, NumPatches);  // will never select NumPatches 
                    MyString += Convert.ToString(PseudoRandomSeq[i]) + " ";
                }
                Console.WriteLine("The order of patch return will be: " + MyString);
            }

            // Add patches
            if (PatchType == patchTypes.GP)
            {
                soil.SoilNitrogen.MaximumNitrogenAvailableToPlants = 3.0;
                soil.SoilNitrogen.NPartitionApproach = "BasedOnConcentrationAndDelta";
                soil.SoilNitrogen.AllowPatchAutoAmalgamation = "No";
                soil.SoilNitrogen.AutoAmalgamationApproach = "CompareAll";
                soil.SoilNitrogen.basePatchApproach = "IDBased";
                soil.SoilNitrogen.AllowPatchAmalgamationByAge = "No";
                soil.SoilNitrogen.PatchAgeForForcedMerge = 3.0;                                


                int[] PatchToAddTo = new int[1];  //need an array variable for this
                string[] PatchNmToAddTo = new string[1];  
                int nPatchesAdded = 0;
                double NewArea = 1.0 / NumPatches;

                while (nPatchesAdded < NumPatches - 1)
                {
                    AddSoilCNPatchType NewPatch = new AddSoilCNPatchType();
                    NewPatch.DepositionType = "ToNewPatch";
                    NewPatch.AreaFraction = NewArea;
                    PatchToAddTo[0] = 0;
                    PatchNmToAddTo[0] = "0";
                    NewPatch.AffectedPatches_id = PatchToAddTo;
                    NewPatch.AffectedPatches_nm = PatchNmToAddTo;
                    NewPatch.SuppressMessages = "no";

                    AddSoilCNPatch.Invoke(NewPatch);
                    nPatchesAdded += 1;
                }                

                summary.WriteMessage(this, "NumPatches at end of initialisation (GP):" + soil.SoilNitrogen.PatchCount.ToString());
            }
        }


        [EventSubscribe("Commencing")]
        private void OnSimulationCommencing(object sender, EventArgs e)
        {
            Console.WriteLine("Initialising the Manager for grazing, urine return and reporting");

            grazedToday = false;

            // count the paddocks in the simulation
            NumPaddocks = 0;   
            foreach (Zone zone in Apsim.FindAll(this.Parent, typeof(Zone)))
                NumPaddocks += 1;   
            Console.WriteLine("There are " + NumPaddocks + " in the simulation");

            MonthlyFertAmt = new double[] { 24,19,17,12,8,5,5,10,16,19,23,25};

            Console.WriteLine("Finished initialising the Manager for grazing, urine return and reporting");
        }

        [EventSubscribe("DoManagement")]
        private void OnDoManagement(object sender, EventArgs e)        
        {    

            // if this is the start of the simulation then sort out the depth for the fertiliser (aka urine) placement
            // can't do this in initialisation because of the module order
            if (Clock.Today == Clock.StartDate)
            {
                FertPlacementDepth();
                int i = -1;  // to use as a patch counter

                iniOrgC = 0.0; 
                iniOrgN = 0.0;
                foreach (Zone zone in Apsim.FindAll(this.Parent, typeof(Zone)))
                {
                    Soil soil = Apsim.Find(zone, typeof(Soil)) as Soil;
                    i += 1;
                    PatchCount = soil.SoilNitrogen.PatchCount;

                    for (int ii = 0; ii <= (soil.Thickness.Length - 1); ii++)
                    {
                        iniOrgC += soil.SoilNitrogen.TotalC[ii] / NumPaddocks; 
                        iniOrgN += soil.SoilNitrogen.organic_n[ii] / NumPaddocks;
                    }
                }
            }

            DaysSinceCut += 1;
            Harvested = 0.0;
            HarvestedN = 0.0;
            UreaReturned = 0.0;

            bool isEndOfMonth = false;
            if(Clock.Today.AddDays(1).Day == 1) isEndOfMonth=true;

            bool isEndOfYear = false;
            if(Clock.Today.AddDays(1).DayOfYear == 1) isEndOfYear=true;



            CutNow = false;
            grazedToday = false;
            if ((CuttingFrequency == 0) && (isEndOfMonth))
                CutNow = true;
            else if ((DaysSinceCut >= CuttingFrequency) && (CuttingFrequency > 0))
                CutNow = true;

            // should reporting be done today?  Do this here as need to know if grazing will happen
            if (ReportingFreq == reportingFrequencyTypes.Daily)
                ReportToday = true;
            else if ((ReportingFreq == reportingFrequencyTypes.TenDaily) && ((Clock.Today.Day== 10) || (Clock.Today.Day == 20) || (isEndOfMonth)))
                ReportToday = true;
            else if ((ReportingFreq == reportingFrequencyTypes.Monthly) && (isEndOfMonth))
                ReportToday = true;
            else if ((ReportingFreq == reportingFrequencyTypes.Annual) && (isEndOfYear))
                ReportToday = true;
            else if ((ReportingFreq == reportingFrequencyTypes.OnGrazing) && (CutNow))
                ReportToday = true;
            else
                ReportToday = false;

            //if (Clock.Today == Clock.StartDate) CutNow = true;

            if (CutNow)
            {

                grazedToday = true;
                Console.WriteLine("Doing Cutting");
                DaysSinceCut = 0;
                GrazingNumber += 1;  //was initialsed as -1 - this is used to pick the pseudo-random patch return number
                // GetPatchForUrineReturn();  now called in the deposition routine

                // do the cutting=grazing - it doesn't matter if there one (GP) or many (EP) physical paddocks in the simulation at this point
                int i = -1;  // to use as a patch counter
                Harvested = 0.0;
                HarvestedN = 0.0;
                foreach (Zone zone in Apsim.FindAll(this.Parent, typeof(Zone)))
                {
                    i += 1;
                    foreach (AgPasture.Sward sward in Apsim.Children(zone, typeof(AgPasture.Sward)))
                    {        
                        sward.Graze(amount: CuttingResidual, type: "SetResidueAmount");
                        Harvested += sward.HarvestedWt / NumPaddocks;
                        HarvestedN += sward.HarvestedN / NumPaddocks;
                    }
                }

                if (NutrientReturnType == NutrientReturnTypes.FromHarvest)
                {
                    AmountFertNReturned = HarvestedN * 0.50;  // TODO yikes - probably should not have hard-coded this, if it is not FromHarvest then the value has been set in the manager parameters
                    AmountDungNReturned = HarvestedN * 0.35;  // 
                    AmountDungCReturned = AmountDungNReturned * 20;
                }
                else if (NutrientReturnType == NutrientReturnTypes.SetMonthly)
                {
                    AmountFertNReturned = MonthlyFertAmt[Clock.Today.Month - 1];
                    AmountDungNReturned = AmountFertNReturned * (0.35 / 0.50);  // 
                    AmountDungCReturned = AmountDungNReturned * 20;
                }
                else
                {
                    // urine and dung are set from the parameters
                    AmountDungCReturned = AmountDungNReturned * 20;
                }


                Console.WriteLine("The amount of urea fertiliser to be returned to the whole paddock is " + AmountFertNReturned);

                DoUrineReturn();

                DoTramplingAndDungReturn();

                Console.WriteLine("Finished Cutting");

            } // this is the end of the CutNow section

            if ((GeneralFertAmt > 0.0) && (Clock.Today.AddDays(1).Day == 1))
            {
                DoFertiliser();
            }
        }


        public void DoTramplingAndDungReturn()
        {
            int i = -1;  // patch or paddock counter
            foreach (Zone zone in Apsim.FindAll(this.Parent, typeof(Zone)))
            {
                i += 1;
                SoilNitrogen soilN = Apsim.Find(zone, typeof(SoilNitrogen)) as SoilNitrogen;
                SurfaceOrganicMatter surfaceOM = Apsim.Find(zone, typeof(SurfaceOrganicMatter)) as SurfaceOrganicMatter; 

                // do some trampling of litter
                // accelerate the movement of surface litter into the soil - do this before the dung is added
                double temp = surfaceOM.Wt * 0.1;

                TillageType trampling = new TillageType();
                surfaceOM.Incorporate(fraction: (double) 0.1, depth: (double) 100.0);

                Console.WriteLine("For patch " + i + " the amount of litter trampled was " + temp + " and the remaining litter is " + (surfaceOM.Wt));

                // move the dung to litter - assume dung is 40% of that harvested and a C:N ratio of 
                BiomassRemovedType dung = new BiomassRemovedType();
                dung.crop_type = "RuminantDung_PastureFed";
                dung.dm_type = new string[] { "RuminantDung_PastureFed" };
                dung.dlt_crop_dm = new float[] { Convert.ToSingle(AmountDungCReturned / 0.4) };  // 
                dung.dlt_dm_n = new float[] { Convert.ToSingle(AmountDungNReturned) };    // 
                dung.dlt_dm_p = new float[] { 0.0F };
                dung.fraction_to_residue = new float[] { 1.0F };
                BiomassRemoved.Invoke(dung);
                Console.WriteLine("For patch " + i + " the amount of dung DM added to the litter was " + (AmountDungCReturned / 0.4) + " and the amount of N added in the dung was " + (AmountDungNReturned));

            } 
        } // this is the end of the trampling and dung patch/paddock section


        public void DoUrineReturn()
        {
            if (PatchType == patchTypes.EP)
            {                

                GetPatchForUrineReturn();  //sets the value for PatchNumForFert
                int i = -1; //to count the paddocks
                foreach (Zone zone in Apsim.FindAll(this.Parent, typeof(Zone)))
                {
                    i += 1;
                    if (i == PatchNumForFert)
                    {
                        Fertiliser thisFert = Apsim.Find(zone, typeof(Fertiliser)) as Fertiliser;
                        Soil soil = Apsim.Find(zone, typeof(Soil)) as Soil;

                        double tempDepth = 0.0;
                        for (int ii = 0; ii <= (soil.Depth.Length - 1); ii++)
                        {
                            tempDepth += soil.Thickness[ii];
                            thisFert.Apply(Amount: (double)(FertDepthPlacement[ii] * NumPatches * AmountFertNReturned), Type: Fertiliser.Types.UreaN, Depth: (tempDepth - soil.Thickness[ii] / 2));
                        }
                        UreaReturned += AmountFertNReturned;
                    }
                } 

            }
            else if (PatchType == patchTypes.GP)
            {
                GetPatchForUrineReturn();  //sets the value for PatchNumForFert
                int[] PatchToAddTo = new int[1];  //because need an array variable for this
                string[] PatchNmToAddTo = new string[0];  //need an array variable for this
                List<IModel> zones = Apsim.FindAll(this, typeof(Zone));
                Soil soil = Apsim.Find(zones[0], typeof(Soil)) as Soil; // Only one zone allowed for GP so use the first
                double[] UreaToAdd = new double[soil.Depth.Length];  

                for (int ii = 0; ii <= (soil.Depth.Length - 1); ii++)
                    UreaToAdd[ii] = FertDepthPlacement[ii] * NumPatches * AmountFertNReturned;

                UreaReturned += AmountFertNReturned;


                AddSoilCNPatchType CurrentPatch = new AddSoilCNPatchType();
                CurrentPatch.Sender = "manager";
                CurrentPatch.DepositionType = "ToSpecificPatch";
                PatchToAddTo[0] = PatchNumForFert;
                CurrentPatch.AffectedPatches_id = PatchToAddTo;
                CurrentPatch.AffectedPatches_nm = PatchNmToAddTo;
                CurrentPatch.Urea = UreaToAdd;

                AddSoilCNPatch.Invoke(CurrentPatch); 
            }
            else if (PatchType == patchTypes.PP)
            {
                // create a new patch from base of area 1/NumGPPatches
                // add the fertiliser to that patch
                // set amalgamation autmomatic
                List<IModel> zones = Apsim.FindAll(this, typeof(Zone));
                Soil soil = Apsim.Find(zones[0], typeof(Soil)) as Soil; // Only one zone allowed for GP so use the first

                double[] UreaToAdd = new double[soil.Depth.Length];  

                for (int ii = 0; ii <= (soil.Depth.Length - 1); ii++)
                UreaToAdd[ii] = FertDepthPlacement[ii] * NumPatches * AmountFertNReturned;

                int[] PatchToAddTo = new int[1];
                string[] PatchNmToAddTo = new string[0];  //need an array variable for this

                UreaReturned += AmountFertNReturned;

                AddSoilCNPatchType NewPatch = new AddSoilCNPatchType();
                NewPatch.DepositionType = "ToNewPatch";
                NewPatch.AreaFraction = 1.0 / NumPatches;
                PatchToAddTo[0] = 0;
                NewPatch.AffectedPatches_id = PatchToAddTo;
                NewPatch.AffectedPatches_nm = PatchNmToAddTo;
                NewPatch.Urea = UreaToAdd;

                Console.WriteLine("UreaToAdd " + UreaToAdd[0] + " " + UreaToAdd[1] + " " + UreaToAdd[2] + " " + UreaToAdd[3] + " " + UreaToAdd[4]);


                AddSoilCNPatch.Invoke(NewPatch);

                //throw new Exception("Have not set up the PP for DoUrineReturn yet");
            } 
            else if (PatchType == patchTypes.UP)
            {
                int i = -1;  // patch or paddock counter
                foreach (Zone zone in Apsim.FindAll(this.Parent, typeof(Zone)))
                {
                    i += 1;

                    Fertiliser thisFert = Apsim.Find(zone, typeof(Fertiliser)) as Fertiliser;
                    Soil soil = Apsim.Find(zone, typeof(Soil)) as Soil;

                    double tempDepth = 0.0;
                    for (int ii = 0; ii <= (soil.Depth.Length - 1); ii++)
                    {
                        tempDepth += soil.Thickness[ii];
                        thisFert.Apply(Amount: (double)(FertDepthPlacement[ii] * AmountFertNReturned), Type: Fertiliser.Types.UreaN, Depth: (tempDepth - soil.Thickness[ii] / 2));
                    } 
                    UreaReturned += AmountFertNReturned;
                }
            }
            else
                throw new Exception("Patch type not catered for");



        } // end of DoUrineReturn

        public void GetPatchForUrineReturn()
        {
            if (FertiliserReturnPattern == urineReturnTypes.UniformAcrossAllPatches)
                PatchNumForFert = 0;  // but will not be used
            else if (FertiliserReturnPattern == urineReturnTypes.RotatingInOrder)
            {
                PatchNumForFert += 1;  //increment the patch number
                if (PatchNumForFert >= NumPatches)
                    PatchNumForFert = 0;  // but reset back to the first patch if needed
                //Console.WriteLine("The patch for fertiliser return is " + PatchNumForFert);
            }
            else if (FertiliserReturnPattern == urineReturnTypes.Random)
                {
                Random rnd = new Random();
                PatchNumForFert = rnd.Next(0, NumPatches);
                //Console.WriteLine("The next random number patch for fertiliser return is " + PatchNumForFert);
            }
            else if (FertiliserReturnPattern == urineReturnTypes.PseudoRandom)
            {
                PatchNumForFert = PseudoRandomSeq[GrazingNumber];
                //Console.WriteLine("The next pseudo-random number patch for fertiliser return is " + PatchNumForFert);
            }
        } // this is the end of GetPatchForUrineReturn


        public void FertPlacementDepth()
        {
            // note that this only looks at the first paddock and assumes that all the paddocks are the same
            int iii = -1;  // to use as a patch counter
            foreach (Zone zone in Apsim.FindAll(this.Parent, typeof(Zone)))
            {
                iii += 1;
                if (iii == 0)
                {
                    Soil soil = Apsim.Find(zone, typeof(Soil)) as Soil;
                    double tempDepth = 0.0;
                    FertDepthPlacement = new double[soil.Thickness.Length];
                    for (int i = 0; i <= (soil.Thickness.Length - 1); i++)
                    {
                        tempDepth += soil.Thickness[i];
                        if (tempDepth <= FertiliserDepth)
                        {
                            FertDepthPlacement[i] = soil.Thickness[i] / FertiliserDepth;
                        }
                        else
                        {
                            FertDepthPlacement[i] = (FertiliserDepth - (tempDepth - soil.Thickness[i])) / (tempDepth - (tempDepth - soil.Thickness[i])) * soil.Thickness[i] / FertiliserDepth;
                            FertDepthPlacement[i] = Math.Max(0.0, Math.Min(1.0, FertDepthPlacement[i]));
                        }
                        //if (FertiliserReturnPattern == "UniformAcrossAllPatches")
                        //   Console.WriteLine("The proportion of fertiliser applied to the " + i + "th layer will be " + FertDepthPlacement[i]);
                        //else
                        Console.WriteLine("The proportion of fertiliser (* NumPatches) applied to the " + i + "th layer will be " + FertDepthPlacement[i]);
                    }
                }
            }

        } // this is the end of FertPlacementDepth


        public void DoFertiliser()
        {
            bool ApplyFert = true; // the test for first day of the month has already been done
            double NumMonths = 0;

            if (GeneralFertType == "Monthly")  
                NumMonths = 12;
            else if (GeneralFertType == "NoWinter")  
            {
                if ((Clock.Today.Month < 5) || (Clock.Today.Month > 7))
                {
                    ApplyFert = true;
                    NumMonths = 9;
                }
            }
            else
                throw new Exception("Wrong general fertiliser setting");

            if (ApplyFert)
            {
                foreach (Zone zone in Apsim.FindAll(this.Parent, typeof(Zone)))  // but actually there will only be a single paddock
                {
                    Fertiliser thisFert = Apsim.Find(zone, typeof(Fertiliser)) as Fertiliser;

                    //thisFert.Apply((float)(GeneralFertAmt / NumMonths), (float) (0.0), "urea_n");
                    thisFert.Apply(Amount: (double)(GeneralFertAmt / NumMonths), Type: Fertiliser.Types.UreaN, Depth: FertiliserDepth);
                    Console.WriteLine("Applying " + (GeneralFertAmt / NumMonths) + " kg of general fertiliser");
                }

            }
        }
    }
}
]]></Code>
    </Manager>
    <Manager>
      <Name>ReportingWithPatchesVariables</Name>
      <IncludeInDocumentation>true</IncludeInDocumentation>
      <Script>
        <verbose>False</verbose>
        <InputModule>PatchManager</InputModule>
        <OutputModule>ReportingWithPatches</OutputModule>
        <ReportingFreq>OnGrazing</ReportingFreq>
      </Script>
      <Code><![CDATA[using System;
using Models.Core;
using Models.Soils;
using Models.PMF;
using Models.Zones;
using Models.AgPasture;
using System.Xml.Serialization;
using Models.Soils;
using Models.SurfaceOM;
using APSIM.Shared.Utilities;
using System.Collections.Generic;
using System.Diagnostics; // used with Debugger.Break(); to debug manager scripts
using System;


namespace Models
{
    [Serializable]
    [System.Xml.Serialization.XmlInclude(typeof(Model))]
    public class Script : Model
    {
        [Link] Clock Clock;
        [Link] Simulation Simulation;
        [Link] Soil soil;
        [Link] ISummary summary = null;
        [Link] Weather Weather;
        //[Link] Zone zone;
        [Link] Sward sward;

        private Zone[] Zones {get; set; }

        private Models.Report.Report ReportingWithPatches;

        [Description("Verbose reporting mode (True/False)")]
        public bool verbose { get; set; }

        [Description("Name of the patch manager for input")]
        public string InputModule { get; set; }

        [Description("Name of the report for output")]
        public string OutputModule { get; set; }

        [Description("Frequency of reporting")]
        public reportingFrequencyTypes ReportingFreq { get; set; }

        [XmlIgnore] public int DaysSinceReport { get; set; }
        [XmlIgnore] public double NHA { get; set; }
        [XmlIgnore] public double PGR { get; set; }
        [XmlIgnore] public double HerbageGrazed { get; set; }
        [XmlIgnore] public double HerbageGrazedN { get; set; }
        [XmlIgnore] public double AreaUrinePatchesToday { get; set; }
        [XmlIgnore] public double UreaReturned { get; set; }
        [XmlIgnore] public double Fixation { get; set; }
        [XmlIgnore] public double LeachN { get; set; }
        [XmlIgnore] public double Denit { get; set; }
        [XmlIgnore] public double DenitN2O { get; set; }
        [XmlIgnore] public double OrgC { get; set; }
        [XmlIgnore] public double OrgN { get; set; }
        [XmlIgnore] public double dltOrgC { get; set; }
        [XmlIgnore] public double dltOrgN { get; set; }
        [XmlIgnore] public double MinN { get; set; }
        [XmlIgnore] public double UreaN { get; set; }
        [XmlIgnore] public double NH4N { get; set; }
        [XmlIgnore] public double NO3N { get; set; }
        [XmlIgnore] public double UreaAddedInGrazing { get; set; }

        [XmlIgnore] public double[] MinNPatch { get; set; }


        public int PatchCount;
        public int PaddockCount;
        public double Grazed;
        public double GrazedN;
        public double UrineNReturned;

        private double iniOrgC;
        private double iniOrgN;

        private bool ReportToday = false;      

        public enum reportingFrequencyTypes
        {
            /// <summary>Daily</summary>
            Daily,
            /// <summary>Every 10 days</summary>
            TenDaily,
            /// <summary>Monthly</summary>
            Monthly,
            /// <summary>Annual</summary>
            Annual,
            /// <summary>On grazing</summary>
            OnGrazing
        }

    

        [EventSubscribe("StartOfSimulation")]
        private void OnStartOfSimulation(object sender, EventArgs e)
        {

               if (verbose)
                summary.WriteMessage(this, "Initialising the Manager for grazing, urine return and reporting");
            DaysSinceReport = 0;
            PatchCount = soil.SoilNitrogen.PatchCount;
            PaddockCount=0;



            // Get list of zones in the simulation
            List<Zone> zones = new List<Zone>();

            foreach (Zone zone in Apsim.FindAll(this.Parent, typeof(Zone)))
            {
                zones.Add(zone as Zone);
                ReportingWithPatches = (Models.Report.Report)zone.Get("[" + OutputModule+ "]");
                PaddockCount++;
            }
            Zones = zones.ToArray();


            double myVariable;
            //myVariable = (double)ManageGriddedPaddock.Get("Script.Var1");
            //double grazedN = ManageGriddedPaddock.Get("Script.grazedN");

            if (verbose)
                summary.WriteMessage(this, "Finished initialising the Manager for grazing, urine return and reporting");
        }


        [EventSubscribe("DoDailyInitialisation")]
        private void OnDoDailyInitialisation(object sender, EventArgs e)
        {    
                    
            if (verbose)
                summary.WriteMessage(this, "In Daily Initialisation for the Reporting Manager on " + Clock.Today);
            if(Clock.Today == Clock.StartDate) {

                iniOrgC = 0.0; 
                iniOrgN = 0.0;            

                foreach (Zone zone in Zones)
                {
                    SoilNitrogen soilN = Apsim.Find(zone, typeof(SoilNitrogen)) as SoilNitrogen;
                    for (int ii = 0; ii < soil.Thickness.Length; ii++)
                    {
                        iniOrgC += soilN.TotalC[ii]; // TODO RJM Check this is right!
                        iniOrgN += soilN.organic_n[ii];
                    }
                }
            }        

            bool isEndOfMonth = false;
            if (Clock.Today.AddDays(1).Day == 1)
                isEndOfMonth = true;

            bool isEndOfYear = false;
            if (Clock.Today.Day == 31 && Clock.Today.Month == 12)
                isEndOfYear = true;


            bool GrazedToday = (bool) Apsim.Get(Simulation, InputModule + ".Script.grazedToday"); 

            // should reporting be done today?  
            if (ReportingFreq == reportingFrequencyTypes.Daily)
                ReportToday = true;
            else if ((ReportingFreq == reportingFrequencyTypes.TenDaily) && ((Clock.Today.Day == 10) || (Clock.Today.Day == 20) || (isEndOfMonth)))
                ReportToday = true;
            else if ((ReportingFreq == reportingFrequencyTypes.Monthly) && (isEndOfMonth))
                ReportToday = true;
            else if ((ReportingFreq == reportingFrequencyTypes.Annual) && (isEndOfYear))
                ReportToday = true;
            else if ((ReportingFreq == reportingFrequencyTypes.OnGrazing) && (GrazedToday))
                ReportToday = true;
            else
                ReportToday = false;
            if (verbose)
                summary.WriteMessage(this, "Finished Prepare for the Reporting Manager on " + Clock.Today);
        } 

        [EventSubscribe("EndOfDay")]
        private void OnEndOfDay(object sender, EventArgs e)
        {
            if (verbose)
                summary.WriteMessage(this, "In EndOfDay for the Reporting Manager on  " + Clock.Today);

            DaysSinceReport += 1;

            foreach (Zone zone in Zones)
            {

                Sward sward = Apsim.Find(zone, typeof(Sward)) as Sward;
                NHA += sward.HerbageGrowthWt/PaddockCount;
                PGR = NHA;  // divide this by the number of days just before reporting
                 Fixation += sward.FixedN/PaddockCount;

                Soil soil = Apsim.Find(zone, typeof(Soil)) as Soil;
                LeachN += soil.SoilWater.flow_no3[soil.SoilWater.flow_no3.Length-1]/PaddockCount;  // only take the deepest element

                for (int ii = 0; ii <= (soil.Thickness.Length - 1); ii++)
                {
                    Denit += soil.SoilNitrogen.Denitrification[ii]/PaddockCount;
                    DenitN2O += soil.SoilNitrogen.n2o_atm[ii]/PaddockCount;
                }


                Grazed = (double)zone.Get("[" + InputModule + "].Script.Harvested")/PaddockCount;
                GrazedN = (double)zone.Get("[" + InputModule + "].Script.HarvestedN")/PaddockCount;
                UrineNReturned = (double)zone.Get("[" + InputModule + "].Script.UreaReturned")/PaddockCount;
                //AreaUrinePatchesToday = (double)zone.Get("[" + InputModule + "].Script.areaUrinePatchesToday");
            } 

            HerbageGrazed += Grazed;
            HerbageGrazedN += GrazedN;
            UreaReturned += UrineNReturned;

            if(ReportToday) {
                OrgC = 0.0;
                OrgN = 0.0;
                UreaN = 0.0;
                NH4N = 0.0;
                NO3N = 0.0;
                MinN = 0.0;

                Soil soil1 = Apsim.Find(Zones[0], typeof(Soil)) as Soil;

                if(PaddockCount>1)
                    MinNPatch = new double[PaddockCount];
                else 
                    MinNPatch = new double[soil1.SoilNitrogen.PatchCount];


                int currentZoneNum = 0;
                foreach (Zone zone in Zones)
                {
                    Soil soil = Apsim.Find(zone, typeof(Soil)) as Soil;
                    Sward sward = Apsim.Find(zone, typeof(Sward)) as Sward;

                    for (int ii = 0; ii <= (soil.Thickness.Length - 1); ii++)
                    {
                        OrgC += soil.SoilNitrogen.TotalC[ii]/PaddockCount;  // TODO RJM Check this is right!
                        OrgN += soil.SoilNitrogen.organic_n[ii]/PaddockCount;
                        UreaN += soil.SoilNitrogen.urea[ii]/PaddockCount;
                        NH4N += soil.SoilNitrogen.NH4[ii]/PaddockCount;
                        NO3N += soil.SoilNitrogen.NO3[ii]/PaddockCount;

                    }

                    MinN = (UreaN + NH4N + NO3N)/PaddockCount;
                    if(PaddockCount>1) MinNPatch[currentZoneNum] = MinN;
                    dltOrgC = OrgC - iniOrgC; 
                    dltOrgN = OrgN - iniOrgN;
                    iniOrgC = OrgC; // ready for the next calculation of change in pools
                    iniOrgN = OrgN;
                    currentZoneNum++;
                }

                if(soil1.SoilNitrogen.PatchCount>1) {  // TODO will break if there is more than one paddock/zone AND more than one patch                    

                    for (int ii = 0; ii < (soil1.SoilNitrogen.PatchCount); ii++)
                    {
                        MinNPatch[ii] = soil1.SoilNitrogen.PatchTotalUrea[ii]+soil1.SoilNitrogen.PatchTotalNH4[ii] + soil1.SoilNitrogen.PatchTotalNO3[ii];
                    }
                }

                PGR = NHA / DaysSinceReport; 

                ReportingWithPatches.DoOutput();

                // now zero the reported variables
                DaysSinceReport = 0;
                HerbageGrazed = 0.0;
                HerbageGrazedN = 0.0;
                DaysSinceReport = 0;
                NHA = 0;
                PGR = 0;
                UreaReturned = 0;
                Fixation = 0;
                LeachN = 0;
                Denit = 0;
                DenitN2O = 0;
                OrgC = 0;
                OrgN = 0;
                MinN = 0;
                UreaN = 0;
                NH4N = 0;
                NO3N = 0;
            }
        }
    }
}
]]></Code>
    </Manager>
    <Report>
      <Name>ReportingWithPatches</Name>
      <IncludeInDocumentation>true</IncludeInDocumentation>
      <ExperimentFactorNames />
      <ExperimentFactorValues />
      <VariableNames>
        <string>Parent.Name as Zone</string>
        <string>[Clock].Today as Date</string>
        <string>[Clock].Today.Month as Month</string>
        <string>[Clock].Today.Month as Year</string>
        <string>[ReportingWithPatchesVariables]Script.UreaReturned as UrineNReturned</string>
        <string>[ReportingWithPatchesVariables]Script.NHA as NHA</string>
        <string>[PatchManager]Script.NumPatches as NumPatches</string>
        <string>[PatchManager]Script.ListOfPatches as ListOfPatches</string>
        <string>[ReportingWithPatchesVariables]Script.AreaUrinePatchesToday as AreaUrinePatchesToday</string>
        <string>[ReportingWithPatchesVariables]Script.HerbageGrazed as HerbageGrazed</string>
        <string>[ReportingWithPatchesVariables]Script.HerbageGrazedN as HerbageGrazedN</string>
        <string>[ReportingWithPatchesVariables]Script.LeachN as LeachN</string>
        <string>[ReportingWithPatchesVariables]Script.Denit as Denit</string>
        <string>[ReportingWithPatchesVariables]Script.Fixation as Fixation</string>
        <string>[ReportingWithPatchesVariables]Script.MinN as MinN</string>
        <string>[ReportingWithPatchesVariables]Script.UreaN as UreaN</string>
        <string>[ReportingWithPatchesVariables]Script.NH4N as NH4N</string>
        <string>[ReportingWithPatchesVariables]Script.NO3N as NO3N</string>
        <string>[ReportingWithPatchesVariables]Script.dltOrgC as dltOrgC</string>
        <string>[ReportingWithPatchesVariables]Script.dltOrgN as dltOrgN</string>
      </VariableNames>
      <EventNames>
        <string />
      </EventNames>
    </Report>
    <Zone>
      <Name>Paddock</Name>
      <Manager>
        <Name>CentrePivot</Name>
        <IncludeInDocumentation>true</IncludeInDocumentation>
        <Script>
          <allowIrrigation>yes</allowIrrigation>
          <IrrigStart>1-sep</IrrigStart>
          <IrrigEnd>30-apr</IrrigEnd>
          <SoilDepth>500</SoilDepth>
          <CritPAWForShallow>60</CritPAWForShallow>
          <CritRainToPause>30</CritRainToPause>
          <DaysToPauseOnCritRain>3</DaysToPauseOnCritRain>
          <IrrigReturnShallow>2</IrrigReturnShallow>
          <IrrigAmtShallow>10</IrrigAmtShallow>
          <PercPAWIrrigDeficitShallow>30</PercPAWIrrigDeficitShallow>
          <IrrigEffShallow>100</IrrigEffShallow>
          <IrrigReturnDeep>4</IrrigReturnDeep>
          <IrrigAmtDeep>20</IrrigAmtDeep>
          <PercPAWIrrigDeficitDeep>25</PercPAWIrrigDeficitDeep>
          <IrrigEffDeep>100</IrrigEffDeep>
          <TodayDeficit>123.894</TodayDeficit>
          <TodayDeficit_nve>-123.894</TodayDeficit_nve>
          <IrrigDay>3</IrrigDay>
          <SoilPAW>63.65</SoilPAW>
          <IrrigDeficit>25</IrrigDeficit>
          <IrrigReturn>4</IrrigReturn>
          <IrrigAmt>20</IrrigAmt>
          <IrrigEff>100</IrrigEff>
          <Rain3>0</Rain3>
          <Days2Pause>-80</Days2Pause>
        </Script>
        <Code><![CDATA[using System;
using Models.Core;
using Models.PMF;
using Models.Soils;
using System.Xml.Serialization;
using Models.PMF;
using APSIM.Shared.Utilities;
using System.Diagnostics; // used with Debugger.Break(); to debug manager scripts
        
namespace Models
{
    [Serializable] 
    [System.Xml.Serialization.XmlInclude(typeof(Model))]
    public class Script : Model
    {
        //Communication to other modules
        [Link] ISummary summary = null;
        [Link] Irrigation irrigation;
        [Link] Clock Clock;
        [Link] Soil soil;
        [Link] Weather Met; 
        [Link(IsOptional = true)] ICrop existingCrop;
       
        //User inputs from properties tab
        [Description("Turn irrigation on?")]
        public answerTypes allowIrrigation { get; set; }
        [Description("Start of irrigation season (dd-MMM)")]
        public string IrrigStart { get; set; }
        [Description("End of irrigation season (dd-MMM)")]
        public string IrrigEnd { get; set; }
        [Description("Enter the depth to which water deficit is computed (mm)")]
        public double SoilDepth { get; set; }
        [Description("PAW below which soil is considered 'shallow' (mm)")]
        public double CritPAWForShallow { get; set; }
        [Description("Amount of rainfall over the last 3 days to cause pause to irrigator (mm)")]
        public double CritRainToPause { get; set; }
        [Description("Number of days to pause irrigator after critical rainfall (days)")]
        public double DaysToPauseOnCritRain { get; set; }

        [Description("Shallow Soils: Irrigation return period (days)")]
        public double IrrigReturnShallow { get; set; }
        [Description("Shallow Soils: Effective irrigation amount (mm)")]
        public double IrrigAmtShallow { get; set; }
        [Description("Shallow Soils: Percentage of PAW at which to irrigate (%)")]
        public double PercPAWIrrigDeficitShallow { get; set; }
        [Description("Shallow Soils: Irrigation efficiency (%)")]
        public double IrrigEffShallow { get; set; }

        [Description("Deep Soils: Irrigation return period (days)")]
        public double IrrigReturnDeep { get; set; }
        [Description("Deep Soils: Effective irrigation amount (mm)")]
        public double IrrigAmtDeep { get; set; }
        [Description("Deep Soils: Percentage of PAW at which to irrigate (%)")]
        public double PercPAWIrrigDeficitDeep { get; set; }
        [Description("Deep Soils: Irrigation efficiency (%)")]
        public double IrrigEffDeep { get; set; }

        // Outputs
        public double TodayDeficit { get; set; }
        public double TodayDeficit_nve { get; set; }
        public double IrrigDay { get; set; }
        public double SoilPAW { get; set; }
        public double IrrigDeficit { get; set; }
        public double IrrigReturn { get; set; }
        public double IrrigAmt { get; set; }
        public double IrrigEff { get; set; }
        public double Rain3 { get; set; }

        public double Days2Pause { get; set; }

        // internal use
        private DateTime StartDate;               //The date when irrigation start (in date format)
        private DateTime EndDate;                 //The date when irrigation finish (in date format)
        private double RainToday=0;
        public double[] Rain_3;

        public enum answerTypes
        {
            /// <summary>a positive answer</summary>
            yes,
            /// <summary>a negative answer</summary>
            no
        }


        [EventSubscribe("StartOfSimulation")]
        private void OnStartOfSimulation(object sender, EventArgs e)
        {
            summary.WriteMessage(this, "==================================================");
            summary.WriteMessage(this, "                CentrePivot initialising          ");
            summary.WriteMessage(this, "");

            IrrigDay = 5000;  //so will reset to 1 on first day
              StartDate = DateTime.Parse(IrrigStart);
              EndDate = DateTime.Parse(IrrigEnd);

            Rain3 = 0;
            Rain_3 = new double[4];
            Rain_3[0] = 0;
            Rain_3[1] = 0;
            Rain_3[2] = 0;

              SoilPAW = 0.0;

              double[] sw_dul = soil.DULmm;
              double[] sw_15 = soil.LL15mm;  
              double MySoilDepth = 0;
              for(int z=0;z<soil.Thickness.Length;z++) {
                  MySoilDepth+=soil.Thickness[z];
                  if (MySoilDepth<= SoilDepth) 
                      SoilPAW+=sw_dul[z] - sw_15[z];    
              }

              if(SoilPAW <= CritPAWForShallow) {      
                IrrigDeficit = PercPAWIrrigDeficitShallow / 100 * SoilPAW;
                IrrigReturn = IrrigReturnShallow;
                IrrigAmt = IrrigAmtShallow;
                IrrigEff = IrrigEffShallow ;           
                summary.WriteMessage(this, "  Soil is considered to be shallow " + CritPAWForShallow + " " + SoilPAW);
            } 
            else 
            {
                IrrigDeficit = PercPAWIrrigDeficitDeep;
                IrrigReturn = IrrigReturnDeep;
                IrrigAmt = IrrigAmtDeep;
                IrrigEff = IrrigEffDeep;
                summary.WriteMessage(this, "  Soil is considered to be deep");
            }

            summary.WriteMessage(this, "  Irrigation critical deficit (mm): " + IrrigDeficit);
            summary.WriteMessage(this, "          Irrigation return (days): " + IrrigReturn);
            summary.WriteMessage(this, "     Irrigation pumped amount (mm): " + IrrigAmt);
            summary.WriteMessage(this, "         Irrigation efficiency (%): " + IrrigEff);
            summary.WriteMessage(this, "");
            summary.WriteMessage(this, "                CentrePivot initialised");
            summary.WriteMessage(this, "==================================================");
            
        }

        [EventSubscribe("Commencing")]
        private void OnSimulationCommencing(object sender, EventArgs e)
        {
        }

       [EventSubscribe("PreparingNewWeatherData")]
        private void OnPreparingNewWeatherData(object sender, EventArgs e)
        {
            RainToday = Met.Rain; //takes note of how much rain was due to fall today        
        }

        //[EventSubscribe("DoDailyInitialisation")]
        //private void OnDoDailyInitialisation(object sender, EventArgs e) 
        //{
        //}

        [EventSubscribe("StartOfDay")]
        private void OnStartOfDay(object sender, EventArgs e)
        {
            int rain=0;

            Rain_3[2] = Rain_3[1];
            Rain_3[1] = Rain_3[0];
            Rain_3[0] = RainToday;
            Rain3 = Rain_3[0] + Rain_3[1] + Rain_3[2]; //sums the rain in the last 3 days
            if(Rain3 >= CritRainToPause)
                Days2Pause = DaysToPauseOnCritRain;
            else
                Days2Pause = Days2Pause - 1;

            double[] sw_dul = soil.DULmm;
            double[] sw_sw = soil.SWAtWaterThickness;  // ??? was MySwim.sw_dep
              double[] sw_15 = soil.LL15mm;  
              double MySoilDepth = 0;

            TodayDeficit = 0.0;
            SoilPAW = 0.0;

              for(int z=0;z<soil.Thickness.Length;z++) {
                  MySoilDepth+=soil.Thickness[z];
                  if (MySoilDepth<= SoilDepth) {
                      SoilPAW+=sw_dul[z] - sw_15[z];    
                      TodayDeficit += sw_dul[z] - Math.Min(sw_dul[z], sw_sw[z]);
                  }
              }
            TodayDeficit_nve = -1 * TodayDeficit;

            if (isBetween(Clock.Today, StartDate, EndDate)) {
                 if(SoilPAW <= CritPAWForShallow) {      
                    IrrigDeficit = PercPAWIrrigDeficitShallow / 100 * SoilPAW;
                    IrrigReturn = IrrigReturnShallow;
                    IrrigAmt = IrrigAmtShallow;
                    IrrigEff = IrrigEffShallow ;           
                } 
                else 
                {
                    IrrigDeficit = PercPAWIrrigDeficitDeep;
                    IrrigReturn = IrrigReturnDeep;
                    IrrigAmt = IrrigAmtDeep;
                    IrrigEff = IrrigEffDeep;
                }

                if(Days2Pause < 0.5) {
                    IrrigDay = IrrigDay + 1;
                    if(IrrigDay > IrrigReturn)
                        IrrigDay = 1;  // and day = 1 is when the irrigation happens                    

                    if ((TodayDeficit >= IrrigDeficit) && (allowIrrigation == answerTypes.yes)) {
                        if(IrrigDay == 1){
                            double AmountToApply = (IrrigAmt / (IrrigEff / 100.0));
                            //summary.WriteMessage(this, "Rain today was " + RainToday + ". Applying " + AmountToApply+ " mm of irrigation");
                            irrigation.Apply(AmountToApply);

                        }
                    }
                }
            }
        }

        ///Checks whether theDate is between iniDate and endDate (non-year specific)
        private bool isBetween(DateTime theDay, DateTime iniDate, DateTime endDate)
        {
            bool result = false;
            if (iniDate.DayOfYear < endDate.DayOfYear)
            {
                // period is within one year, ex: summer in the northern hemisphere
                if ((theDay.DayOfYear >= iniDate.DayOfYear) && (theDay.DayOfYear <= endDate.DayOfYear))
                    result = true;
            }
            else
            {
                // period goes over the end of the year, ex: summer in the southern hemisphere
                if ((theDay.DayOfYear >= iniDate.DayOfYear) || (theDay.DayOfYear <= endDate.DayOfYear))
                    result = true;
            }
            
            return result;
        }

    }
}
]]></Code>
      </Manager>
      <SurfaceOrganicMatter>
        <Name>SurfaceOrganicMatter</Name>
        <IncludeInDocumentation>true</IncludeInDocumentation>
        <PondActive>no</PondActive>
        <ReportAdditions>no</ReportAdditions>
        <ReportRemovals>no</ReportRemovals>
        <ResidueTypes>
          <Name>ResidueTypes</Name>
          <IncludeInDocumentation>true</IncludeInDocumentation>
          <LoadFromResource>ResidueTypes</LoadFromResource>
        </ResidueTypes>
        <TillageTypes>
          <Name>TillageTypesList</Name>
          <IncludeInDocumentation>true</IncludeInDocumentation>
          <TillageType />
        </TillageTypes>
        <Pools>
          <Pool>
            <PoolName>grass</PoolName>
            <ResidueType>grass</ResidueType>
            <Mass>500</Mass>
            <CNRatio>15</CNRatio>
            <CPRatio>NaN</CPRatio>
            <StandingFraction>0</StandingFraction>
          </Pool>
        </Pools>
        <PoolName>grass</PoolName>
        <type>grass</type>
        <mass>500</mass>
        <standing_fraction>0</standing_fraction>
        <cpr />
        <cnr>15</cnr>
        <CriticalResidueWeight>2000</CriticalResidueWeight>
        <OptimumDecompTemp>20</OptimumDecompTemp>
        <MaxCumulativeEOS>20</MaxCumulativeEOS>
        <CNRatioDecompCoeff>0.277</CNRatioDecompCoeff>
        <CNRatioDecompThreshold>25</CNRatioDecompThreshold>
        <TotalLeachRain>25</TotalLeachRain>
        <MinRainToLeach>10</MinRainToLeach>
        <CriticalMinimumOrganicC>0.004</CriticalMinimumOrganicC>
        <DefaultCPRatio>0</DefaultCPRatio>
        <DefaultStandingFraction>0</DefaultStandingFraction>
        <StandingExtinctCoeff>0.5</StandingExtinctCoeff>
        <FractionFaecesAdded>0.5</FractionFaecesAdded>
      </SurfaceOrganicMatter>
      <MicroClimate>
        <Name>MicroClimate</Name>
        <IncludeInDocumentation>true</IncludeInDocumentation>
        <a_interception>0</a_interception>
        <b_interception>1</b_interception>
        <c_interception>0</c_interception>
        <d_interception>0</d_interception>
        <soil_albedo>0.23</soil_albedo>
        <sun_angle>15</sun_angle>
        <soil_heat_flux_fraction>0.4</soil_heat_flux_fraction>
        <night_interception_fraction>0.5</night_interception_fraction>
        <refheight>2</refheight>
        <albedo>0.15</albedo>
        <emissivity>0.95999999999999974</emissivity>
        <RadIntTotal>-4.3854844207218751</RadIntTotal>
      </MicroClimate>
      <Irrigation>
        <Name>Irrigation</Name>
        <IncludeInDocumentation>true</IncludeInDocumentation>
      </Irrigation>
      <Fertiliser>
        <Name>Fertiliser</Name>
        <IncludeInDocumentation>true</IncludeInDocumentation>
      </Fertiliser>
      <SoluteManager>
        <Name>SoluteManager</Name>
        <IncludeInDocumentation>true</IncludeInDocumentation>
      </SoluteManager>
      <Sward>
        <Name>Sward</Name>
        <PastureSpecies>
          <Name>Ryegrass</Name>
          <IncludeInDocumentation>true</IncludeInDocumentation>
          <MaximumNUptake>10</MaximumNUptake>
          <Albedo>0.26</Albedo>
          <Gsmax>0.011</Gsmax>
          <R50>200</R50>
          <SpeciesFamily>Grass</SpeciesFamily>
          <PhotosyntheticPathway>C3</PhotosyntheticPathway>
          <InitialShootDM>750</InitialShootDM>
          <InitialRootDM>450</InitialRootDM>
          <InitialRootDepth>750</InitialRootDepth>
          <ReferencePhotosyntheticRate>1</ReferencePhotosyntheticRate>
          <LightExtinctionCoefficient>0.5</LightExtinctionCoefficient>
          <GrowthTminimum>1</GrowthTminimum>
          <GrowthToptimum>20</GrowthToptimum>
          <GrowthTEffectExponent>1.7</GrowthTEffectExponent>
          <UseHeatStressFactor>yes</UseHeatStressFactor>
          <HeatOnsetTemperature>28</HeatOnsetTemperature>
          <HeatFullTemperature>35</HeatFullTemperature>
          <HeatRecoverySumDD>30</HeatRecoverySumDD>
          <HeatRecoveryTReference>25</HeatRecoveryTReference>
          <UseColdStressFactor>yes</UseColdStressFactor>
          <ColdOnsetTemperature>1</ColdOnsetTemperature>
          <ColdFullTemperature>-5</ColdFullTemperature>
          <ColdRecoverySumDD>25</ColdRecoverySumDD>
          <ColdRecoveryTReference>0</ColdRecoveryTReference>
          <MaintenanceRespirationCoefficient>0.03</MaintenanceRespirationCoefficient>
          <GrowthRespirationCoefficient>0.25</GrowthRespirationCoefficient>
          <RespirationTReference>20</RespirationTReference>
          <RespirationExponent>1.5</RespirationExponent>
          <NThresholdsForLeaves>
            <double>0.04</double>
            <double>0.012</double>
            <double>0.05</double>
          </NThresholdsForLeaves>
          <NThresholdsForStems>
            <double>0.02</double>
            <double>0.006</double>
            <double>0.025</double>
          </NThresholdsForStems>
          <NThresholdsForStolons>
            <double>0</double>
            <double>0</double>
            <double>0</double>
          </NThresholdsForStolons>
          <NThresholdsForRoots>
            <double>0.02</double>
            <double>0.006</double>
            <double>0.025</double>
          </NThresholdsForRoots>
          <DegreesDayForGermination>125</DegreesDayForGermination>
          <TargetShootRootRatio>4</TargetShootRootRatio>
          <MaxRootAllocation>0.25</MaxRootAllocation>
          <ShootRootGlfFactor>0.5</ShootRootGlfFactor>
          <UseReproSeasonFactor>yes</UseReproSeasonFactor>
          <ReproSeasonReferenceLatitude>41</ReproSeasonReferenceLatitude>
          <ReproSeasonTimingCoeff>0.14</ReproSeasonTimingCoeff>
          <ReproSeasonMaxAllocationIncrease>0.5</ReproSeasonMaxAllocationIncrease>
          <ReproSeasonAllocationCoeff>0.1</ReproSeasonAllocationCoeff>
          <FractionLeafMaximum>0.7</FractionLeafMaximum>
          <FractionLeafMinimum>0.7</FractionLeafMinimum>
          <FractionLeafDMThreshold>500</FractionLeafDMThreshold>
          <FractionLeafDMFactor>2000</FractionLeafDMFactor>
          <FractionLeafExponent>3</FractionLeafExponent>
          <FractionToStolon>0</FractionToStolon>
          <SpecificLeafArea>25</SpecificLeafArea>
          <SpecificRootLength>100</SpecificRootLength>
          <StolonEffectOnLAI>0</StolonEffectOnLAI>
          <ShootMaxEffectOnLAI>1000</ShootMaxEffectOnLAI>
          <MaxStemEffectOnLAI>1</MaxStemEffectOnLAI>
          <LiveLeavesPerTiller>3</LiveLeavesPerTiller>
          <TissueTurnoverRateShoot>0.05</TissueTurnoverRateShoot>
          <TissueTurnoverRateRoot>0.02</TissueTurnoverRateRoot>
          <DetachmentRateShoot>0.08</DetachmentRateShoot>
          <TurnoverTemperatureMin>2</TurnoverTemperatureMin>
          <TurnoverTemperatureRef>20</TurnoverTemperatureRef>
          <TurnoverTemperatureExponent>1</TurnoverTemperatureExponent>
          <TurnoverDroughtEffectMax>1</TurnoverDroughtEffectMax>
          <TurnoverDroughtThreshold>0.5</TurnoverDroughtThreshold>
          <TurnoverDefoliationCoefficient>0.5</TurnoverDefoliationCoefficient>
          <TurnoverDefoliationRootEffect>0.1</TurnoverDefoliationRootEffect>
          <FractionNLuxuryRemobilisable>
            <double>0.1</double>
            <double>0.1</double>
            <double>0.1</double>
          </FractionNLuxuryRemobilisable>
          <MinimumNFixation>0</MinimumNFixation>
          <MaximumNFixation>0</MaximumNFixation>
          <SoilSaturationEffectMax>0.1</SoilSaturationEffectMax>
          <MinimumWaterFreePorosity>-1</MinimumWaterFreePorosity>
          <SoilSaturationRecoveryFactor>0.25</SoilSaturationRecoveryFactor>
          <NDillutionCoefficient>0.25</NDillutionCoefficient>
          <GlfGeneric>1</GlfGeneric>
          <GlfSoilFertility>1</GlfSoilFertility>
          <PlantHeightMinimum>25</PlantHeightMinimum>
          <PlantHeightMaximum>600</PlantHeightMaximum>
          <PlantHeightMassForMax>10000</PlantHeightMassForMax>
          <PlantHeightExponent>2.8</PlantHeightExponent>
          <RootDepthMinimum>50</RootDepthMinimum>
          <RootDepthMaximum>750</RootDepthMaximum>
          <RootElongationRate>25</RootElongationRate>
          <RootDistributionDepthParam>90</RootDistributionDepthParam>
          <RootDistributionExponent>3.2</RootDistributionExponent>
          <DigestibilitiesCellWall>
            <double>0.6</double>
            <double>0.6</double>
            <double>0.6</double>
            <double>0.2</double>
          </DigestibilitiesCellWall>
          <MinimumGreenWt>100</MinimumGreenWt>
          <FractionStolonStanding>0</FractionStolonStanding>
          <PreferenceForGreenOverDead>1</PreferenceForGreenOverDead>
          <PreferenceForLeafOverStems>1</PreferenceForLeafOverStems>
          <WaterAvailableMethod>DefaultAPSIM</WaterAvailableMethod>
          <NitrogenAvailableMethod>BasicAgPasture</NitrogenAvailableMethod>
        </PastureSpecies>
        <PastureSpecies>
          <Name>WhiteClover</Name>
          <IncludeInDocumentation>true</IncludeInDocumentation>
          <MaximumNUptake>10</MaximumNUptake>
          <Albedo>0.26</Albedo>
          <Gsmax>0.011</Gsmax>
          <R50>200</R50>
          <SpeciesFamily>Legume</SpeciesFamily>
          <PhotosyntheticPathway>C3</PhotosyntheticPathway>
          <InitialShootDM>250</InitialShootDM>
          <InitialRootDM>150</InitialRootDM>
          <InitialRootDepth>350</InitialRootDepth>
          <ReferencePhotosyntheticRate>1</ReferencePhotosyntheticRate>
          <LightExtinctionCoefficient>0.8</LightExtinctionCoefficient>
          <GrowthTminimum>2</GrowthTminimum>
          <GrowthToptimum>22</GrowthToptimum>
          <GrowthTEffectExponent>1.7</GrowthTEffectExponent>
          <UseHeatStressFactor>yes</UseHeatStressFactor>
          <HeatOnsetTemperature>30</HeatOnsetTemperature>
          <HeatFullTemperature>36</HeatFullTemperature>
          <HeatRecoverySumDD>20</HeatRecoverySumDD>
          <HeatRecoveryTReference>25</HeatRecoveryTReference>
          <UseColdStressFactor>yes</UseColdStressFactor>
          <ColdOnsetTemperature>2</ColdOnsetTemperature>
          <ColdFullTemperature>-5</ColdFullTemperature>
          <ColdRecoverySumDD>30</ColdRecoverySumDD>
          <ColdRecoveryTReference>0</ColdRecoveryTReference>
          <MaintenanceRespirationCoefficient>0.04</MaintenanceRespirationCoefficient>
          <GrowthRespirationCoefficient>0.25</GrowthRespirationCoefficient>
          <RespirationTReference>20</RespirationTReference>
          <RespirationExponent>1.5</RespirationExponent>
          <NThresholdsForLeaves>
            <double>0.045</double>
            <double>0.02</double>
            <double>0.055</double>
          </NThresholdsForLeaves>
          <NThresholdsForStems>
            <double>0.0225</double>
            <double>0.01</double>
            <double>0.0275</double>
          </NThresholdsForStems>
          <NThresholdsForStolons>
            <double>0.0225</double>
            <double>0.01</double>
            <double>0.0275</double>
          </NThresholdsForStolons>
          <NThresholdsForRoots>
            <double>0.0225</double>
            <double>0.01</double>
            <double>0.0275</double>
          </NThresholdsForRoots>
          <DegreesDayForGermination>125</DegreesDayForGermination>
          <TargetShootRootRatio>4</TargetShootRootRatio>
          <MaxRootAllocation>0.25</MaxRootAllocation>
          <ShootRootGlfFactor>0.5</ShootRootGlfFactor>
          <UseReproSeasonFactor>yes</UseReproSeasonFactor>
          <ReproSeasonReferenceLatitude>41</ReproSeasonReferenceLatitude>
          <ReproSeasonTimingCoeff>0.14</ReproSeasonTimingCoeff>
          <ReproSeasonMaxAllocationIncrease>0.5</ReproSeasonMaxAllocationIncrease>
          <ReproSeasonAllocationCoeff>0.1</ReproSeasonAllocationCoeff>
          <FractionLeafMaximum>0.56</FractionLeafMaximum>
          <FractionLeafMinimum>0.28</FractionLeafMinimum>
          <FractionLeafDMThreshold>500</FractionLeafDMThreshold>
          <FractionLeafDMFactor>2000</FractionLeafDMFactor>
          <FractionLeafExponent>3</FractionLeafExponent>
          <FractionToStolon>0.2</FractionToStolon>
          <SpecificLeafArea>30</SpecificLeafArea>
          <SpecificRootLength>45</SpecificRootLength>
          <StolonEffectOnLAI>0.3</StolonEffectOnLAI>
          <ShootMaxEffectOnLAI>500</ShootMaxEffectOnLAI>
          <MaxStemEffectOnLAI>0.5</MaxStemEffectOnLAI>
          <LiveLeavesPerTiller>3</LiveLeavesPerTiller>
          <TissueTurnoverRateShoot>0.05</TissueTurnoverRateShoot>
          <TissueTurnoverRateRoot>0.02</TissueTurnoverRateRoot>
          <DetachmentRateShoot>0.11</DetachmentRateShoot>
          <TurnoverTemperatureMin>2</TurnoverTemperatureMin>
          <TurnoverTemperatureRef>20</TurnoverTemperatureRef>
          <TurnoverTemperatureExponent>1</TurnoverTemperatureExponent>
          <TurnoverDroughtEffectMax>1</TurnoverDroughtEffectMax>
          <TurnoverDroughtThreshold>0.5</TurnoverDroughtThreshold>
          <TurnoverDefoliationCoefficient>0.5</TurnoverDefoliationCoefficient>
          <TurnoverDefoliationRootEffect>0.1</TurnoverDefoliationRootEffect>
          <FractionNLuxuryRemobilisable>
            <double>0.1</double>
            <double>0.1</double>
            <double>0.1</double>
          </FractionNLuxuryRemobilisable>
          <MinimumNFixation>0.2</MinimumNFixation>
          <MaximumNFixation>0.6</MaximumNFixation>
          <SoilSaturationEffectMax>0.1</SoilSaturationEffectMax>
          <MinimumWaterFreePorosity>-1</MinimumWaterFreePorosity>
          <SoilSaturationRecoveryFactor>0.25</SoilSaturationRecoveryFactor>
          <NDillutionCoefficient>1</NDillutionCoefficient>
          <GlfGeneric>1</GlfGeneric>
          <GlfSoilFertility>1</GlfSoilFertility>
          <PlantHeightMinimum>25</PlantHeightMinimum>
          <PlantHeightMaximum>350</PlantHeightMaximum>
          <PlantHeightMassForMax>7500</PlantHeightMassForMax>
          <PlantHeightExponent>2.5</PlantHeightExponent>
          <RootDepthMinimum>30</RootDepthMinimum>
          <RootDepthMaximum>350</RootDepthMaximum>
          <RootElongationRate>25</RootElongationRate>
          <RootDistributionDepthParam>70</RootDistributionDepthParam>
          <RootDistributionExponent>2.5</RootDistributionExponent>
          <DigestibilitiesCellWall>
            <double>0.6</double>
            <double>0.6</double>
            <double>0.6</double>
            <double>0.2</double>
          </DigestibilitiesCellWall>
          <MinimumGreenWt>50</MinimumGreenWt>
          <FractionStolonStanding>0</FractionStolonStanding>
          <PreferenceForGreenOverDead>1</PreferenceForGreenOverDead>
          <PreferenceForLeafOverStems>1</PreferenceForLeafOverStems>
          <WaterAvailableMethod>DefaultAPSIM</WaterAvailableMethod>
          <NitrogenAvailableMethod>BasicAgPasture</NitrogenAvailableMethod>
        </PastureSpecies>
        <IncludeInDocumentation>true</IncludeInDocumentation>
        <ControlledBySward>yes</ControlledBySward>
        <WaterUptakeSource>species</WaterUptakeSource>
        <NUptakeSource>species</NUptakeSource>
      </Sward>
      <Soil>
        <Name>Soil</Name>
        <InitialWater>
          <Name>Initial water</Name>
          <IncludeInDocumentation>true</IncludeInDocumentation>
          <PercentMethod>FilledFromTop</PercentMethod>
          <FractionFull>0.987012987012987</FractionFull>
          <DepthWetSoil>NaN</DepthWetSoil>
        </InitialWater>
        <Water>
          <Name>Water</Name>
          <SoilCrop>
            <Name>SwardSoil</Name>
            <IncludeInDocumentation>true</IncludeInDocumentation>
            <LL>
              <double>0.15</double>
              <double>0.14</double>
              <double>0.06</double>
              <double>0.02</double>
              <double>0.01</double>
              <double>0.01</double>
              <double>0.01</double>
            </LL>
            <KL>
              <double>0.1</double>
              <double>0.1</double>
              <double>0.08</double>
              <double>0.04</double>
              <double>0.01</double>
              <double>0</double>
              <double>0</double>
            </KL>
            <XF>
              <double>1</double>
              <double>1</double>
              <double>1</double>
              <double>1</double>
              <double>1</double>
              <double>0</double>
              <double>0</double>
            </XF>
          </SoilCrop>
          <SoilCrop>
            <Name>RyegrassSoil</Name>
            <IncludeInDocumentation>true</IncludeInDocumentation>
            <LL>
              <double>0.14</double>
              <double>0.14</double>
              <double>0.03</double>
              <double>0.03</double>
              <double>0.03</double>
              <double>0.03</double>
              <double>0.03</double>
            </LL>
            <KL>
              <double>0.1</double>
              <double>0.1</double>
              <double>0.1</double>
              <double>0.02</double>
              <double>0</double>
              <double>0</double>
              <double>0</double>
            </KL>
            <XF>
              <double>1</double>
              <double>1</double>
              <double>1</double>
              <double>1</double>
              <double>0</double>
              <double>0</double>
              <double>0</double>
            </XF>
          </SoilCrop>
          <SoilCrop>
            <Name>WhiteCloverSoil</Name>
            <IncludeInDocumentation>true</IncludeInDocumentation>
            <LL>
              <double>0.14</double>
              <double>0.14</double>
              <double>0.03</double>
              <double>0.03</double>
              <double>0.03</double>
              <double>0.03</double>
              <double>0.03</double>
            </LL>
            <KL>
              <double>0.1</double>
              <double>0.1</double>
              <double>0.1</double>
              <double>0.02</double>
              <double>0</double>
              <double>0</double>
              <double>0</double>
            </KL>
            <XF>
              <double>1</double>
              <double>1</double>
              <double>1</double>
              <double>1</double>
              <double>0</double>
              <double>0</double>
              <double>0</double>
            </XF>
          </SoilCrop>
          <IncludeInDocumentation>true</IncludeInDocumentation>
          <Thickness>
            <double>150</double>
            <double>150</double>
            <double>200</double>
            <double>150</double>
            <double>250</double>
            <double>300</double>
            <double>300</double>
          </Thickness>
          <BD>
            <double>1.3</double>
            <double>1.35</double>
            <double>1</double>
            <double>0.53</double>
            <double>0.31</double>
            <double>0.3</double>
            <double>0.3</double>
          </BD>
          <AirDry>
            <double>0.05</double>
            <double>0.12</double>
            <double>0.055</double>
            <double>0.015</double>
            <double>0.01</double>
            <double>0.01</double>
            <double>0.01</double>
          </AirDry>
          <LL15>
            <double>0.15</double>
            <double>0.14</double>
            <double>0.055</double>
            <double>0.015</double>
            <double>0.01</double>
            <double>0.01</double>
            <double>0.01</double>
          </LL15>
          <DUL>
            <double>0.36</double>
            <double>0.34</double>
            <double>0.19</double>
            <double>0.065</double>
            <double>0.04</double>
            <double>0.03</double>
            <double>0.03</double>
          </DUL>
          <SAT>
            <double>0.45</double>
            <double>0.43</double>
            <double>0.25</double>
            <double>0.15</double>
            <double>0.11</double>
            <double>0.11</double>
            <double>0.11</double>
          </SAT>
          <KS>
            <double>5000</double>
            <double>2500</double>
            <double>3000</double>
            <double>10000</double>
            <double>17500</double>
            <double>20000</double>
            <double>20000</double>
          </KS>
        </Water>
        <SoilWater>
          <Name>SoilWater</Name>
          <IncludeInDocumentation>true</IncludeInDocumentation>
          <SummerDate>1-Nov</SummerDate>
          <SummerU>6</SummerU>
          <SummerCona>3.5</SummerCona>
          <WinterDate>1-apr</WinterDate>
          <WinterU>2</WinterU>
          <WinterCona>2</WinterCona>
          <DiffusConst>88</DiffusConst>
          <DiffusSlope>35</DiffusSlope>
          <Salb>0.13</Salb>
          <CN2Bare>73</CN2Bare>
          <CNRed>20</CNRed>
          <CNCov>0.8</CNCov>
          <slope>0</slope>
          <discharge_width>0</discharge_width>
          <catchment_area>0</catchment_area>
          <max_pond>0</max_pond>
          <Thickness>
            <double>100</double>
            <double>200</double>
            <double>300</double>
            <double>300</double>
            <double>300</double>
            <double>300</double>
            <double>300</double>
          </Thickness>
          <SWCON>
            <double>0.4</double>
            <double>0.5</double>
            <double>0.6</double>
            <double>0.6</double>
            <double>0.8</double>
            <double>0.8</double>
            <double>0.8</double>
          </SWCON>
          <KLAT>
            <double>0</double>
            <double>0</double>
            <double>0</double>
            <double>0</double>
            <double>0</double>
            <double>0</double>
            <double>0</double>
          </KLAT>
          <residueinterception>0</residueinterception>
        </SoilWater>
        <SoilOrganicMatter>
          <Name>SoilOrganicMatter</Name>
          <IncludeInDocumentation>true</IncludeInDocumentation>
          <RootCN>40</RootCN>
          <RootWt>1000</RootWt>
          <SoilCN>12</SoilCN>
          <EnrACoeff>7.4</EnrACoeff>
          <EnrBCoeff>0.2</EnrBCoeff>
          <Thickness>
            <double>150</double>
            <double>150</double>
            <double>200</double>
            <double>150</double>
            <double>250</double>
            <double>300</double>
            <double>300</double>
          </Thickness>
          <Depth>
            <string>0-15</string>
            <string>15-30</string>
            <string>30-50</string>
            <string>50-65</string>
            <string>65-90</string>
            <string>90-120</string>
            <string>120-150</string>
          </Depth>
          <OC>
            <double>3</double>
            <double>1</double>
            <double>0.6</double>
            <double>0.4</double>
            <double>0.25</double>
            <double>0.15</double>
            <double>0.1</double>
          </OC>
          <FBiom>
            <double>0.04</double>
            <double>0.02</double>
            <double>0.02</double>
            <double>0.01</double>
            <double>0.01</double>
            <double>0</double>
            <double>0</double>
          </FBiom>
          <FInert>
            <double>0.5</double>
            <double>0.7</double>
            <double>0.83</double>
            <double>0.9</double>
            <double>0.95</double>
            <double>0.99</double>
            <double>0.99</double>
          </FInert>
          <OCUnits>Total</OCUnits>
        </SoilOrganicMatter>
        <Analysis>
          <Name>Analysis</Name>
          <IncludeInDocumentation>true</IncludeInDocumentation>
          <Thickness>
            <double>100</double>
            <double>200</double>
            <double>300</double>
            <double>300</double>
            <double>300</double>
            <double>300</double>
            <double>300</double>
          </Thickness>
          <Rocks>
            <double>0</double>
            <double>0</double>
            <double>10</double>
            <double>40</double>
            <double>60</double>
            <double>70</double>
            <double>70</double>
          </Rocks>
          <Texture />
          <MunsellColour />
          <PH>
            <double>5.9</double>
            <double>5.9</double>
            <double>5.9</double>
            <double>5.9</double>
            <double>5.9</double>
            <double>5.9</double>
            <double>5.9</double>
          </PH>
          <CEC>
            <double>12.5</double>
            <double>10</double>
            <double>9</double>
            <double>5</double>
            <double>4</double>
            <double>4</double>
            <double>4</double>
          </CEC>
          <ParticleSizeSand>
            <double>15</double>
            <double>20</double>
            <double>25</double>
            <double>35</double>
            <double>40</double>
            <double>40</double>
            <double>40</double>
          </ParticleSizeSand>
          <ParticleSizeSilt>
            <double>65</double>
            <double>65</double>
            <double>63</double>
            <double>57</double>
            <double>54</double>
            <double>55</double>
            <double>55</double>
          </ParticleSizeSilt>
          <ParticleSizeClay>
            <double>20</double>
            <double>15</double>
            <double>12</double>
            <double>8</double>
            <double>6</double>
            <double>5</double>
            <double>5</double>
          </ParticleSizeClay>
          <PHUnits>Water</PHUnits>
          <BoronUnits>HotWater</BoronUnits>
        </Analysis>
        <Sample>
          <Name>Initial nitrogen</Name>
          <IncludeInDocumentation>true</IncludeInDocumentation>
          <Thickness>
            <double>100</double>
            <double>200</double>
            <double>300</double>
            <double>300</double>
            <double>300</double>
            <double>300</double>
            <double>300</double>
          </Thickness>
          <NO3>
            <double>7.619</double>
            <double>7.27</double>
            <double>3.871</double>
            <double>3.84</double>
            <double>3.81</double>
            <double>3.779</double>
            <double>3.691</double>
          </NO3>
          <NH4>
            <double>0.132</double>
            <double>0.132</double>
            <double>0.132</double>
            <double>0.132</double>
            <double>0.132</double>
            <double>0.132</double>
            <double>0.132</double>
          </NH4>
          <NO3Units>ppm</NO3Units>
          <NH4Units>ppm</NH4Units>
          <SWUnits>Volumetric</SWUnits>
          <OCUnits>Total</OCUnits>
          <PHUnits>Water</PHUnits>
        </Sample>
        <SoilNitrogen>
          <Name>SoilNitrogen</Name>
          <IncludeInDocumentation>true</IncludeInDocumentation>
          <fom_type>
            <string>default</string>
            <string>manure</string>
            <string>mucuna</string>
            <string>lablab</string>
            <string>shemp</string>
            <string>stable</string>
          </fom_type>
          <fract_carb>
            <double>0.2</double>
            <double>0.3</double>
            <double>0.54</double>
            <double>0.57</double>
            <double>0.45</double>
            <double>0</double>
          </fract_carb>
          <fract_cell>
            <double>0.7</double>
            <double>0.3</double>
            <double>0.37</double>
            <double>0.37</double>
            <double>0.47</double>
            <double>0.1</double>
          </fract_cell>
          <fract_lign>
            <double>0.1</double>
            <double>0.4</double>
            <double>0.09</double>
            <double>0.06</double>
            <double>0.08</double>
            <double>0.9</double>
          </fract_lign>
        </SoilNitrogen>
        <CERESSoilTemperature>
          <Name>CERESSoilTemperature</Name>
          <IncludeInDocumentation>true</IncludeInDocumentation>
        </CERESSoilTemperature>
        <IncludeInDocumentation>true</IncludeInDocumentation>
        <RecordNumber>0</RecordNumber>
        <SoilType>NZ_Sedimentary</SoilType>
        <LocalName>Lismore</LocalName>
        <Site>Winchmore</Site>
        <NearestTown>Ashburton</NearestTown>
        <Region>Canterbury</Region>
        <Country>New Zealand</Country>
        <NaturalVegetation />
        <Latitude>-48.48</Latitude>
        <Longitude>0</Longitude>
      </Soil>
      <IncludeInDocumentation>true</IncludeInDocumentation>
      <Area>1</Area>
      <Slope>0</Slope>
    </Zone>
    <IncludeInDocumentation>true</IncludeInDocumentation>
  </Simulation>
  <Simulation>
    <Name>UniformGrazedPaddock</Name>
    <Clock>
      <Name>Clock</Name>
      <IncludeInDocumentation>true</IncludeInDocumentation>
      <StartDate>1972-01-01T00:00:00</StartDate>
      <EndDate>1972-12-31T00:00:00</EndDate>
    </Clock>
    <Summary>
      <Name>SummaryFile</Name>
      <IncludeInDocumentation>true</IncludeInDocumentation>
    </Summary>
    <Weather>
      <Name>Weather</Name>
      <IncludeInDocumentation>true</IncludeInDocumentation>
      <FileName>%root%\Examples\WeatherFiles\lincoln.met</FileName>
      <ExcelWorkSheetName />
    </Weather>
    <SoilArbitrator>
      <Name>Soil Arbitrator</Name>
      <IncludeInDocumentation>true</IncludeInDocumentation>
    </SoilArbitrator>
    <Manager>
      <Name>PatchManager</Name>
      <IncludeInDocumentation>true</IncludeInDocumentation>
      <Script>
        <CuttingFrequency>0</CuttingFrequency>
        <CuttingResidual>1000</CuttingResidual>
        <NutrientReturnType>Constant</NutrientReturnType>
        <AmountFertNReturned>40</AmountFertNReturned>
        <AmountDungNReturned>0</AmountDungNReturned>
        <FertiliserDepth>200</FertiliserDepth>
        <FertiliserReturnPattern>RotatingInOrder</FertiliserReturnPattern>
        <ReportingFreq>OnGrazing</ReportingFreq>
        <PatchType>UP</PatchType>
        <NumGPPatches>50</NumGPPatches>
        <SystemID>C</SystemID>
      </Script>
      <Code><![CDATA[using System;
using Models.Core;
using Models.Soils;
using Models.PMF;
using Models.Zones;
using Models.AgPasture;
using System.Xml.Serialization;
using Models.Soils;
using Models.SurfaceOM;
using APSIM.Shared.Utilities;
using System.Collections.Generic;
using System.Diagnostics; // used with Debugger.Break(); to debug manager scripts



namespace Models
{
    [Serializable]
    [System.Xml.Serialization.XmlInclude(typeof(Model))]
    public class Script : Model
    {
        [Link] Clock Clock;
        [Link] Soil soil;
        [Link] ISummary summary = null;
        [Link] Weather Weather;
        [Link] Sward sward;
        [Link] Zone myZone;

        public string SoilType;
        public string SimLocation;
        public string SetIrrigation;
        public string GeneralFertType;
        public double GeneralFertAmt;
        public string PastureType;

        public int PatchCount;
        public int DaysSinceCut = 0;
        public int PatchNumForFert = -1;



        private int NumPaddocks = 0;  // NumPaddocks is the number of AgPastures and SoilWats etc 
        private int NumPatchesForFertiliser = 1;
        private double[] MonthlyFertAmt;
        private double[] FertDepthPlacement;
        private int[] PseudoRandomSeq;
        double iniOrgC;
        double iniOrgN;
        private int GrazingNumber = -1;
        private bool CutNow = false;

        private bool ReportToday = false;
        private double AmountDungCReturned = 0.0;
        private int nPatchesAdded = 0;
        private double NewArea;
        private int[] PatchToAddTo;
        private string[] PatchNmToAddTo = new string[1];  

        public event AddSoilCNPatchDelegate AddSoilCNPatch;
        public event BiomassRemovedDelegate BiomassRemoved;

        [XmlIgnore] public bool grazedToday { get; set; }
        [XmlIgnore] public double Harvested { get; set; }
        [XmlIgnore] public double HarvestedN { get; set; }
        [XmlIgnore] public double UreaReturned  { get; set; }
        [XmlIgnore] public int NumPatches { get; set; }


        [Description("Frequency of cutting (days) (0 will be interpreted as the end of each month)")]
        public int CuttingFrequency { get; set; }

        [Description("Residual pasture mass after cutting (kg DM /ha)")]
        public int CuttingResidual { get; set; }

        [Description("Type of nutrient return - calculated from the amount of herbage harvested or constant")]
        public NutrientReturnTypes NutrientReturnType { get; set; }

        [Description("Amount of fertiliser N to apply to simulation after each cutting (pretend urine) (kgN/ha) (ignored if nutrient return is FromHarvest)")]
        public double AmountFertNReturned { get; set; }

        [Description("Amount of dung N to apply to simulation after each cutting (kgN/ha) (ignored if nutrient return is FromHarvest)")]
        public double AmountDungNReturned { get; set; }

        [Description("Depth band (0 mm to X mm) for fertiliser placement (mm)")]
        public int FertiliserDepth { get; set; }
                        
        [Description("Pattern for fertiliser return")]
        public urineReturnTypes FertiliserReturnPattern { get; set; }

        [Description("Frequency of reporting")]
        public reportingFrequencyTypes ReportingFreq { get; set; }

        [Description("Patch type")]
        public patchTypes PatchType { get; set; }

        [Description("How many patches should there be in the grid? (used to create the grid for GP and the size of the patches for PP)")]
        public int NumGPPatches { get; set; }

        [Description("System identifier")]
        public systemTypes SystemID { get; set; }


//
        public enum systemTypes
        {
            /// <summary>A</summary>
            A,
            /// <summary>B</summary>
            B,
            /// <summary>C</summary>
            C,
            /// <summary>D</summary>
            D,
            /// <summary>E</summary>
            E,
            /// <summary>F</summary>
            F
        }

        public enum patchTypes
        {
            /// <summary>EP</summary>
            EP,
            /// <summary>EP</summary>
            GP,
            /// <summary>EP</summary>
            PP,
            /// <summary>EP</summary>
            UP
        }

        public enum reportingFrequencyTypes
        {
            /// <summary>Daily</summary>
            Daily,
            /// <summary>Every 10 days</summary>
            TenDaily,
            /// <summary>Monthly</summary>
            Monthly,
            /// <summary>Annual</summary>
            Annual,
            /// <summary>On grazing</summary>
            OnGrazing
        }

        public enum urineReturnTypes
        {
            /// <summary>Uniform</summary>
            UniformAcrossAllPatches,
            /// <summary>Rotating in order</summary>
            RotatingInOrder,
            /// <summary>Random</summary>
            Random,
            /// <summary>Pseudo-random</summary>
            PseudoRandom
        }

        public enum NutrientReturnTypes
        {
            /// <summary>Constant</summary>
            Constant,
            /// <summary>FromHarvest</summary>
            FromHarvest,
            /// <summary>SetMonthly</summary>
            SetMonthly
        }


        private void SetSystemParams()
        {
            if (SystemID == systemTypes.A)
            {
                SoilType = "HE";
                SimLocation = "Rua";
                SetIrrigation = "no";
                GeneralFertType = "NoWinter";
                GeneralFertAmt = 0.0;
                PastureType = "RyeWhite";
            }
            else if (SystemID == systemTypes.B)
            {
                SoilType = "HE";
                SimLocation = "Rua";
                SetIrrigation = "no";
                GeneralFertType = "NoWinter";
                GeneralFertAmt = 150.0;
                PastureType = "RyeWhite";
            }
            else if (SystemID == systemTypes.C)
            {
                SoilType = "VL";
                SimLocation = "Lin";
                SetIrrigation = "yes";
                GeneralFertType = "NoWinter";
                GeneralFertAmt = 0.0;
                PastureType = "RyeWhite";
            }
            else if (SystemID == systemTypes.D)
            {
                SoilType = "VL";
                SimLocation = "Lin";
                SetIrrigation = "yes";
                GeneralFertType = "NoWinter";
                GeneralFertAmt = 250.0;
                PastureType = "RyeWhite";
            }
            else if (SystemID == systemTypes.E)
            {
                SoilType = "VL";
                SimLocation = "Lin";
                SetIrrigation = "yes";
                GeneralFertType = "NoWinter";
                GeneralFertAmt = 400.0;
                PastureType = "GrassOnly";
            }
            else if (SystemID == systemTypes.F)
            {
                SoilType = "VL";
                SimLocation = "Lin";
                SetIrrigation = "no";
                GeneralFertType = "NoWinter";
                GeneralFertAmt = 0.0;
                PastureType = "RyeWhite";
            }
        }

        [EventSubscribe("StartOfSimulation")]
        private void OnStartOfSimulation(object sender, EventArgs e)
        {
            if (PatchType == patchTypes.EP)
                NumPatches = NumPaddocks;
            else if (PatchType == patchTypes.GP)
                NumPatches = NumGPPatches;
            else if (PatchType == patchTypes.PP)
                NumPatches = NumGPPatches; // but will actually use this to set the size of the newly created patches
            else if (PatchType == patchTypes.UP)
                NumPatches = NumGPPatches;
            else
                throw new Exception("Patch type not catered for");

            if ((PatchType == patchTypes.GP)&&(NumPaddocks>1)) throw new Exception("Patch type GP may only have one paddock/zone");
            if ((PatchType == patchTypes.PP)&&(NumPaddocks>1)) throw new Exception("Patch type PP may only have one paddock/zone");

            NumPatchesForFertiliser = 1;  // in the future this might be > 1
            if (FertiliserReturnPattern == urineReturnTypes.PseudoRandom)  // generate a return pattern up front
            {
                int MaxNumGrazings = (Clock.EndDate.Year - Clock.StartDate.Year + 1) * 52; //allow for a maximum of 1 per week

                PseudoRandomSeq = new int[MaxNumGrazings * NumPatchesForFertiliser];
                Random rndConstSeed = new Random((int) 666);
                string MyString = "";
                for (int i = 0; i < (MaxNumGrazings * NumPatchesForFertiliser); i++)
                {
                    PseudoRandomSeq[i] = rndConstSeed.Next(0, NumPatches);  // will never select NumPatches 
                    MyString += Convert.ToString(PseudoRandomSeq[i]) + " ";
                }
                Console.WriteLine("The order of patch return will be: " + MyString);
            }

            // Add patches
            if (PatchType == patchTypes.GP)
            {
                soil.SoilNitrogen.MaximumNitrogenAvailableToPlants = 3.0;
                soil.SoilNitrogen.NPartitionApproach = "BasedOnConcentrationAndDelta";
                soil.SoilNitrogen.AllowPatchAutoAmalgamation = "No";
                soil.SoilNitrogen.AutoAmalgamationApproach = "CompareAll";
                soil.SoilNitrogen.basePatchApproach = "IDBased";
                soil.SoilNitrogen.AllowPatchAmalgamationByAge = "No";
                soil.SoilNitrogen.PatchAgeForForcedMerge = 3.0;                                


                int[] PatchToAddTo = new int[1];  //need an array variable for this
                string[] PatchNmToAddTo = new string[1];  
                int nPatchesAdded = 0;
                double NewArea = 1.0 / NumPatches;

                while (nPatchesAdded < NumPatches - 1)
                {
                    AddSoilCNPatchType NewPatch = new AddSoilCNPatchType();
                    NewPatch.DepositionType = "ToNewPatch";
                    NewPatch.AreaFraction = NewArea;
                    PatchToAddTo[0] = 0;
                    PatchNmToAddTo[0] = "0";
                    NewPatch.AffectedPatches_id = PatchToAddTo;
                    NewPatch.AffectedPatches_nm = PatchNmToAddTo;
                    NewPatch.SuppressMessages = "no";

                    AddSoilCNPatch.Invoke(NewPatch);
                    nPatchesAdded += 1;
                }                

                summary.WriteMessage(this, "NumPatches at end of initialisation (GP):" + soil.SoilNitrogen.PatchCount.ToString());
            }
        }


        [EventSubscribe("Commencing")]
        private void OnSimulationCommencing(object sender, EventArgs e)
        {
            Console.WriteLine("Initialising the Manager for grazing, urine return and reporting");

            grazedToday = false;

            // count the paddocks in the simulation
            NumPaddocks = 0;   
            foreach (Zone zone in Apsim.FindAll(this.Parent, typeof(Zone)))
                NumPaddocks += 1;   
            Console.WriteLine("There are " + NumPaddocks + " in the simulation");

            MonthlyFertAmt = new double[] { 24,19,17,12,8,5,5,10,16,19,23,25};

            Console.WriteLine("Finished initialising the Manager for grazing, urine return and reporting");
        }

        [EventSubscribe("DoManagement")]
        private void OnDoManagement(object sender, EventArgs e)        
        {    

            // if this is the start of the simulation then sort out the depth for the fertiliser (aka urine) placement
            // can't do this in initialisation because of the module order
            if (Clock.Today == Clock.StartDate)
            {
                FertPlacementDepth();
                int i = -1;  // to use as a patch counter

                iniOrgC = 0.0; 
                iniOrgN = 0.0;
                foreach (Zone zone in Apsim.FindAll(this.Parent, typeof(Zone)))
                {
                    Soil soil = Apsim.Find(zone, typeof(Soil)) as Soil;
                    i += 1;
                    PatchCount = soil.SoilNitrogen.PatchCount;

                    for (int ii = 0; ii <= (soil.Thickness.Length - 1); ii++)
                    {
                        iniOrgC += soil.SoilNitrogen.TotalC[ii] / NumPaddocks; 
                        iniOrgN += soil.SoilNitrogen.organic_n[ii] / NumPaddocks;
                    }
                }
            }

            DaysSinceCut += 1;
            Harvested = 0.0;
            HarvestedN = 0.0;
            UreaReturned = 0.0;

            bool isEndOfMonth = false;
            if(Clock.Today.AddDays(1).Day == 1) isEndOfMonth=true;

            bool isEndOfYear = false;
            if(Clock.Today.AddDays(1).DayOfYear == 1) isEndOfYear=true;



            CutNow = false;
            grazedToday = false;
            if ((CuttingFrequency == 0) && (isEndOfMonth))
                CutNow = true;
            else if ((DaysSinceCut >= CuttingFrequency) && (CuttingFrequency > 0))
                CutNow = true;

            // should reporting be done today?  Do this here as need to know if grazing will happen
            if (ReportingFreq == reportingFrequencyTypes.Daily)
                ReportToday = true;
            else if ((ReportingFreq == reportingFrequencyTypes.TenDaily) && ((Clock.Today.Day== 10) || (Clock.Today.Day == 20) || (isEndOfMonth)))
                ReportToday = true;
            else if ((ReportingFreq == reportingFrequencyTypes.Monthly) && (isEndOfMonth))
                ReportToday = true;
            else if ((ReportingFreq == reportingFrequencyTypes.Annual) && (isEndOfYear))
                ReportToday = true;
            else if ((ReportingFreq == reportingFrequencyTypes.OnGrazing) && (CutNow))
                ReportToday = true;
            else
                ReportToday = false;

            //if (Clock.Today == Clock.StartDate) CutNow = true;

            if (CutNow)
            {

                grazedToday = true;
                Console.WriteLine("Doing Cutting");
                DaysSinceCut = 0;
                GrazingNumber += 1;  //was initialsed as -1 - this is used to pick the pseudo-random patch return number
                // GetPatchForUrineReturn();  now called in the deposition routine

                // do the cutting=grazing - it doesn't matter if there one (GP) or many (EP) physical paddocks in the simulation at this point
                int i = -1;  // to use as a patch counter
                Harvested = 0.0;
                HarvestedN = 0.0;
                foreach (Zone zone in Apsim.FindAll(this.Parent, typeof(Zone)))
                {
                    i += 1;
                    foreach (AgPasture.Sward sward in Apsim.Children(zone, typeof(AgPasture.Sward)))
                    {        
                        sward.Graze(amount: CuttingResidual, type: "SetResidueAmount");
                        Harvested += sward.HarvestedWt / NumPaddocks;
                        HarvestedN += sward.HarvestedN / NumPaddocks;
                    }
                }

                if (NutrientReturnType == NutrientReturnTypes.FromHarvest)
                {
                    AmountFertNReturned = HarvestedN * 0.50;  // TODO yikes - probably should not have hard-coded this, if it is not FromHarvest then the value has been set in the manager parameters
                    AmountDungNReturned = HarvestedN * 0.35;  // 
                    AmountDungCReturned = AmountDungNReturned * 20;
                }
                else if (NutrientReturnType == NutrientReturnTypes.SetMonthly)
                {
                    AmountFertNReturned = MonthlyFertAmt[Clock.Today.Month - 1];
                    AmountDungNReturned = AmountFertNReturned * (0.35 / 0.50);  // 
                    AmountDungCReturned = AmountDungNReturned * 20;
                }
                else
                {
                    // urine and dung are set from the parameters
                    AmountDungCReturned = AmountDungNReturned * 20;
                }


                Console.WriteLine("The amount of urea fertiliser to be returned to the whole paddock is " + AmountFertNReturned);

                DoUrineReturn();

                DoTramplingAndDungReturn();

                Console.WriteLine("Finished Cutting");

            } // this is the end of the CutNow section

            if ((GeneralFertAmt > 0.0) && (Clock.Today.AddDays(1).Day == 1))
            {
                DoFertiliser();
            }
        }


        public void DoTramplingAndDungReturn()
        {
            int i = -1;  // patch or paddock counter
            foreach (Zone zone in Apsim.FindAll(this.Parent, typeof(Zone)))
            {
                i += 1;
                SoilNitrogen soilN = Apsim.Find(zone, typeof(SoilNitrogen)) as SoilNitrogen;
                SurfaceOrganicMatter surfaceOM = Apsim.Find(zone, typeof(SurfaceOrganicMatter)) as SurfaceOrganicMatter; 

                // do some trampling of litter
                // accelerate the movement of surface litter into the soil - do this before the dung is added
                double temp = surfaceOM.Wt * 0.1;

                TillageType trampling = new TillageType();
                surfaceOM.Incorporate(fraction: (double) 0.1, depth: (double) 100.0);

                Console.WriteLine("For patch " + i + " the amount of litter trampled was " + temp + " and the remaining litter is " + (surfaceOM.Wt));

                // move the dung to litter - assume dung is 40% of that harvested and a C:N ratio of 
                BiomassRemovedType dung = new BiomassRemovedType();
                dung.crop_type = "RuminantDung_PastureFed";
                dung.dm_type = new string[] { "RuminantDung_PastureFed" };
                dung.dlt_crop_dm = new float[] { Convert.ToSingle(AmountDungCReturned / 0.4) };  // 
                dung.dlt_dm_n = new float[] { Convert.ToSingle(AmountDungNReturned) };    // 
                dung.dlt_dm_p = new float[] { 0.0F };
                dung.fraction_to_residue = new float[] { 1.0F };
                BiomassRemoved.Invoke(dung);
                Console.WriteLine("For patch " + i + " the amount of dung DM added to the litter was " + (AmountDungCReturned / 0.4) + " and the amount of N added in the dung was " + (AmountDungNReturned));

            } 
        } // this is the end of the trampling and dung patch/paddock section


        public void DoUrineReturn()
        {
            if (PatchType == patchTypes.EP)
            {                

                GetPatchForUrineReturn();  //sets the value for PatchNumForFert
                int i = -1; //to count the paddocks
                foreach (Zone zone in Apsim.FindAll(this.Parent, typeof(Zone)))
                {
                    i += 1;
                    if (i == PatchNumForFert)
                    {
                        Fertiliser thisFert = Apsim.Find(zone, typeof(Fertiliser)) as Fertiliser;
                        Soil soil = Apsim.Find(zone, typeof(Soil)) as Soil;

                        double tempDepth = 0.0;
                        for (int ii = 0; ii <= (soil.Depth.Length - 1); ii++)
                        {
                            tempDepth += soil.Thickness[ii];
                            thisFert.Apply(Amount: (double)(FertDepthPlacement[ii] * NumPatches * AmountFertNReturned), Type: Fertiliser.Types.UreaN, Depth: (tempDepth - soil.Thickness[ii] / 2));
                        }
                        UreaReturned += AmountFertNReturned;
                    }
                } 

            }
            else if (PatchType == patchTypes.GP)
            {
                GetPatchForUrineReturn();  //sets the value for PatchNumForFert
                int[] PatchToAddTo = new int[1];  //because need an array variable for this
                string[] PatchNmToAddTo = new string[0];  //need an array variable for this
                List<IModel> zones = Apsim.FindAll(this, typeof(Zone));
                Soil soil = Apsim.Find(zones[0], typeof(Soil)) as Soil; // Only one zone allowed for GP so use the first
                double[] UreaToAdd = new double[soil.Depth.Length];  

                for (int ii = 0; ii <= (soil.Depth.Length - 1); ii++)
                    UreaToAdd[ii] = FertDepthPlacement[ii] * NumPatches * AmountFertNReturned;

                UreaReturned += AmountFertNReturned;


                AddSoilCNPatchType CurrentPatch = new AddSoilCNPatchType();
                CurrentPatch.Sender = "manager";
                CurrentPatch.DepositionType = "ToSpecificPatch";
                PatchToAddTo[0] = PatchNumForFert;
                CurrentPatch.AffectedPatches_id = PatchToAddTo;
                CurrentPatch.AffectedPatches_nm = PatchNmToAddTo;
                CurrentPatch.Urea = UreaToAdd;

                AddSoilCNPatch.Invoke(CurrentPatch); 
            }
            else if (PatchType == patchTypes.PP)
            {
                // create a new patch from base of area 1/NumGPPatches
                // add the fertiliser to that patch
                // set amalgamation autmomatic
                List<IModel> zones = Apsim.FindAll(this, typeof(Zone));
                Soil soil = Apsim.Find(zones[0], typeof(Soil)) as Soil; // Only one zone allowed for GP so use the first

                double[] UreaToAdd = new double[soil.Depth.Length];  

                for (int ii = 0; ii <= (soil.Depth.Length - 1); ii++)
                UreaToAdd[ii] = FertDepthPlacement[ii] * NumPatches * AmountFertNReturned;

                int[] PatchToAddTo = new int[1];
                string[] PatchNmToAddTo = new string[0];  //need an array variable for this

                UreaReturned += AmountFertNReturned;

                AddSoilCNPatchType NewPatch = new AddSoilCNPatchType();
                NewPatch.DepositionType = "ToNewPatch";
                NewPatch.AreaFraction = 1.0 / NumPatches;
                PatchToAddTo[0] = 0;
                NewPatch.AffectedPatches_id = PatchToAddTo;
                NewPatch.AffectedPatches_nm = PatchNmToAddTo;
                NewPatch.Urea = UreaToAdd;

                Console.WriteLine("UreaToAdd " + UreaToAdd[0] + " " + UreaToAdd[1] + " " + UreaToAdd[2] + " " + UreaToAdd[3] + " " + UreaToAdd[4]);


                AddSoilCNPatch.Invoke(NewPatch);

                //throw new Exception("Have not set up the PP for DoUrineReturn yet");
            } 
            else if (PatchType == patchTypes.UP)
            {
                int i = -1;  // patch or paddock counter
                foreach (Zone zone in Apsim.FindAll(this.Parent, typeof(Zone)))
                {
                    i += 1;

                    Fertiliser thisFert = Apsim.Find(zone, typeof(Fertiliser)) as Fertiliser;
                    Soil soil = Apsim.Find(zone, typeof(Soil)) as Soil;

                    double tempDepth = 0.0;
                    for (int ii = 0; ii <= (soil.Depth.Length - 1); ii++)
                    {
                        tempDepth += soil.Thickness[ii];
                        thisFert.Apply(Amount: (double)(FertDepthPlacement[ii] * AmountFertNReturned), Type: Fertiliser.Types.UreaN, Depth: (tempDepth - soil.Thickness[ii] / 2));
                    } 
                    UreaReturned += AmountFertNReturned;
                }
            }
            else
                throw new Exception("Patch type not catered for");



        } // end of DoUrineReturn

        public void GetPatchForUrineReturn()
        {
            if (FertiliserReturnPattern == urineReturnTypes.UniformAcrossAllPatches)
                PatchNumForFert = 0;  // but will not be used
            else if (FertiliserReturnPattern == urineReturnTypes.RotatingInOrder)
            {
                PatchNumForFert += 1;  //increment the patch number
                if (PatchNumForFert >= NumPatches)
                    PatchNumForFert = 0;  // but reset back to the first patch if needed
                //Console.WriteLine("The patch for fertiliser return is " + PatchNumForFert);
            }
            else if (FertiliserReturnPattern == urineReturnTypes.Random)
                {
                Random rnd = new Random();
                PatchNumForFert = rnd.Next(0, NumPatches);
                //Console.WriteLine("The next random number patch for fertiliser return is " + PatchNumForFert);
            }
            else if (FertiliserReturnPattern == urineReturnTypes.PseudoRandom)
            {
                PatchNumForFert = PseudoRandomSeq[GrazingNumber];
                //Console.WriteLine("The next pseudo-random number patch for fertiliser return is " + PatchNumForFert);
            }
        } // this is the end of GetPatchForUrineReturn


        public void FertPlacementDepth()
        {
            // note that this only looks at the first paddock and assumes that all the paddocks are the same
            int iii = -1;  // to use as a patch counter
            foreach (Zone zone in Apsim.FindAll(this.Parent, typeof(Zone)))
            {
                iii += 1;
                if (iii == 0)
                {
                    Soil soil = Apsim.Find(zone, typeof(Soil)) as Soil;
                    double tempDepth = 0.0;
                    FertDepthPlacement = new double[soil.Thickness.Length];
                    for (int i = 0; i <= (soil.Thickness.Length - 1); i++)
                    {
                        tempDepth += soil.Thickness[i];
                        if (tempDepth <= FertiliserDepth)
                        {
                            FertDepthPlacement[i] = soil.Thickness[i] / FertiliserDepth;
                        }
                        else
                        {
                            FertDepthPlacement[i] = (FertiliserDepth - (tempDepth - soil.Thickness[i])) / (tempDepth - (tempDepth - soil.Thickness[i])) * soil.Thickness[i] / FertiliserDepth;
                            FertDepthPlacement[i] = Math.Max(0.0, Math.Min(1.0, FertDepthPlacement[i]));
                        }
                        //if (FertiliserReturnPattern == "UniformAcrossAllPatches")
                        //   Console.WriteLine("The proportion of fertiliser applied to the " + i + "th layer will be " + FertDepthPlacement[i]);
                        //else
                        Console.WriteLine("The proportion of fertiliser (* NumPatches) applied to the " + i + "th layer will be " + FertDepthPlacement[i]);
                    }
                }
            }

        } // this is the end of FertPlacementDepth


        public void DoFertiliser()
        {
            bool ApplyFert = true; // the test for first day of the month has already been done
            double NumMonths = 0;

            if (GeneralFertType == "Monthly")  
                NumMonths = 12;
            else if (GeneralFertType == "NoWinter")  
            {
                if ((Clock.Today.Month < 5) || (Clock.Today.Month > 7))
                {
                    ApplyFert = true;
                    NumMonths = 9;
                }
            }
            else
                throw new Exception("Wrong general fertiliser setting");

            if (ApplyFert)
            {
                foreach (Zone zone in Apsim.FindAll(this.Parent, typeof(Zone)))  // but actually there will only be a single paddock
                {
                    Fertiliser thisFert = Apsim.Find(zone, typeof(Fertiliser)) as Fertiliser;

                    //thisFert.Apply((float)(GeneralFertAmt / NumMonths), (float) (0.0), "urea_n");
                    thisFert.Apply(Amount: (double)(GeneralFertAmt / NumMonths), Type: Fertiliser.Types.UreaN, Depth: FertiliserDepth);
                    Console.WriteLine("Applying " + (GeneralFertAmt / NumMonths) + " kg of general fertiliser");
                }

            }
        }
    }
}
]]></Code>
    </Manager>
    <Manager>
      <Name>ReportingWithPatchesVariables</Name>
      <IncludeInDocumentation>true</IncludeInDocumentation>
      <Script>
        <verbose>False</verbose>
        <InputModule>PatchManager</InputModule>
        <OutputModule>ReportingWithPatches</OutputModule>
        <ReportingFreq>OnGrazing</ReportingFreq>
      </Script>
      <Code><![CDATA[using System;
using Models.Core;
using Models.Soils;
using Models.PMF;
using Models.Zones;
using Models.AgPasture;
using System.Xml.Serialization;
using Models.Soils;
using Models.SurfaceOM;
using APSIM.Shared.Utilities;
using System.Collections.Generic;
using System.Diagnostics; // used with Debugger.Break(); to debug manager scripts
using System;


namespace Models
{
    [Serializable]
    [System.Xml.Serialization.XmlInclude(typeof(Model))]
    public class Script : Model
    {
        [Link] Clock Clock;
        [Link] Simulation Simulation;
        [Link] Soil soil;
        [Link] ISummary summary = null;
        [Link] Weather Weather;
        //[Link] Zone zone;
        [Link] Sward sward;

        private Zone[] Zones {get; set; }

        private Models.Report.Report ReportingWithPatches;

        [Description("Verbose reporting mode (True/False)")]
        public bool verbose { get; set; }

        [Description("Name of the patch manager for input")]
        public string InputModule { get; set; }

        [Description("Name of the report for output")]
        public string OutputModule { get; set; }

        [Description("Frequency of reporting")]
        public reportingFrequencyTypes ReportingFreq { get; set; }

        [XmlIgnore] public int DaysSinceReport { get; set; }
        [XmlIgnore] public double NHA { get; set; }
        [XmlIgnore] public double PGR { get; set; }
        [XmlIgnore] public double HerbageGrazed { get; set; }
        [XmlIgnore] public double HerbageGrazedN { get; set; }
        [XmlIgnore] public double AreaUrinePatchesToday { get; set; }
        [XmlIgnore] public double UreaReturned { get; set; }
        [XmlIgnore] public double Fixation { get; set; }
        [XmlIgnore] public double LeachN { get; set; }
        [XmlIgnore] public double Denit { get; set; }
        [XmlIgnore] public double DenitN2O { get; set; }
        [XmlIgnore] public double OrgC { get; set; }
        [XmlIgnore] public double OrgN { get; set; }
        [XmlIgnore] public double dltOrgC { get; set; }
        [XmlIgnore] public double dltOrgN { get; set; }
        [XmlIgnore] public double MinN { get; set; }
        [XmlIgnore] public double UreaN { get; set; }
        [XmlIgnore] public double NH4N { get; set; }
        [XmlIgnore] public double NO3N { get; set; }
        [XmlIgnore] public double UreaAddedInGrazing { get; set; }

        [XmlIgnore] public double[] MinNPatch { get; set; }


        public int PatchCount;
        public int PaddockCount;
        public double Grazed;
        public double GrazedN;
        public double UrineNReturned;

        private double iniOrgC;
        private double iniOrgN;

        private bool ReportToday = false;      

        public enum reportingFrequencyTypes
        {
            /// <summary>Daily</summary>
            Daily,
            /// <summary>Every 10 days</summary>
            TenDaily,
            /// <summary>Monthly</summary>
            Monthly,
            /// <summary>Annual</summary>
            Annual,
            /// <summary>On grazing</summary>
            OnGrazing
        }

    

        [EventSubscribe("StartOfSimulation")]
        private void OnStartOfSimulation(object sender, EventArgs e)
        {

               if (verbose)
                summary.WriteMessage(this, "Initialising the Manager for grazing, urine return and reporting");
            DaysSinceReport = 0;
            PatchCount = soil.SoilNitrogen.PatchCount;
            PaddockCount=0;



            // Get list of zones in the simulation
            List<Zone> zones = new List<Zone>();

            foreach (Zone zone in Apsim.FindAll(this.Parent, typeof(Zone)))
            {
                zones.Add(zone as Zone);
                ReportingWithPatches = (Models.Report.Report)zone.Get("[" + OutputModule+ "]");
                PaddockCount++;
            }
            Zones = zones.ToArray();


            double myVariable;
            //myVariable = (double)ManageGriddedPaddock.Get("Script.Var1");
            //double grazedN = ManageGriddedPaddock.Get("Script.grazedN");

            if (verbose)
                summary.WriteMessage(this, "Finished initialising the Manager for grazing, urine return and reporting");
        }


        [EventSubscribe("DoDailyInitialisation")]
        private void OnDoDailyInitialisation(object sender, EventArgs e)
        {    
                    
            if (verbose)
                summary.WriteMessage(this, "In Daily Initialisation for the Reporting Manager on " + Clock.Today);
            if(Clock.Today == Clock.StartDate) {

                iniOrgC = 0.0; 
                iniOrgN = 0.0;            

                foreach (Zone zone in Zones)
                {
                    SoilNitrogen soilN = Apsim.Find(zone, typeof(SoilNitrogen)) as SoilNitrogen;
                    for (int ii = 0; ii < soil.Thickness.Length; ii++)
                    {
                        iniOrgC += soilN.TotalC[ii]; // TODO RJM Check this is right!
                        iniOrgN += soilN.organic_n[ii];
                    }
                }
            }        

            bool isEndOfMonth = false;
            if (Clock.Today.AddDays(1).Day == 1)
                isEndOfMonth = true;

            bool isEndOfYear = false;
            if (Clock.Today.Day == 31 && Clock.Today.Month == 12)
                isEndOfYear = true;


            bool GrazedToday = (bool) Apsim.Get(Simulation, InputModule + ".Script.grazedToday"); 

            // should reporting be done today?  
            if (ReportingFreq == reportingFrequencyTypes.Daily)
                ReportToday = true;
            else if ((ReportingFreq == reportingFrequencyTypes.TenDaily) && ((Clock.Today.Day == 10) || (Clock.Today.Day == 20) || (isEndOfMonth)))
                ReportToday = true;
            else if ((ReportingFreq == reportingFrequencyTypes.Monthly) && (isEndOfMonth))
                ReportToday = true;
            else if ((ReportingFreq == reportingFrequencyTypes.Annual) && (isEndOfYear))
                ReportToday = true;
            else if ((ReportingFreq == reportingFrequencyTypes.OnGrazing) && (GrazedToday))
                ReportToday = true;
            else
                ReportToday = false;
            if (verbose)
                summary.WriteMessage(this, "Finished Prepare for the Reporting Manager on " + Clock.Today);
        } 

        [EventSubscribe("EndOfDay")]
        private void OnEndOfDay(object sender, EventArgs e)
        {
            if (verbose)
                summary.WriteMessage(this, "In EndOfDay for the Reporting Manager on  " + Clock.Today);

            DaysSinceReport += 1;

            foreach (Zone zone in Zones)
            {

                Sward sward = Apsim.Find(zone, typeof(Sward)) as Sward;
                NHA += sward.HerbageGrowthWt/PaddockCount;
                PGR = NHA;  // divide this by the number of days just before reporting
                 Fixation += sward.FixedN/PaddockCount;

                Soil soil = Apsim.Find(zone, typeof(Soil)) as Soil;
                LeachN += soil.SoilWater.flow_no3[soil.SoilWater.flow_no3.Length-1]/PaddockCount;  // only take the deepest element

                for (int ii = 0; ii <= (soil.Thickness.Length - 1); ii++)
                {
                    Denit += soil.SoilNitrogen.Denitrification[ii]/PaddockCount;
                    DenitN2O += soil.SoilNitrogen.n2o_atm[ii]/PaddockCount;
                }


                Grazed = (double)zone.Get("[" + InputModule + "].Script.Harvested")/PaddockCount;
                GrazedN = (double)zone.Get("[" + InputModule + "].Script.HarvestedN")/PaddockCount;
                UrineNReturned = (double)zone.Get("[" + InputModule + "].Script.UreaReturned")/PaddockCount;
                //AreaUrinePatchesToday = (double)zone.Get("[" + InputModule + "].Script.areaUrinePatchesToday");
            } 

            HerbageGrazed += Grazed;
            HerbageGrazedN += GrazedN;
            UreaReturned += UrineNReturned;

            if(ReportToday) {
                OrgC = 0.0;
                OrgN = 0.0;
                UreaN = 0.0;
                NH4N = 0.0;
                NO3N = 0.0;
                MinN = 0.0;

                Soil soil1 = Apsim.Find(Zones[0], typeof(Soil)) as Soil;

                if(PaddockCount>1)
                    MinNPatch = new double[PaddockCount];
                else 
                    MinNPatch = new double[soil1.SoilNitrogen.PatchCount];


                int currentZoneNum = 0;
                foreach (Zone zone in Zones)
                {
                    Soil soil = Apsim.Find(zone, typeof(Soil)) as Soil;
                    Sward sward = Apsim.Find(zone, typeof(Sward)) as Sward;

                    for (int ii = 0; ii <= (soil.Thickness.Length - 1); ii++)
                    {
                        OrgC += soil.SoilNitrogen.TotalC[ii]/PaddockCount;  // TODO RJM Check this is right!
                        OrgN += soil.SoilNitrogen.organic_n[ii]/PaddockCount;
                        UreaN += soil.SoilNitrogen.urea[ii]/PaddockCount;
                        NH4N += soil.SoilNitrogen.NH4[ii]/PaddockCount;
                        NO3N += soil.SoilNitrogen.NO3[ii]/PaddockCount;

                    }

                    MinN = (UreaN + NH4N + NO3N)/PaddockCount;
                    if(PaddockCount>1) MinNPatch[currentZoneNum] = MinN;
                    dltOrgC = OrgC - iniOrgC; 
                    dltOrgN = OrgN - iniOrgN;
                    iniOrgC = OrgC; // ready for the next calculation of change in pools
                    iniOrgN = OrgN;
                    currentZoneNum++;
                }

                if(soil1.SoilNitrogen.PatchCount>1) {  // TODO will break if there is more than one paddock/zone AND more than one patch                    

                    for (int ii = 0; ii < (soil1.SoilNitrogen.PatchCount); ii++)
                    {
                        MinNPatch[ii] = soil1.SoilNitrogen.PatchTotalUrea[ii]+soil1.SoilNitrogen.PatchTotalNH4[ii] + soil1.SoilNitrogen.PatchTotalNO3[ii];
                    }
                }

                PGR = NHA / DaysSinceReport; 

                ReportingWithPatches.DoOutput();

                // now zero the reported variables
                DaysSinceReport = 0;
                HerbageGrazed = 0.0;
                HerbageGrazedN = 0.0;
                DaysSinceReport = 0;
                NHA = 0;
                PGR = 0;
                UreaReturned = 0;
                Fixation = 0;
                LeachN = 0;
                Denit = 0;
                DenitN2O = 0;
                OrgC = 0;
                OrgN = 0;
                MinN = 0;
                UreaN = 0;
                NH4N = 0;
                NO3N = 0;
            }
        }
    }
}
]]></Code>
    </Manager>
    <Report>
      <Name>ReportingWithPatches</Name>
      <IncludeInDocumentation>true</IncludeInDocumentation>
      <ExperimentFactorNames />
      <ExperimentFactorValues />
      <VariableNames>
        <string>Parent.Name as Zone</string>
        <string>[Clock].Today as Date</string>
        <string>[Clock].Today.Month as Month</string>
        <string>[Clock].Today.Month as Year</string>
        <string>[ReportingWithPatchesVariables]Script.UreaReturned as UrineNReturned</string>
        <string>[ReportingWithPatchesVariables]Script.NHA as NHA</string>
        <string>[PatchManager]Script.NumPatches as NumPatches</string>
        <string>[PatchManager]Script.ListOfPatches as ListOfPatches</string>
        <string>[ReportingWithPatchesVariables]Script.AreaUrinePatchesToday as AreaUrinePatchesToday</string>
        <string>[ReportingWithPatchesVariables]Script.HerbageGrazed as HerbageGrazed</string>
        <string>[ReportingWithPatchesVariables]Script.HerbageGrazedN as HerbageGrazedN</string>
        <string>[ReportingWithPatchesVariables]Script.LeachN as LeachN</string>
        <string>[ReportingWithPatchesVariables]Script.Denit as Denit</string>
        <string>[ReportingWithPatchesVariables]Script.Fixation as Fixation</string>
        <string>[ReportingWithPatchesVariables]Script.MinN as MinN</string>
        <string>[ReportingWithPatchesVariables]Script.UreaN as UreaN</string>
        <string>[ReportingWithPatchesVariables]Script.NH4N as NH4N</string>
        <string>[ReportingWithPatchesVariables]Script.NO3N as NO3N</string>
        <string>[ReportingWithPatchesVariables]Script.dltOrgC as dltOrgC</string>
        <string>[ReportingWithPatchesVariables]Script.dltOrgN as dltOrgN</string>
      </VariableNames>
      <EventNames>
        <string />
      </EventNames>
    </Report>
    <Zone>
      <Name>Paddock</Name>
      <Manager>
        <Name>CentrePivot</Name>
        <IncludeInDocumentation>true</IncludeInDocumentation>
        <Script>
          <allowIrrigation>yes</allowIrrigation>
          <IrrigStart>1-sep</IrrigStart>
          <IrrigEnd>30-apr</IrrigEnd>
          <SoilDepth>500</SoilDepth>
          <CritPAWForShallow>60</CritPAWForShallow>
          <CritRainToPause>30</CritRainToPause>
          <DaysToPauseOnCritRain>3</DaysToPauseOnCritRain>
          <IrrigReturnShallow>2</IrrigReturnShallow>
          <IrrigAmtShallow>10</IrrigAmtShallow>
          <PercPAWIrrigDeficitShallow>30</PercPAWIrrigDeficitShallow>
          <IrrigEffShallow>100</IrrigEffShallow>
          <IrrigReturnDeep>4</IrrigReturnDeep>
          <IrrigAmtDeep>20</IrrigAmtDeep>
          <PercPAWIrrigDeficitDeep>25</PercPAWIrrigDeficitDeep>
          <IrrigEffDeep>100</IrrigEffDeep>
          <TodayDeficit>123.894</TodayDeficit>
          <TodayDeficit_nve>-123.894</TodayDeficit_nve>
          <IrrigDay>3</IrrigDay>
          <SoilPAW>63.65</SoilPAW>
          <IrrigDeficit>25</IrrigDeficit>
          <IrrigReturn>4</IrrigReturn>
          <IrrigAmt>20</IrrigAmt>
          <IrrigEff>100</IrrigEff>
          <Rain3>0</Rain3>
          <Days2Pause>-80</Days2Pause>
        </Script>
        <Code><![CDATA[using System;
using Models.Core;
using Models.PMF;
using Models.Soils;
using System.Xml.Serialization;
using Models.PMF;
using APSIM.Shared.Utilities;
using System.Diagnostics; // used with Debugger.Break(); to debug manager scripts
        
namespace Models
{
    [Serializable] 
    [System.Xml.Serialization.XmlInclude(typeof(Model))]
    public class Script : Model
    {
        //Communication to other modules
        [Link] ISummary summary = null;
        [Link] Irrigation irrigation;
        [Link] Clock Clock;
        [Link] Soil soil;
        [Link] Weather Met; 
        [Link(IsOptional = true)] ICrop existingCrop;
       
        //User inputs from properties tab
        [Description("Turn irrigation on?")]
        public answerTypes allowIrrigation { get; set; }
        [Description("Start of irrigation season (dd-MMM)")]
        public string IrrigStart { get; set; }
        [Description("End of irrigation season (dd-MMM)")]
        public string IrrigEnd { get; set; }
        [Description("Enter the depth to which water deficit is computed (mm)")]
        public double SoilDepth { get; set; }
        [Description("PAW below which soil is considered 'shallow' (mm)")]
        public double CritPAWForShallow { get; set; }
        [Description("Amount of rainfall over the last 3 days to cause pause to irrigator (mm)")]
        public double CritRainToPause { get; set; }
        [Description("Number of days to pause irrigator after critical rainfall (days)")]
        public double DaysToPauseOnCritRain { get; set; }

        [Description("Shallow Soils: Irrigation return period (days)")]
        public double IrrigReturnShallow { get; set; }
        [Description("Shallow Soils: Effective irrigation amount (mm)")]
        public double IrrigAmtShallow { get; set; }
        [Description("Shallow Soils: Percentage of PAW at which to irrigate (%)")]
        public double PercPAWIrrigDeficitShallow { get; set; }
        [Description("Shallow Soils: Irrigation efficiency (%)")]
        public double IrrigEffShallow { get; set; }

        [Description("Deep Soils: Irrigation return period (days)")]
        public double IrrigReturnDeep { get; set; }
        [Description("Deep Soils: Effective irrigation amount (mm)")]
        public double IrrigAmtDeep { get; set; }
        [Description("Deep Soils: Percentage of PAW at which to irrigate (%)")]
        public double PercPAWIrrigDeficitDeep { get; set; }
        [Description("Deep Soils: Irrigation efficiency (%)")]
        public double IrrigEffDeep { get; set; }

        // Outputs
        public double TodayDeficit { get; set; }
        public double TodayDeficit_nve { get; set; }
        public double IrrigDay { get; set; }
        public double SoilPAW { get; set; }
        public double IrrigDeficit { get; set; }
        public double IrrigReturn { get; set; }
        public double IrrigAmt { get; set; }
        public double IrrigEff { get; set; }
        public double Rain3 { get; set; }

        public double Days2Pause { get; set; }

        // internal use
        private DateTime StartDate;               //The date when irrigation start (in date format)
        private DateTime EndDate;                 //The date when irrigation finish (in date format)
        private double RainToday=0;
        public double[] Rain_3;

        public enum answerTypes
        {
            /// <summary>a positive answer</summary>
            yes,
            /// <summary>a negative answer</summary>
            no
        }


        [EventSubscribe("StartOfSimulation")]
        private void OnStartOfSimulation(object sender, EventArgs e)
        {
            summary.WriteMessage(this, "==================================================");
            summary.WriteMessage(this, "                CentrePivot initialising          ");
            summary.WriteMessage(this, "");

            IrrigDay = 5000;  //so will reset to 1 on first day
              StartDate = DateTime.Parse(IrrigStart);
              EndDate = DateTime.Parse(IrrigEnd);

            Rain3 = 0;
            Rain_3 = new double[4];
            Rain_3[0] = 0;
            Rain_3[1] = 0;
            Rain_3[2] = 0;

              SoilPAW = 0.0;

              double[] sw_dul = soil.DULmm;
              double[] sw_15 = soil.LL15mm;  
              double MySoilDepth = 0;
              for(int z=0;z<soil.Thickness.Length;z++) {
                  MySoilDepth+=soil.Thickness[z];
                  if (MySoilDepth<= SoilDepth) 
                      SoilPAW+=sw_dul[z] - sw_15[z];    
              }

              if(SoilPAW <= CritPAWForShallow) {      
                IrrigDeficit = PercPAWIrrigDeficitShallow / 100 * SoilPAW;
                IrrigReturn = IrrigReturnShallow;
                IrrigAmt = IrrigAmtShallow;
                IrrigEff = IrrigEffShallow ;           
                summary.WriteMessage(this, "  Soil is considered to be shallow " + CritPAWForShallow + " " + SoilPAW);
            } 
            else 
            {
                IrrigDeficit = PercPAWIrrigDeficitDeep;
                IrrigReturn = IrrigReturnDeep;
                IrrigAmt = IrrigAmtDeep;
                IrrigEff = IrrigEffDeep;
                summary.WriteMessage(this, "  Soil is considered to be deep");
            }

            summary.WriteMessage(this, "  Irrigation critical deficit (mm): " + IrrigDeficit);
            summary.WriteMessage(this, "          Irrigation return (days): " + IrrigReturn);
            summary.WriteMessage(this, "     Irrigation pumped amount (mm): " + IrrigAmt);
            summary.WriteMessage(this, "         Irrigation efficiency (%): " + IrrigEff);
            summary.WriteMessage(this, "");
            summary.WriteMessage(this, "                CentrePivot initialised");
            summary.WriteMessage(this, "==================================================");
            
        }

        [EventSubscribe("Commencing")]
        private void OnSimulationCommencing(object sender, EventArgs e)
        {
        }

       [EventSubscribe("PreparingNewWeatherData")]
        private void OnPreparingNewWeatherData(object sender, EventArgs e)
        {
            RainToday = Met.Rain; //takes note of how much rain was due to fall today        
        }

        //[EventSubscribe("DoDailyInitialisation")]
        //private void OnDoDailyInitialisation(object sender, EventArgs e) 
        //{
        //}

        [EventSubscribe("StartOfDay")]
        private void OnStartOfDay(object sender, EventArgs e)
        {
            int rain=0;

            Rain_3[2] = Rain_3[1];
            Rain_3[1] = Rain_3[0];
            Rain_3[0] = RainToday;
            Rain3 = Rain_3[0] + Rain_3[1] + Rain_3[2]; //sums the rain in the last 3 days
            if(Rain3 >= CritRainToPause)
                Days2Pause = DaysToPauseOnCritRain;
            else
                Days2Pause = Days2Pause - 1;

            double[] sw_dul = soil.DULmm;
            double[] sw_sw = soil.SWAtWaterThickness;  // ??? was MySwim.sw_dep
              double[] sw_15 = soil.LL15mm;  
              double MySoilDepth = 0;

            TodayDeficit = 0.0;
            SoilPAW = 0.0;

              for(int z=0;z<soil.Thickness.Length;z++) {
                  MySoilDepth+=soil.Thickness[z];
                  if (MySoilDepth<= SoilDepth) {
                      SoilPAW+=sw_dul[z] - sw_15[z];    
                      TodayDeficit += sw_dul[z] - Math.Min(sw_dul[z], sw_sw[z]);
                  }
              }
            TodayDeficit_nve = -1 * TodayDeficit;

            if (isBetween(Clock.Today, StartDate, EndDate)) {
                 if(SoilPAW <= CritPAWForShallow) {      
                    IrrigDeficit = PercPAWIrrigDeficitShallow / 100 * SoilPAW;
                    IrrigReturn = IrrigReturnShallow;
                    IrrigAmt = IrrigAmtShallow;
                    IrrigEff = IrrigEffShallow ;           
                } 
                else 
                {
                    IrrigDeficit = PercPAWIrrigDeficitDeep;
                    IrrigReturn = IrrigReturnDeep;
                    IrrigAmt = IrrigAmtDeep;
                    IrrigEff = IrrigEffDeep;
                }

                if(Days2Pause < 0.5) {
                    IrrigDay = IrrigDay + 1;
                    if(IrrigDay > IrrigReturn)
                        IrrigDay = 1;  // and day = 1 is when the irrigation happens                    

                    if ((TodayDeficit >= IrrigDeficit) && (allowIrrigation == answerTypes.yes)) {
                        if(IrrigDay == 1){
                            double AmountToApply = (IrrigAmt / (IrrigEff / 100.0));
                            //summary.WriteMessage(this, "Rain today was " + RainToday + ". Applying " + AmountToApply+ " mm of irrigation");
                            irrigation.Apply(AmountToApply);

                        }
                    }
                }
            }
        }

        ///Checks whether theDate is between iniDate and endDate (non-year specific)
        private bool isBetween(DateTime theDay, DateTime iniDate, DateTime endDate)
        {
            bool result = false;
            if (iniDate.DayOfYear < endDate.DayOfYear)
            {
                // period is within one year, ex: summer in the northern hemisphere
                if ((theDay.DayOfYear >= iniDate.DayOfYear) && (theDay.DayOfYear <= endDate.DayOfYear))
                    result = true;
            }
            else
            {
                // period goes over the end of the year, ex: summer in the southern hemisphere
                if ((theDay.DayOfYear >= iniDate.DayOfYear) || (theDay.DayOfYear <= endDate.DayOfYear))
                    result = true;
            }
            
            return result;
        }

    }
}
]]></Code>
      </Manager>
      <SurfaceOrganicMatter>
        <Name>SurfaceOrganicMatter</Name>
        <IncludeInDocumentation>true</IncludeInDocumentation>
        <PondActive>no</PondActive>
        <ReportAdditions>no</ReportAdditions>
        <ReportRemovals>no</ReportRemovals>
        <ResidueTypes>
          <Name>ResidueTypes</Name>
          <IncludeInDocumentation>true</IncludeInDocumentation>
          <LoadFromResource>ResidueTypes</LoadFromResource>
        </ResidueTypes>
        <TillageTypes>
          <Name>TillageTypesList</Name>
          <IncludeInDocumentation>true</IncludeInDocumentation>
          <TillageType />
        </TillageTypes>
        <Pools>
          <Pool>
            <PoolName>grass</PoolName>
            <ResidueType>grass</ResidueType>
            <Mass>500</Mass>
            <CNRatio>15</CNRatio>
            <CPRatio>NaN</CPRatio>
            <StandingFraction>0</StandingFraction>
          </Pool>
        </Pools>
        <PoolName>grass</PoolName>
        <type>grass</type>
        <mass>500</mass>
        <standing_fraction>0</standing_fraction>
        <cpr />
        <cnr>15</cnr>
        <CriticalResidueWeight>2000</CriticalResidueWeight>
        <OptimumDecompTemp>20</OptimumDecompTemp>
        <MaxCumulativeEOS>20</MaxCumulativeEOS>
        <CNRatioDecompCoeff>0.277</CNRatioDecompCoeff>
        <CNRatioDecompThreshold>25</CNRatioDecompThreshold>
        <TotalLeachRain>25</TotalLeachRain>
        <MinRainToLeach>10</MinRainToLeach>
        <CriticalMinimumOrganicC>0.004</CriticalMinimumOrganicC>
        <DefaultCPRatio>0</DefaultCPRatio>
        <DefaultStandingFraction>0</DefaultStandingFraction>
        <StandingExtinctCoeff>0.5</StandingExtinctCoeff>
        <FractionFaecesAdded>0.5</FractionFaecesAdded>
      </SurfaceOrganicMatter>
      <MicroClimate>
        <Name>MicroClimate</Name>
        <IncludeInDocumentation>true</IncludeInDocumentation>
        <a_interception>0</a_interception>
        <b_interception>1</b_interception>
        <c_interception>0</c_interception>
        <d_interception>0</d_interception>
        <soil_albedo>0.23</soil_albedo>
        <sun_angle>15</sun_angle>
        <soil_heat_flux_fraction>0.4</soil_heat_flux_fraction>
        <night_interception_fraction>0.5</night_interception_fraction>
        <refheight>2</refheight>
        <albedo>0.15</albedo>
        <emissivity>0.95999999999999974</emissivity>
        <RadIntTotal>-4.3854844207218751</RadIntTotal>
      </MicroClimate>
      <Irrigation>
        <Name>Irrigation</Name>
        <IncludeInDocumentation>true</IncludeInDocumentation>
      </Irrigation>
      <Fertiliser>
        <Name>Fertiliser</Name>
        <IncludeInDocumentation>true</IncludeInDocumentation>
      </Fertiliser>
      <SoluteManager>
        <Name>SoluteManager</Name>
        <IncludeInDocumentation>true</IncludeInDocumentation>
      </SoluteManager>
      <Sward>
        <Name>Sward</Name>
        <PastureSpecies>
          <Name>Ryegrass</Name>
          <IncludeInDocumentation>true</IncludeInDocumentation>
          <MaximumNUptake>10</MaximumNUptake>
          <Albedo>0.26</Albedo>
          <Gsmax>0.011</Gsmax>
          <R50>200</R50>
          <SpeciesFamily>Grass</SpeciesFamily>
          <PhotosyntheticPathway>C3</PhotosyntheticPathway>
          <InitialShootDM>750</InitialShootDM>
          <InitialRootDM>450</InitialRootDM>
          <InitialRootDepth>750</InitialRootDepth>
          <ReferencePhotosyntheticRate>1</ReferencePhotosyntheticRate>
          <LightExtinctionCoefficient>0.5</LightExtinctionCoefficient>
          <GrowthTminimum>1</GrowthTminimum>
          <GrowthToptimum>20</GrowthToptimum>
          <GrowthTEffectExponent>1.7</GrowthTEffectExponent>
          <UseHeatStressFactor>yes</UseHeatStressFactor>
          <HeatOnsetTemperature>28</HeatOnsetTemperature>
          <HeatFullTemperature>35</HeatFullTemperature>
          <HeatRecoverySumDD>30</HeatRecoverySumDD>
          <HeatRecoveryTReference>25</HeatRecoveryTReference>
          <UseColdStressFactor>yes</UseColdStressFactor>
          <ColdOnsetTemperature>1</ColdOnsetTemperature>
          <ColdFullTemperature>-5</ColdFullTemperature>
          <ColdRecoverySumDD>25</ColdRecoverySumDD>
          <ColdRecoveryTReference>0</ColdRecoveryTReference>
          <MaintenanceRespirationCoefficient>0.03</MaintenanceRespirationCoefficient>
          <GrowthRespirationCoefficient>0.25</GrowthRespirationCoefficient>
          <RespirationTReference>20</RespirationTReference>
          <RespirationExponent>1.5</RespirationExponent>
          <NThresholdsForLeaves>
            <double>0.04</double>
            <double>0.012</double>
            <double>0.05</double>
          </NThresholdsForLeaves>
          <NThresholdsForStems>
            <double>0.02</double>
            <double>0.006</double>
            <double>0.025</double>
          </NThresholdsForStems>
          <NThresholdsForStolons>
            <double>0</double>
            <double>0</double>
            <double>0</double>
          </NThresholdsForStolons>
          <NThresholdsForRoots>
            <double>0.02</double>
            <double>0.006</double>
            <double>0.025</double>
          </NThresholdsForRoots>
          <DegreesDayForGermination>125</DegreesDayForGermination>
          <TargetShootRootRatio>4</TargetShootRootRatio>
          <MaxRootAllocation>0.25</MaxRootAllocation>
          <ShootRootGlfFactor>0.5</ShootRootGlfFactor>
          <UseReproSeasonFactor>yes</UseReproSeasonFactor>
          <ReproSeasonReferenceLatitude>41</ReproSeasonReferenceLatitude>
          <ReproSeasonTimingCoeff>0.14</ReproSeasonTimingCoeff>
          <ReproSeasonMaxAllocationIncrease>0.5</ReproSeasonMaxAllocationIncrease>
          <ReproSeasonAllocationCoeff>0.1</ReproSeasonAllocationCoeff>
          <FractionLeafMaximum>0.7</FractionLeafMaximum>
          <FractionLeafMinimum>0.7</FractionLeafMinimum>
          <FractionLeafDMThreshold>500</FractionLeafDMThreshold>
          <FractionLeafDMFactor>2000</FractionLeafDMFactor>
          <FractionLeafExponent>3</FractionLeafExponent>
          <FractionToStolon>0</FractionToStolon>
          <SpecificLeafArea>25</SpecificLeafArea>
          <SpecificRootLength>100</SpecificRootLength>
          <StolonEffectOnLAI>0</StolonEffectOnLAI>
          <ShootMaxEffectOnLAI>1000</ShootMaxEffectOnLAI>
          <MaxStemEffectOnLAI>1</MaxStemEffectOnLAI>
          <LiveLeavesPerTiller>3</LiveLeavesPerTiller>
          <TissueTurnoverRateShoot>0.05</TissueTurnoverRateShoot>
          <TissueTurnoverRateRoot>0.02</TissueTurnoverRateRoot>
          <DetachmentRateShoot>0.08</DetachmentRateShoot>
          <TurnoverTemperatureMin>2</TurnoverTemperatureMin>
          <TurnoverTemperatureRef>20</TurnoverTemperatureRef>
          <TurnoverTemperatureExponent>1</TurnoverTemperatureExponent>
          <TurnoverDroughtEffectMax>1</TurnoverDroughtEffectMax>
          <TurnoverDroughtThreshold>0.5</TurnoverDroughtThreshold>
          <TurnoverDefoliationCoefficient>0.5</TurnoverDefoliationCoefficient>
          <TurnoverDefoliationRootEffect>0.1</TurnoverDefoliationRootEffect>
          <FractionNLuxuryRemobilisable>
            <double>0.1</double>
            <double>0.1</double>
            <double>0.1</double>
          </FractionNLuxuryRemobilisable>
          <MinimumNFixation>0</MinimumNFixation>
          <MaximumNFixation>0</MaximumNFixation>
          <SoilSaturationEffectMax>0.1</SoilSaturationEffectMax>
          <MinimumWaterFreePorosity>-1</MinimumWaterFreePorosity>
          <SoilSaturationRecoveryFactor>0.25</SoilSaturationRecoveryFactor>
          <NDillutionCoefficient>0.25</NDillutionCoefficient>
          <GlfGeneric>1</GlfGeneric>
          <GlfSoilFertility>1</GlfSoilFertility>
          <PlantHeightMinimum>25</PlantHeightMinimum>
          <PlantHeightMaximum>600</PlantHeightMaximum>
          <PlantHeightMassForMax>10000</PlantHeightMassForMax>
          <PlantHeightExponent>2.8</PlantHeightExponent>
          <RootDepthMinimum>50</RootDepthMinimum>
          <RootDepthMaximum>750</RootDepthMaximum>
          <RootElongationRate>25</RootElongationRate>
          <RootDistributionDepthParam>90</RootDistributionDepthParam>
          <RootDistributionExponent>3.2</RootDistributionExponent>
          <DigestibilitiesCellWall>
            <double>0.6</double>
            <double>0.6</double>
            <double>0.6</double>
            <double>0.2</double>
          </DigestibilitiesCellWall>
          <MinimumGreenWt>100</MinimumGreenWt>
          <FractionStolonStanding>0</FractionStolonStanding>
          <PreferenceForGreenOverDead>1</PreferenceForGreenOverDead>
          <PreferenceForLeafOverStems>1</PreferenceForLeafOverStems>
          <WaterAvailableMethod>DefaultAPSIM</WaterAvailableMethod>
          <NitrogenAvailableMethod>BasicAgPasture</NitrogenAvailableMethod>
        </PastureSpecies>
        <PastureSpecies>
          <Name>WhiteClover</Name>
          <IncludeInDocumentation>true</IncludeInDocumentation>
          <MaximumNUptake>10</MaximumNUptake>
          <Albedo>0.26</Albedo>
          <Gsmax>0.011</Gsmax>
          <R50>200</R50>
          <SpeciesFamily>Legume</SpeciesFamily>
          <PhotosyntheticPathway>C3</PhotosyntheticPathway>
          <InitialShootDM>250</InitialShootDM>
          <InitialRootDM>150</InitialRootDM>
          <InitialRootDepth>350</InitialRootDepth>
          <ReferencePhotosyntheticRate>1</ReferencePhotosyntheticRate>
          <LightExtinctionCoefficient>0.8</LightExtinctionCoefficient>
          <GrowthTminimum>2</GrowthTminimum>
          <GrowthToptimum>22</GrowthToptimum>
          <GrowthTEffectExponent>1.7</GrowthTEffectExponent>
          <UseHeatStressFactor>yes</UseHeatStressFactor>
          <HeatOnsetTemperature>30</HeatOnsetTemperature>
          <HeatFullTemperature>36</HeatFullTemperature>
          <HeatRecoverySumDD>20</HeatRecoverySumDD>
          <HeatRecoveryTReference>25</HeatRecoveryTReference>
          <UseColdStressFactor>yes</UseColdStressFactor>
          <ColdOnsetTemperature>2</ColdOnsetTemperature>
          <ColdFullTemperature>-5</ColdFullTemperature>
          <ColdRecoverySumDD>30</ColdRecoverySumDD>
          <ColdRecoveryTReference>0</ColdRecoveryTReference>
          <MaintenanceRespirationCoefficient>0.04</MaintenanceRespirationCoefficient>
          <GrowthRespirationCoefficient>0.25</GrowthRespirationCoefficient>
          <RespirationTReference>20</RespirationTReference>
          <RespirationExponent>1.5</RespirationExponent>
          <NThresholdsForLeaves>
            <double>0.045</double>
            <double>0.02</double>
            <double>0.055</double>
          </NThresholdsForLeaves>
          <NThresholdsForStems>
            <double>0.0225</double>
            <double>0.01</double>
            <double>0.0275</double>
          </NThresholdsForStems>
          <NThresholdsForStolons>
            <double>0.0225</double>
            <double>0.01</double>
            <double>0.0275</double>
          </NThresholdsForStolons>
          <NThresholdsForRoots>
            <double>0.0225</double>
            <double>0.01</double>
            <double>0.0275</double>
          </NThresholdsForRoots>
          <DegreesDayForGermination>125</DegreesDayForGermination>
          <TargetShootRootRatio>4</TargetShootRootRatio>
          <MaxRootAllocation>0.25</MaxRootAllocation>
          <ShootRootGlfFactor>0.5</ShootRootGlfFactor>
          <UseReproSeasonFactor>yes</UseReproSeasonFactor>
          <ReproSeasonReferenceLatitude>41</ReproSeasonReferenceLatitude>
          <ReproSeasonTimingCoeff>0.14</ReproSeasonTimingCoeff>
          <ReproSeasonMaxAllocationIncrease>0.5</ReproSeasonMaxAllocationIncrease>
          <ReproSeasonAllocationCoeff>0.1</ReproSeasonAllocationCoeff>
          <FractionLeafMaximum>0.56</FractionLeafMaximum>
          <FractionLeafMinimum>0.28</FractionLeafMinimum>
          <FractionLeafDMThreshold>500</FractionLeafDMThreshold>
          <FractionLeafDMFactor>2000</FractionLeafDMFactor>
          <FractionLeafExponent>3</FractionLeafExponent>
          <FractionToStolon>0.2</FractionToStolon>
          <SpecificLeafArea>30</SpecificLeafArea>
          <SpecificRootLength>45</SpecificRootLength>
          <StolonEffectOnLAI>0.3</StolonEffectOnLAI>
          <ShootMaxEffectOnLAI>500</ShootMaxEffectOnLAI>
          <MaxStemEffectOnLAI>0.5</MaxStemEffectOnLAI>
          <LiveLeavesPerTiller>3</LiveLeavesPerTiller>
          <TissueTurnoverRateShoot>0.05</TissueTurnoverRateShoot>
          <TissueTurnoverRateRoot>0.02</TissueTurnoverRateRoot>
          <DetachmentRateShoot>0.11</DetachmentRateShoot>
          <TurnoverTemperatureMin>2</TurnoverTemperatureMin>
          <TurnoverTemperatureRef>20</TurnoverTemperatureRef>
          <TurnoverTemperatureExponent>1</TurnoverTemperatureExponent>
          <TurnoverDroughtEffectMax>1</TurnoverDroughtEffectMax>
          <TurnoverDroughtThreshold>0.5</TurnoverDroughtThreshold>
          <TurnoverDefoliationCoefficient>0.5</TurnoverDefoliationCoefficient>
          <TurnoverDefoliationRootEffect>0.1</TurnoverDefoliationRootEffect>
          <FractionNLuxuryRemobilisable>
            <double>0.1</double>
            <double>0.1</double>
            <double>0.1</double>
          </FractionNLuxuryRemobilisable>
          <MinimumNFixation>0.2</MinimumNFixation>
          <MaximumNFixation>0.6</MaximumNFixation>
          <SoilSaturationEffectMax>0.1</SoilSaturationEffectMax>
          <MinimumWaterFreePorosity>-1</MinimumWaterFreePorosity>
          <SoilSaturationRecoveryFactor>0.25</SoilSaturationRecoveryFactor>
          <NDillutionCoefficient>1</NDillutionCoefficient>
          <GlfGeneric>1</GlfGeneric>
          <GlfSoilFertility>1</GlfSoilFertility>
          <PlantHeightMinimum>25</PlantHeightMinimum>
          <PlantHeightMaximum>350</PlantHeightMaximum>
          <PlantHeightMassForMax>7500</PlantHeightMassForMax>
          <PlantHeightExponent>2.5</PlantHeightExponent>
          <RootDepthMinimum>30</RootDepthMinimum>
          <RootDepthMaximum>350</RootDepthMaximum>
          <RootElongationRate>25</RootElongationRate>
          <RootDistributionDepthParam>70</RootDistributionDepthParam>
          <RootDistributionExponent>2.5</RootDistributionExponent>
          <DigestibilitiesCellWall>
            <double>0.6</double>
            <double>0.6</double>
            <double>0.6</double>
            <double>0.2</double>
          </DigestibilitiesCellWall>
          <MinimumGreenWt>50</MinimumGreenWt>
          <FractionStolonStanding>0</FractionStolonStanding>
          <PreferenceForGreenOverDead>1</PreferenceForGreenOverDead>
          <PreferenceForLeafOverStems>1</PreferenceForLeafOverStems>
          <WaterAvailableMethod>DefaultAPSIM</WaterAvailableMethod>
          <NitrogenAvailableMethod>BasicAgPasture</NitrogenAvailableMethod>
        </PastureSpecies>
        <IncludeInDocumentation>true</IncludeInDocumentation>
        <ControlledBySward>yes</ControlledBySward>
        <WaterUptakeSource>species</WaterUptakeSource>
        <NUptakeSource>species</NUptakeSource>
      </Sward>
      <Soil>
        <Name>Soil</Name>
        <InitialWater>
          <Name>Initial water</Name>
          <IncludeInDocumentation>true</IncludeInDocumentation>
          <PercentMethod>FilledFromTop</PercentMethod>
          <FractionFull>0.987012987012987</FractionFull>
          <DepthWetSoil>NaN</DepthWetSoil>
        </InitialWater>
        <Water>
          <Name>Water</Name>
          <SoilCrop>
            <Name>SwardSoil</Name>
            <IncludeInDocumentation>true</IncludeInDocumentation>
            <LL>
              <double>0.15</double>
              <double>0.14</double>
              <double>0.06</double>
              <double>0.02</double>
              <double>0.01</double>
              <double>0.01</double>
              <double>0.01</double>
            </LL>
            <KL>
              <double>0.1</double>
              <double>0.1</double>
              <double>0.08</double>
              <double>0.04</double>
              <double>0.01</double>
              <double>0</double>
              <double>0</double>
            </KL>
            <XF>
              <double>1</double>
              <double>1</double>
              <double>1</double>
              <double>1</double>
              <double>1</double>
              <double>0</double>
              <double>0</double>
            </XF>
          </SoilCrop>
          <SoilCrop>
            <Name>RyegrassSoil</Name>
            <IncludeInDocumentation>true</IncludeInDocumentation>
            <LL>
              <double>0.14</double>
              <double>0.14</double>
              <double>0.03</double>
              <double>0.03</double>
              <double>0.03</double>
              <double>0.03</double>
              <double>0.03</double>
            </LL>
            <KL>
              <double>0.1</double>
              <double>0.1</double>
              <double>0.1</double>
              <double>0.02</double>
              <double>0</double>
              <double>0</double>
              <double>0</double>
            </KL>
            <XF>
              <double>1</double>
              <double>1</double>
              <double>1</double>
              <double>1</double>
              <double>0</double>
              <double>0</double>
              <double>0</double>
            </XF>
          </SoilCrop>
          <SoilCrop>
            <Name>WhiteCloverSoil</Name>
            <IncludeInDocumentation>true</IncludeInDocumentation>
            <LL>
              <double>0.14</double>
              <double>0.14</double>
              <double>0.03</double>
              <double>0.03</double>
              <double>0.03</double>
              <double>0.03</double>
              <double>0.03</double>
            </LL>
            <KL>
              <double>0.1</double>
              <double>0.1</double>
              <double>0.1</double>
              <double>0.02</double>
              <double>0</double>
              <double>0</double>
              <double>0</double>
            </KL>
            <XF>
              <double>1</double>
              <double>1</double>
              <double>1</double>
              <double>1</double>
              <double>0</double>
              <double>0</double>
              <double>0</double>
            </XF>
          </SoilCrop>
          <IncludeInDocumentation>true</IncludeInDocumentation>
          <Thickness>
            <double>150</double>
            <double>150</double>
            <double>200</double>
            <double>150</double>
            <double>250</double>
            <double>300</double>
            <double>300</double>
          </Thickness>
          <BD>
            <double>1.3</double>
            <double>1.35</double>
            <double>1</double>
            <double>0.53</double>
            <double>0.31</double>
            <double>0.3</double>
            <double>0.3</double>
          </BD>
          <AirDry>
            <double>0.05</double>
            <double>0.12</double>
            <double>0.055</double>
            <double>0.015</double>
            <double>0.01</double>
            <double>0.01</double>
            <double>0.01</double>
          </AirDry>
          <LL15>
            <double>0.15</double>
            <double>0.14</double>
            <double>0.055</double>
            <double>0.015</double>
            <double>0.01</double>
            <double>0.01</double>
            <double>0.01</double>
          </LL15>
          <DUL>
            <double>0.36</double>
            <double>0.34</double>
            <double>0.19</double>
            <double>0.065</double>
            <double>0.04</double>
            <double>0.03</double>
            <double>0.03</double>
          </DUL>
          <SAT>
            <double>0.45</double>
            <double>0.43</double>
            <double>0.25</double>
            <double>0.15</double>
            <double>0.11</double>
            <double>0.11</double>
            <double>0.11</double>
          </SAT>
          <KS>
            <double>5000</double>
            <double>2500</double>
            <double>3000</double>
            <double>10000</double>
            <double>17500</double>
            <double>20000</double>
            <double>20000</double>
          </KS>
        </Water>
        <SoilWater>
          <Name>SoilWater</Name>
          <IncludeInDocumentation>true</IncludeInDocumentation>
          <SummerDate>1-Nov</SummerDate>
          <SummerU>6</SummerU>
          <SummerCona>3.5</SummerCona>
          <WinterDate>1-apr</WinterDate>
          <WinterU>2</WinterU>
          <WinterCona>2</WinterCona>
          <DiffusConst>88</DiffusConst>
          <DiffusSlope>35</DiffusSlope>
          <Salb>0.13</Salb>
          <CN2Bare>73</CN2Bare>
          <CNRed>20</CNRed>
          <CNCov>0.8</CNCov>
          <slope>0</slope>
          <discharge_width>0</discharge_width>
          <catchment_area>0</catchment_area>
          <max_pond>0</max_pond>
          <Thickness>
            <double>100</double>
            <double>200</double>
            <double>300</double>
            <double>300</double>
            <double>300</double>
            <double>300</double>
            <double>300</double>
          </Thickness>
          <SWCON>
            <double>0.4</double>
            <double>0.5</double>
            <double>0.6</double>
            <double>0.6</double>
            <double>0.8</double>
            <double>0.8</double>
            <double>0.8</double>
          </SWCON>
          <KLAT>
            <double>0</double>
            <double>0</double>
            <double>0</double>
            <double>0</double>
            <double>0</double>
            <double>0</double>
            <double>0</double>
          </KLAT>
          <residueinterception>0</residueinterception>
        </SoilWater>
        <SoilOrganicMatter>
          <Name>SoilOrganicMatter</Name>
          <IncludeInDocumentation>true</IncludeInDocumentation>
          <RootCN>40</RootCN>
          <RootWt>1000</RootWt>
          <SoilCN>12</SoilCN>
          <EnrACoeff>7.4</EnrACoeff>
          <EnrBCoeff>0.2</EnrBCoeff>
          <Thickness>
            <double>150</double>
            <double>150</double>
            <double>200</double>
            <double>150</double>
            <double>250</double>
            <double>300</double>
            <double>300</double>
          </Thickness>
          <Depth>
            <string>0-15</string>
            <string>15-30</string>
            <string>30-50</string>
            <string>50-65</string>
            <string>65-90</string>
            <string>90-120</string>
            <string>120-150</string>
          </Depth>
          <OC>
            <double>3</double>
            <double>1</double>
            <double>0.6</double>
            <double>0.4</double>
            <double>0.25</double>
            <double>0.15</double>
            <double>0.1</double>
          </OC>
          <FBiom>
            <double>0.04</double>
            <double>0.02</double>
            <double>0.02</double>
            <double>0.01</double>
            <double>0.01</double>
            <double>0</double>
            <double>0</double>
          </FBiom>
          <FInert>
            <double>0.5</double>
            <double>0.7</double>
            <double>0.83</double>
            <double>0.9</double>
            <double>0.95</double>
            <double>0.99</double>
            <double>0.99</double>
          </FInert>
          <OCUnits>Total</OCUnits>
        </SoilOrganicMatter>
        <Analysis>
          <Name>Analysis</Name>
          <IncludeInDocumentation>true</IncludeInDocumentation>
          <Thickness>
            <double>100</double>
            <double>200</double>
            <double>300</double>
            <double>300</double>
            <double>300</double>
            <double>300</double>
            <double>300</double>
          </Thickness>
          <Rocks>
            <double>0</double>
            <double>0</double>
            <double>10</double>
            <double>40</double>
            <double>60</double>
            <double>70</double>
            <double>70</double>
          </Rocks>
          <Texture />
          <MunsellColour />
          <PH>
            <double>5.9</double>
            <double>5.9</double>
            <double>5.9</double>
            <double>5.9</double>
            <double>5.9</double>
            <double>5.9</double>
            <double>5.9</double>
          </PH>
          <CEC>
            <double>12.5</double>
            <double>10</double>
            <double>9</double>
            <double>5</double>
            <double>4</double>
            <double>4</double>
            <double>4</double>
          </CEC>
          <ParticleSizeSand>
            <double>15</double>
            <double>20</double>
            <double>25</double>
            <double>35</double>
            <double>40</double>
            <double>40</double>
            <double>40</double>
          </ParticleSizeSand>
          <ParticleSizeSilt>
            <double>65</double>
            <double>65</double>
            <double>63</double>
            <double>57</double>
            <double>54</double>
            <double>55</double>
            <double>55</double>
          </ParticleSizeSilt>
          <ParticleSizeClay>
            <double>20</double>
            <double>15</double>
            <double>12</double>
            <double>8</double>
            <double>6</double>
            <double>5</double>
            <double>5</double>
          </ParticleSizeClay>
          <PHUnits>Water</PHUnits>
          <BoronUnits>HotWater</BoronUnits>
        </Analysis>
        <Sample>
          <Name>Initial nitrogen</Name>
          <IncludeInDocumentation>true</IncludeInDocumentation>
          <Thickness>
            <double>100</double>
            <double>200</double>
            <double>300</double>
            <double>300</double>
            <double>300</double>
            <double>300</double>
            <double>300</double>
          </Thickness>
          <NO3>
            <double>7.619</double>
            <double>7.27</double>
            <double>3.871</double>
            <double>3.84</double>
            <double>3.81</double>
            <double>3.779</double>
            <double>3.691</double>
          </NO3>
          <NH4>
            <double>0.132</double>
            <double>0.132</double>
            <double>0.132</double>
            <double>0.132</double>
            <double>0.132</double>
            <double>0.132</double>
            <double>0.132</double>
          </NH4>
          <NO3Units>ppm</NO3Units>
          <NH4Units>ppm</NH4Units>
          <SWUnits>Volumetric</SWUnits>
          <OCUnits>Total</OCUnits>
          <PHUnits>Water</PHUnits>
        </Sample>
        <SoilNitrogen>
          <Name>SoilNitrogen</Name>
          <IncludeInDocumentation>true</IncludeInDocumentation>
          <fom_type>
            <string>default</string>
            <string>manure</string>
            <string>mucuna</string>
            <string>lablab</string>
            <string>shemp</string>
            <string>stable</string>
          </fom_type>
          <fract_carb>
            <double>0.2</double>
            <double>0.3</double>
            <double>0.54</double>
            <double>0.57</double>
            <double>0.45</double>
            <double>0</double>
          </fract_carb>
          <fract_cell>
            <double>0.7</double>
            <double>0.3</double>
            <double>0.37</double>
            <double>0.37</double>
            <double>0.47</double>
            <double>0.1</double>
          </fract_cell>
          <fract_lign>
            <double>0.1</double>
            <double>0.4</double>
            <double>0.09</double>
            <double>0.06</double>
            <double>0.08</double>
            <double>0.9</double>
          </fract_lign>
        </SoilNitrogen>
        <CERESSoilTemperature>
          <Name>CERESSoilTemperature</Name>
          <IncludeInDocumentation>true</IncludeInDocumentation>
        </CERESSoilTemperature>
        <IncludeInDocumentation>true</IncludeInDocumentation>
        <RecordNumber>0</RecordNumber>
        <SoilType>NZ_Sedimentary</SoilType>
        <LocalName>Lismore</LocalName>
        <Site>Winchmore</Site>
        <NearestTown>Ashburton</NearestTown>
        <Region>Canterbury</Region>
        <Country>New Zealand</Country>
        <NaturalVegetation />
        <Latitude>-48.48</Latitude>
        <Longitude>0</Longitude>
      </Soil>
      <IncludeInDocumentation>true</IncludeInDocumentation>
      <Area>1</Area>
      <Slope>0</Slope>
    </Zone>
    <IncludeInDocumentation>true</IncludeInDocumentation>
  </Simulation>
  <Graph>
    <Name>NHA</Name>
    <Series>
      <Name>NHA</Name>
      <IncludeInDocumentation>true</IncludeInDocumentation>
      <Type>Scatter</Type>
      <XAxis>Bottom</XAxis>
      <YAxis>Left</YAxis>
      <ColourArgb>-11094807</ColourArgb>
      <FactorIndexToVaryColours>0</FactorIndexToVaryColours>
      <FactorIndexToVaryMarkers>0</FactorIndexToVaryMarkers>
      <FactorIndexToVaryLines>-1</FactorIndexToVaryLines>
      <Marker>FilledCircle</Marker>
      <MarkerSize>Normal</MarkerSize>
      <Line>Solid</Line>
      <LineThickness>Normal</LineThickness>
      <Checkpoint>Current</Checkpoint>
      <TableName>ReportingWithPatches</TableName>
      <XFieldName>Date</XFieldName>
      <YFieldName>NHA</YFieldName>
      <ShowInLegend>true</ShowInLegend>
      <IncludeSeriesNameInLegend>true</IncludeSeriesNameInLegend>
      <Cumulative>true</Cumulative>
      <CumulativeX>false</CumulativeX>
    </Series>
    <IncludeInDocumentation>true</IncludeInDocumentation>
    <Axis>
      <Type>Bottom</Type>
      <Title />
      <Inverted>false</Inverted>
      <Minimum>NaN</Minimum>
      <Maximum>NaN</Maximum>
      <Interval>NaN</Interval>
    </Axis>
    <Axis>
      <Type>Left</Type>
      <Inverted>false</Inverted>
      <Minimum>NaN</Minimum>
      <Maximum>NaN</Maximum>
      <Interval>NaN</Interval>
    </Axis>
    <LegendPosition>TopRight</LegendPosition>
    <DisabledSeries />
  </Graph>
  <Graph>
    <Name>Denitrification</Name>
    <Series>
      <Name>denit</Name>
      <IncludeInDocumentation>true</IncludeInDocumentation>
      <Type>Scatter</Type>
      <XAxis>Bottom</XAxis>
      <YAxis>Left</YAxis>
      <ColourArgb>-11094807</ColourArgb>
      <FactorIndexToVaryColours>0</FactorIndexToVaryColours>
      <FactorIndexToVaryMarkers>-1</FactorIndexToVaryMarkers>
      <FactorIndexToVaryLines>-1</FactorIndexToVaryLines>
      <Marker>FilledCircle</Marker>
      <MarkerSize>Normal</MarkerSize>
      <Line>Solid</Line>
      <LineThickness>Normal</LineThickness>
      <Checkpoint>Current</Checkpoint>
      <TableName>ReportingWithPatches</TableName>
      <XFieldName>Date</XFieldName>
      <YFieldName>Denit</YFieldName>
      <ShowInLegend>true</ShowInLegend>
      <IncludeSeriesNameInLegend>true</IncludeSeriesNameInLegend>
      <Cumulative>true</Cumulative>
      <CumulativeX>false</CumulativeX>
    </Series>
    <IncludeInDocumentation>true</IncludeInDocumentation>
    <Axis>
      <Type>Bottom</Type>
      <Inverted>false</Inverted>
      <Minimum>NaN</Minimum>
      <Maximum>NaN</Maximum>
      <Interval>NaN</Interval>
    </Axis>
    <Axis>
      <Type>Left</Type>
      <Inverted>false</Inverted>
      <Minimum>NaN</Minimum>
      <Maximum>NaN</Maximum>
      <Interval>NaN</Interval>
    </Axis>
    <LegendPosition>TopRight</LegendPosition>
    <DisabledSeries />
  </Graph>
  <Graph>
    <Name>Leaching</Name>
    <Series>
      <Name>leach</Name>
      <IncludeInDocumentation>true</IncludeInDocumentation>
      <Type>Scatter</Type>
      <XAxis>Bottom</XAxis>
      <YAxis>Left</YAxis>
      <ColourArgb>-11094807</ColourArgb>
      <FactorIndexToVaryColours>0</FactorIndexToVaryColours>
      <FactorIndexToVaryMarkers>-1</FactorIndexToVaryMarkers>
      <FactorIndexToVaryLines>-1</FactorIndexToVaryLines>
      <Marker>FilledCircle</Marker>
      <MarkerSize>Normal</MarkerSize>
      <Line>Solid</Line>
      <LineThickness>Normal</LineThickness>
      <Checkpoint>Current</Checkpoint>
      <TableName>ReportingWithPatches</TableName>
      <XFieldName>Date</XFieldName>
      <YFieldName>LeachN</YFieldName>
      <ShowInLegend>true</ShowInLegend>
      <IncludeSeriesNameInLegend>true</IncludeSeriesNameInLegend>
      <Cumulative>true</Cumulative>
      <CumulativeX>false</CumulativeX>
    </Series>
    <IncludeInDocumentation>true</IncludeInDocumentation>
    <Axis>
      <Type>Bottom</Type>
      <Inverted>false</Inverted>
      <Minimum>NaN</Minimum>
      <Maximum>NaN</Maximum>
      <Interval>NaN</Interval>
    </Axis>
    <Axis>
      <Type>Left</Type>
      <Inverted>false</Inverted>
      <Minimum>NaN</Minimum>
      <Maximum>NaN</Maximum>
      <Interval>NaN</Interval>
    </Axis>
    <LegendPosition>TopRight</LegendPosition>
    <DisabledSeries />
  </Graph>
  <Graph>
    <Name>Fixation</Name>
    <Series>
      <Name>fix</Name>
      <IncludeInDocumentation>true</IncludeInDocumentation>
      <Type>Scatter</Type>
      <XAxis>Bottom</XAxis>
      <YAxis>Left</YAxis>
      <ColourArgb>-11094807</ColourArgb>
      <FactorIndexToVaryColours>0</FactorIndexToVaryColours>
      <FactorIndexToVaryMarkers>-1</FactorIndexToVaryMarkers>
      <FactorIndexToVaryLines>-1</FactorIndexToVaryLines>
      <Marker>FilledCircle</Marker>
      <MarkerSize>Normal</MarkerSize>
      <Line>Solid</Line>
      <LineThickness>Normal</LineThickness>
      <Checkpoint>Current</Checkpoint>
      <TableName>ReportingWithPatches</TableName>
      <XFieldName>Date</XFieldName>
      <YFieldName>Fixation</YFieldName>
      <ShowInLegend>true</ShowInLegend>
      <IncludeSeriesNameInLegend>true</IncludeSeriesNameInLegend>
      <Cumulative>true</Cumulative>
      <CumulativeX>false</CumulativeX>
    </Series>
    <IncludeInDocumentation>true</IncludeInDocumentation>
    <Axis>
      <Type>Bottom</Type>
      <Inverted>false</Inverted>
      <Minimum>NaN</Minimum>
      <Maximum>NaN</Maximum>
      <Interval>NaN</Interval>
    </Axis>
    <Axis>
      <Type>Left</Type>
      <Inverted>false</Inverted>
      <Minimum>NaN</Minimum>
      <Maximum>NaN</Maximum>
      <Interval>NaN</Interval>
    </Axis>
    <LegendPosition>TopRight</LegendPosition>
    <DisabledSeries />
  </Graph>
  <Graph>
    <Name>HerbageGrazed</Name>
    <Series>
      <Name>grazed</Name>
      <IncludeInDocumentation>true</IncludeInDocumentation>
      <Type>Scatter</Type>
      <XAxis>Bottom</XAxis>
      <YAxis>Left</YAxis>
      <ColourArgb>-11094807</ColourArgb>
      <FactorIndexToVaryColours>0</FactorIndexToVaryColours>
      <FactorIndexToVaryMarkers>-1</FactorIndexToVaryMarkers>
      <FactorIndexToVaryLines>-1</FactorIndexToVaryLines>
      <Marker>FilledCircle</Marker>
      <MarkerSize>Normal</MarkerSize>
      <Line>Solid</Line>
      <LineThickness>Normal</LineThickness>
      <Checkpoint>Current</Checkpoint>
      <TableName>ReportingWithPatches</TableName>
      <XFieldName>Date</XFieldName>
      <YFieldName>HerbageGrazed</YFieldName>
      <ShowInLegend>true</ShowInLegend>
      <IncludeSeriesNameInLegend>true</IncludeSeriesNameInLegend>
      <Cumulative>false</Cumulative>
      <CumulativeX>false</CumulativeX>
    </Series>
    <IncludeInDocumentation>true</IncludeInDocumentation>
    <Axis>
      <Type>Bottom</Type>
      <Inverted>false</Inverted>
      <Minimum>NaN</Minimum>
      <Maximum>NaN</Maximum>
      <Interval>NaN</Interval>
    </Axis>
    <Axis>
      <Type>Left</Type>
      <Inverted>false</Inverted>
      <Minimum>NaN</Minimum>
      <Maximum>NaN</Maximum>
      <Interval>NaN</Interval>
    </Axis>
    <LegendPosition>TopRight</LegendPosition>
    <DisabledSeries />
  </Graph>
  <Graph>
    <Name>UreaNExplicit</Name>
    <Series>
      <Name>urea</Name>
      <IncludeInDocumentation>true</IncludeInDocumentation>
      <Type>Scatter</Type>
      <XAxis>Bottom</XAxis>
      <YAxis>Left</YAxis>
      <ColourArgb>-1663232</ColourArgb>
      <FactorIndexToVaryColours>1</FactorIndexToVaryColours>
      <FactorIndexToVaryMarkers>-1</FactorIndexToVaryMarkers>
      <FactorIndexToVaryLines>-1</FactorIndexToVaryLines>
      <Marker>None</Marker>
      <MarkerSize>Normal</MarkerSize>
      <Line>Solid</Line>
      <LineThickness>Normal</LineThickness>
      <Checkpoint>Current</Checkpoint>
      <TableName>Report</TableName>
      <XFieldName>Date</XFieldName>
      <YFieldName>minNPaddock</YFieldName>
      <ShowInLegend>true</ShowInLegend>
      <IncludeSeriesNameInLegend>true</IncludeSeriesNameInLegend>
      <Cumulative>false</Cumulative>
      <CumulativeX>false</CumulativeX>
    </Series>
    <IncludeInDocumentation>true</IncludeInDocumentation>
    <Axis>
      <Type>Bottom</Type>
      <Inverted>false</Inverted>
      <Minimum>NaN</Minimum>
      <Maximum>NaN</Maximum>
      <Interval>NaN</Interval>
    </Axis>
    <Axis>
      <Type>Left</Type>
      <Inverted>false</Inverted>
      <Minimum>NaN</Minimum>
      <Maximum>NaN</Maximum>
      <Interval>NaN</Interval>
    </Axis>
    <LegendPosition>TopRight</LegendPosition>
    <DisabledSeries />
  </Graph>
  <IncludeInDocumentation>true</IncludeInDocumentation>
  <ExplorerWidth>278</ExplorerWidth>
</Simulations>